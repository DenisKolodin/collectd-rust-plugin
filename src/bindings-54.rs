/* automatically generated by rust-bindgen */

pub const _DLFCN_H : :: std :: os :: raw :: c_uint = 1 ; pub const _FEATURES_H : :: std :: os :: raw :: c_uint = 1 ; pub const _DEFAULT_SOURCE : :: std :: os :: raw :: c_uint = 1 ; pub const _BSD_SOURCE : :: std :: os :: raw :: c_uint = 1 ; pub const _SVID_SOURCE : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_ISOC11 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_ISOC99 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_ISOC95 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_POSIX_IMPLICITLY : :: std :: os :: raw :: c_uint = 1 ; pub const _POSIX_SOURCE : :: std :: os :: raw :: c_uint = 1 ; pub const _POSIX_C_SOURCE : :: std :: os :: raw :: c_uint = 200809 ; pub const __USE_POSIX : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_POSIX2 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_POSIX199309 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_POSIX199506 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_XOPEN2K : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_XOPEN2K8 : :: std :: os :: raw :: c_uint = 1 ; pub const _ATFILE_SOURCE : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_MISC : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_BSD : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_SVID : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_ATFILE : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_FORTIFY_LEVEL : :: std :: os :: raw :: c_uint = 0 ; pub const _STDC_PREDEF_H : :: std :: os :: raw :: c_uint = 1 ; pub const __STDC_IEC_559__ : :: std :: os :: raw :: c_uint = 1 ; pub const __STDC_IEC_559_COMPLEX__ : :: std :: os :: raw :: c_uint = 1 ; pub const __STDC_ISO_10646__ : :: std :: os :: raw :: c_uint = 201103 ; pub const __STDC_NO_THREADS__ : :: std :: os :: raw :: c_uint = 1 ; pub const __GNU_LIBRARY__ : :: std :: os :: raw :: c_uint = 6 ; pub const __GLIBC__ : :: std :: os :: raw :: c_uint = 2 ; pub const __GLIBC_MINOR__ : :: std :: os :: raw :: c_uint = 19 ; pub const _SYS_CDEFS_H : :: std :: os :: raw :: c_uint = 1 ; pub const __WORDSIZE : :: std :: os :: raw :: c_uint = 64 ; pub const __WORDSIZE_TIME64_COMPAT32 : :: std :: os :: raw :: c_uint = 1 ; pub const __SYSCALL_WORDSIZE : :: std :: os :: raw :: c_uint = 64 ; pub const RTLD_LAZY : :: std :: os :: raw :: c_uint = 1 ; pub const RTLD_NOW : :: std :: os :: raw :: c_uint = 2 ; pub const RTLD_BINDING_MASK : :: std :: os :: raw :: c_uint = 3 ; pub const RTLD_NOLOAD : :: std :: os :: raw :: c_uint = 4 ; pub const RTLD_DEEPBIND : :: std :: os :: raw :: c_uint = 8 ; pub const RTLD_GLOBAL : :: std :: os :: raw :: c_uint = 256 ; pub const RTLD_LOCAL : :: std :: os :: raw :: c_uint = 0 ; pub const RTLD_NODELETE : :: std :: os :: raw :: c_uint = 4096 ; pub const _STDLIB_H : :: std :: os :: raw :: c_uint = 1 ; pub const WNOHANG : :: std :: os :: raw :: c_uint = 1 ; pub const WUNTRACED : :: std :: os :: raw :: c_uint = 2 ; pub const WSTOPPED : :: std :: os :: raw :: c_uint = 2 ; pub const WEXITED : :: std :: os :: raw :: c_uint = 4 ; pub const WCONTINUED : :: std :: os :: raw :: c_uint = 8 ; pub const WNOWAIT : :: std :: os :: raw :: c_uint = 16777216 ; pub const __WNOTHREAD : :: std :: os :: raw :: c_uint = 536870912 ; pub const __WALL : :: std :: os :: raw :: c_uint = 1073741824 ; pub const __WCLONE : :: std :: os :: raw :: c_uint = 2147483648 ; pub const __ENUM_IDTYPE_T : :: std :: os :: raw :: c_uint = 1 ; pub const __W_CONTINUED : :: std :: os :: raw :: c_uint = 65535 ; pub const __WCOREFLAG : :: std :: os :: raw :: c_uint = 128 ; pub const _ENDIAN_H : :: std :: os :: raw :: c_uint = 1 ; pub const __LITTLE_ENDIAN : :: std :: os :: raw :: c_uint = 1234 ; pub const __BIG_ENDIAN : :: std :: os :: raw :: c_uint = 4321 ; pub const __PDP_ENDIAN : :: std :: os :: raw :: c_uint = 3412 ; pub const __BYTE_ORDER : :: std :: os :: raw :: c_uint = 1234 ; pub const __FLOAT_WORD_ORDER : :: std :: os :: raw :: c_uint = 1234 ; pub const LITTLE_ENDIAN : :: std :: os :: raw :: c_uint = 1234 ; pub const BIG_ENDIAN : :: std :: os :: raw :: c_uint = 4321 ; pub const PDP_ENDIAN : :: std :: os :: raw :: c_uint = 3412 ; pub const BYTE_ORDER : :: std :: os :: raw :: c_uint = 1234 ; pub const _BITS_BYTESWAP_H : :: std :: os :: raw :: c_uint = 1 ; pub const _BITS_TYPES_H : :: std :: os :: raw :: c_uint = 1 ; pub const _BITS_TYPESIZES_H : :: std :: os :: raw :: c_uint = 1 ; pub const __OFF_T_MATCHES_OFF64_T : :: std :: os :: raw :: c_uint = 1 ; pub const __INO_T_MATCHES_INO64_T : :: std :: os :: raw :: c_uint = 1 ; pub const __FD_SETSIZE : :: std :: os :: raw :: c_uint = 1024 ; pub const __ldiv_t_defined : :: std :: os :: raw :: c_uint = 1 ; pub const __lldiv_t_defined : :: std :: os :: raw :: c_uint = 1 ; pub const RAND_MAX : :: std :: os :: raw :: c_uint = 2147483647 ; pub const EXIT_FAILURE : :: std :: os :: raw :: c_uint = 1 ; pub const EXIT_SUCCESS : :: std :: os :: raw :: c_uint = 0 ; pub const _SYS_TYPES_H : :: std :: os :: raw :: c_uint = 1 ; pub const __clock_t_defined : :: std :: os :: raw :: c_uint = 1 ; pub const __time_t_defined : :: std :: os :: raw :: c_uint = 1 ; pub const __clockid_t_defined : :: std :: os :: raw :: c_uint = 1 ; pub const __timer_t_defined : :: std :: os :: raw :: c_uint = 1 ; pub const __BIT_TYPES_DEFINED__ : :: std :: os :: raw :: c_uint = 1 ; pub const _SYS_SELECT_H : :: std :: os :: raw :: c_uint = 1 ; pub const __FD_ZERO_STOS : & 'static [ u8 ; 6usize ] = b"stosq\0" ; pub const _SIGSET_H_types : :: std :: os :: raw :: c_uint = 1 ; pub const __timespec_defined : :: std :: os :: raw :: c_uint = 1 ; pub const _STRUCT_TIMEVAL : :: std :: os :: raw :: c_uint = 1 ; pub const FD_SETSIZE : :: std :: os :: raw :: c_uint = 1024 ; pub const _SYS_SYSMACROS_H : :: std :: os :: raw :: c_uint = 1 ; pub const _BITS_PTHREADTYPES_H : :: std :: os :: raw :: c_uint = 1 ; pub const __SIZEOF_PTHREAD_ATTR_T : :: std :: os :: raw :: c_uint = 56 ; pub const __SIZEOF_PTHREAD_MUTEX_T : :: std :: os :: raw :: c_uint = 40 ; pub const __SIZEOF_PTHREAD_MUTEXATTR_T : :: std :: os :: raw :: c_uint = 4 ; pub const __SIZEOF_PTHREAD_COND_T : :: std :: os :: raw :: c_uint = 48 ; pub const __SIZEOF_PTHREAD_CONDATTR_T : :: std :: os :: raw :: c_uint = 4 ; pub const __SIZEOF_PTHREAD_RWLOCK_T : :: std :: os :: raw :: c_uint = 56 ; pub const __SIZEOF_PTHREAD_RWLOCKATTR_T : :: std :: os :: raw :: c_uint = 8 ; pub const __SIZEOF_PTHREAD_BARRIER_T : :: std :: os :: raw :: c_uint = 32 ; pub const __SIZEOF_PTHREAD_BARRIERATTR_T : :: std :: os :: raw :: c_uint = 4 ; pub const __have_pthread_attr_t : :: std :: os :: raw :: c_uint = 1 ; pub const __PTHREAD_MUTEX_HAVE_PREV : :: std :: os :: raw :: c_uint = 1 ; pub const __PTHREAD_MUTEX_HAVE_ELISION : :: std :: os :: raw :: c_uint = 1 ; pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED : :: std :: os :: raw :: c_uint = 1 ; pub const _ALLOCA_H : :: std :: os :: raw :: c_uint = 1 ; pub const COLLECT_DAEMON : :: std :: os :: raw :: c_uint = 1 ; pub const COLLECT_DEBUG : :: std :: os :: raw :: c_uint = 0 ; pub const COLLECT_GETIFADDRS : :: std :: os :: raw :: c_uint = 0 ; pub const COLLECT_LIBESMTP : :: std :: os :: raw :: c_uint = 1 ; pub const FP_LAYOUT_NEED_NOTHING : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_AMQP_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_ARGZ_ADD : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_ARGZ_APPEND : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_ARGZ_COUNT : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_ARGZ_CREATE_SEP : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_ARGZ_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_ARGZ_INSERT : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_ARGZ_NEXT : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_ARGZ_STRINGIFY : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_ARPA_INET_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_ARPA_NAMESER_COMPAT_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_ARPA_NAMESER_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_ASSERT_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_CLOCK_GETTIME : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_CLOSEDIR : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_CLOSELOG : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_CTYPE_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_CURL_CURL_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_DBI_DBI_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_DECL_STRERROR_R : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_DIRENT_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_DLERROR : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_DLFCN_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_ENDIAN_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_ERRNO_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_ERROR_T : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_FCNTL_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_FNMATCH_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_GCRYPT_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_GETADDRINFO : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_GETGRNAM_R : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_GETIFADDRS : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_GETLOADAVG : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_GETMNTENT : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_GETNAMEINFO : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_GETPWNAM_R : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_GETTIMEOFDAY : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_GETUTENT : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_GETUTXENT : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_GM_PROTOCOL_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_GOOGLE_PROTOBUF_C_PROTOBUF_C_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_GRP_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_IFADDRS_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_IF_INDEXTONAME : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_INTTYPES_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_JNI_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LIBDL : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LIBDLLOADER : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LIBESMTP : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LIBESMTP_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LIBGANGLIA : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LIBGCRYPT : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LIBGEN_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LIBIPTC_LIBIP6TC_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LIBIPTC_LIBIPTC_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LIBLVM2APP : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LIBMEMCACHED : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LIBMEMCACHED_MEMCACHED_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LIBMNL : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LIBMNL_LIBMNL_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LIBPCAP : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LIBPERL : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LIBPQ_FE_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LIBPTHREAD : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LIBRABBITMQ : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LIBRESOLV : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LIBSENSORS : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LIBTOKYOTYRANT : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LIBVIRT_LIBVIRT_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LIBXML_PARSER_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LIBXMMS : :: std :: os :: raw :: c_uint = 0 ; pub const HAVE_LIBYAJL : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LIMITS_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LINUX_ETHTOOL_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LINUX_GEN_STATS_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LINUX_IF_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LINUX_IP_VS_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LINUX_MAJOR_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LINUX_NETDEVICE_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LINUX_PKT_SCHED_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LINUX_RAID_MD_U_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LINUX_SOCKIOS_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LINUX_UN_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LINUX_WIRELESS_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LTDL : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LVM2APP_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_MATH_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_MEMCPY : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_MEMORY_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_MNTENT_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_MODBUS_MODBUS_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_MYSQL_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_NANOSLEEP : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_NETDB_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_NETINET_ICMP6_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_NETINET_IF_ETHER_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_NETINET_IN_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_NETINET_IN_SYSTM_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_NETINET_IP6_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_NETINET_IP_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_NETINET_IP_ICMP_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_NETINET_TCP_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_NETINET_UDP_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_NET_IF_ARP_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_NET_IF_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_NET_IF_PPP_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_NET_IP_VS_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_NET_PPP_DEFS_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_NET_SNMP_NET_SNMP_CONFIG_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_ONE_GETMNTENT : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_OPENDIR : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_OPENIPMI_IPMI_SMI_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_OPENLOG : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_OPING_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PATHS_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PCAP_BPF_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PCAP_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PERL_ITHREADS : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PERL_STRUCT_MGVTBL_SVT_LOCAL : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_AGGREGATION : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_AMQP : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_APACHE : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_APCUPS : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_ASCENT : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_BATTERY : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_BIND : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_CGROUPS : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_CONNTRACK : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_CONTEXTSWITCH : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_CPU : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_CPUFREQ : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_CSV : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_CURL : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_CURL_JSON : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_CURL_XML : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_DBI : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_DF : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_DISK : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_DNS : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_EMAIL : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_ENTROPY : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_ETHSTAT : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_EXEC : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_FILECOUNT : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_FSCACHE : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_GMOND : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_HDDTEMP : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_INTERFACE : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_IPMI : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_IPTABLES : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_IPVS : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_IRQ : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_JAVA : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_LIBVIRT : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_LOAD : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_LOGFILE : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_LVM : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_MADWIFI : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_MATCH_EMPTY_COUNTER : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_MATCH_HASHED : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_MATCH_REGEX : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_MATCH_TIMEDIFF : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_MATCH_VALUE : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_MBMON : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_MD : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_MEMCACHEC : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_MEMCACHED : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_MEMORY : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_MODBUS : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_MULTIMETER : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_MYSQL : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_NETLINK : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_NETWORK : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_NFS : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_NGINX : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_NOTIFY_DESKTOP : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_NOTIFY_EMAIL : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_NTPD : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_NUMA : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_NUT : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_OLSRD : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_OPENVPN : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_PERL : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_PINBA : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_PING : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_POSTGRESQL : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_POWERDNS : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_PROCESSES : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_PROTOCOLS : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_PYTHON : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_RRDCACHED : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_RRDTOOL : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_SENSORS : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_SERIAL : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_SNMP : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_STATSD : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_SWAP : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_SYSLOG : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_TABLE : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_TAIL : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_TAIL_CSV : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_TARGET_NOTIFICATION : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_TARGET_REPLACE : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_TARGET_SCALE : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_TARGET_SET : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_TARGET_V5UPGRADE : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_TCPCONNS : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_TEAMSPEAK2 : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_TED : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_THERMAL : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_THRESHOLD : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_TOKYOTYRANT : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_UNIXSOCK : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_UPTIME : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_USERS : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_UUID : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_VARNISH : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_VMEM : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_VSERVER : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_WIRELESS : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_WRITE_GRAPHITE : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_WRITE_HTTP : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PLUGIN_WRITE_RIEMANN : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_POLL_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PRELOADED_SYMBOLS : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PTHREAD_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PWD_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_PYTHON_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_READDIR : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_REGCOMP : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_REGERROR : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_REGEXEC : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_REGEX_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_REGFREE : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_RRD_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_SELECT : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_SENSORS_SENSORS_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_SETENV : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_SETGROUPS : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_SIGNAL_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_SOCKET : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_STATFS : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_STATVFS : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_STDARG_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_STDBOOL_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_STDINT_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_STDIO_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_STDLIB_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_STRCASECMP : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_STRCHR : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_STRCMP : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_STRDUP : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_STRERROR_R : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_STRINGS_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_STRING_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_STRLEN : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_STRNCASECMP : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_STRNCMP : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_STRNCPY : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_STRPTIME : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_STRSTR : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_STRTOL : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_STRUCT_IP_MREQN_IMR_IFINDEX : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_STRUCT_UDPHDR_DEST : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_STRUCT_UDPHDR_SOURCE : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_STRUCT_UDPHDR_UH_DPORT : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_STRUCT_UDPHDR_UH_SPORT : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_SYSCONF : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_SYSCTL : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_SYSLOG : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_SYSLOG_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_SYS_IOCTL_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_SYS_MOUNT_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_SYS_PARAM_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_SYS_RESOURCE_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_SYS_SELECT_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_SYS_SOCKET_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_SYS_STATFS_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_SYS_STATVFS_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_SYS_STAT_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_SYS_SWAP_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_SYS_SYSCTL_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_SYS_TYPES_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_SYS_UN_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_SYS_VFS_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_SYS_WAIT_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_TCA_STATS : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_TCA_STATS2 : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_TCRDB_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_TERMIOS_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_THREADSAFE_LIBRRD : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_UNISTD_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_UPSCLIENT_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_UPSCONN_T : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_UTMPX_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_UTMP_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_VARNISH_V3 : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_VARNISH_VARNISHAPI_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_VARNISH_VSC_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_WORDEXP_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_WORKING_ARGZ : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_YAJL_YAJL_PARSE_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_YAJL_YAJL_VERSION_H : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE__BOOL : :: std :: os :: raw :: c_uint = 1 ; pub const KERNEL_LINUX : :: std :: os :: raw :: c_uint = 1 ; pub const LIBTOOL_VERSION : :: std :: os :: raw :: c_uint = 2 ; pub const LT_DLSEARCH_PATH : & 'static [ u8 ; 182usize ] = b"/lib:/usr/lib:/usr/lib/i386-linux-gnu/libfakeroot:/usr/lib/i386-linux-gnu/mesa:/lib/i386-linux-gnu:/usr/lib/i386-linux-gnu:/lib/i686-linux-gnu:/usr/lib/i686-linux-gnu:/usr/local/lib\0" ; pub const LT_LIBEXT : & 'static [ u8 ; 2usize ] = b"a\0" ; pub const LT_LIBPREFIX : & 'static [ u8 ; 4usize ] = b"lib\0" ; pub const LT_MODULE_EXT : & 'static [ u8 ; 4usize ] = b".so\0" ; pub const LT_MODULE_PATH_VAR : & 'static [ u8 ; 16usize ] = b"LD_LIBRARY_PATH\0" ; pub const LT_OBJDIR : & 'static [ u8 ; 7usize ] = b".libs/\0" ; pub const NAN_STATIC_DEFAULT : :: std :: os :: raw :: c_uint = 1 ; pub const PACKAGE : & 'static [ u8 ; 9usize ] = b"collectd\0" ; pub const PACKAGE_BUGREPORT : & 'static [ u8 ; 1usize ] = b"\0" ; pub const PACKAGE_NAME : & 'static [ u8 ; 9usize ] = b"collectd\0" ; pub const PACKAGE_STRING : & 'static [ u8 ; 19usize ] = b"collectd 5.4.0.git\0" ; pub const PACKAGE_TARNAME : & 'static [ u8 ; 9usize ] = b"collectd\0" ; pub const PACKAGE_URL : & 'static [ u8 ; 1usize ] = b"\0" ; pub const PACKAGE_VERSION : & 'static [ u8 ; 10usize ] = b"5.4.0.git\0" ; pub const STDC_HEADERS : :: std :: os :: raw :: c_uint = 1 ; pub const STRPTIME_NEEDS_STANDARDS : :: std :: os :: raw :: c_uint = 1 ; pub const TIME_WITH_SYS_TIME : :: std :: os :: raw :: c_uint = 1 ; pub const VERSION : & 'static [ u8 ; 10usize ] = b"5.4.0.git\0" ; pub const YYTEXT_POINTER : :: std :: os :: raw :: c_uint = 1 ; pub const _DARWIN_USE_64_BIT_INODE : :: std :: os :: raw :: c_uint = 1 ; pub const _FILE_OFFSET_BITS : :: std :: os :: raw :: c_uint = 64 ; pub const _STDIO_H : :: std :: os :: raw :: c_uint = 1 ; pub const __FILE_defined : :: std :: os :: raw :: c_uint = 1 ; pub const ____FILE_defined : :: std :: os :: raw :: c_uint = 1 ; pub const _G_config_h : :: std :: os :: raw :: c_uint = 1 ; pub const ____mbstate_t_defined : :: std :: os :: raw :: c_uint = 1 ; pub const _G_HAVE_MMAP : :: std :: os :: raw :: c_uint = 1 ; pub const _G_HAVE_MREMAP : :: std :: os :: raw :: c_uint = 1 ; pub const _G_IO_IO_FILE_VERSION : :: std :: os :: raw :: c_uint = 131073 ; pub const _G_BUFSIZ : :: std :: os :: raw :: c_uint = 8192 ; pub const _IO_BUFSIZ : :: std :: os :: raw :: c_uint = 8192 ; pub const __GNUC_VA_LIST : :: std :: os :: raw :: c_uint = 1 ; pub const _IO_UNIFIED_JUMPTABLES : :: std :: os :: raw :: c_uint = 1 ; pub const EOF : :: std :: os :: raw :: c_int = -1 ; pub const _IOS_INPUT : :: std :: os :: raw :: c_uint = 1 ; pub const _IOS_OUTPUT : :: std :: os :: raw :: c_uint = 2 ; pub const _IOS_ATEND : :: std :: os :: raw :: c_uint = 4 ; pub const _IOS_APPEND : :: std :: os :: raw :: c_uint = 8 ; pub const _IOS_TRUNC : :: std :: os :: raw :: c_uint = 16 ; pub const _IOS_NOCREATE : :: std :: os :: raw :: c_uint = 32 ; pub const _IOS_NOREPLACE : :: std :: os :: raw :: c_uint = 64 ; pub const _IOS_BIN : :: std :: os :: raw :: c_uint = 128 ; pub const _IO_MAGIC : :: std :: os :: raw :: c_uint = 4222418944 ; pub const _OLD_STDIO_MAGIC : :: std :: os :: raw :: c_uint = 4206624768 ; pub const _IO_MAGIC_MASK : :: std :: os :: raw :: c_uint = 4294901760 ; pub const _IO_USER_BUF : :: std :: os :: raw :: c_uint = 1 ; pub const _IO_UNBUFFERED : :: std :: os :: raw :: c_uint = 2 ; pub const _IO_NO_READS : :: std :: os :: raw :: c_uint = 4 ; pub const _IO_NO_WRITES : :: std :: os :: raw :: c_uint = 8 ; pub const _IO_EOF_SEEN : :: std :: os :: raw :: c_uint = 16 ; pub const _IO_ERR_SEEN : :: std :: os :: raw :: c_uint = 32 ; pub const _IO_DELETE_DONT_CLOSE : :: std :: os :: raw :: c_uint = 64 ; pub const _IO_LINKED : :: std :: os :: raw :: c_uint = 128 ; pub const _IO_IN_BACKUP : :: std :: os :: raw :: c_uint = 256 ; pub const _IO_LINE_BUF : :: std :: os :: raw :: c_uint = 512 ; pub const _IO_TIED_PUT_GET : :: std :: os :: raw :: c_uint = 1024 ; pub const _IO_CURRENTLY_PUTTING : :: std :: os :: raw :: c_uint = 2048 ; pub const _IO_IS_APPENDING : :: std :: os :: raw :: c_uint = 4096 ; pub const _IO_IS_FILEBUF : :: std :: os :: raw :: c_uint = 8192 ; pub const _IO_BAD_SEEN : :: std :: os :: raw :: c_uint = 16384 ; pub const _IO_USER_LOCK : :: std :: os :: raw :: c_uint = 32768 ; pub const _IO_FLAGS2_MMAP : :: std :: os :: raw :: c_uint = 1 ; pub const _IO_FLAGS2_NOTCANCEL : :: std :: os :: raw :: c_uint = 2 ; pub const _IO_FLAGS2_USER_WBUF : :: std :: os :: raw :: c_uint = 8 ; pub const _IO_SKIPWS : :: std :: os :: raw :: c_uint = 1 ; pub const _IO_LEFT : :: std :: os :: raw :: c_uint = 2 ; pub const _IO_RIGHT : :: std :: os :: raw :: c_uint = 4 ; pub const _IO_INTERNAL : :: std :: os :: raw :: c_uint = 8 ; pub const _IO_DEC : :: std :: os :: raw :: c_uint = 16 ; pub const _IO_OCT : :: std :: os :: raw :: c_uint = 32 ; pub const _IO_HEX : :: std :: os :: raw :: c_uint = 64 ; pub const _IO_SHOWBASE : :: std :: os :: raw :: c_uint = 128 ; pub const _IO_SHOWPOINT : :: std :: os :: raw :: c_uint = 256 ; pub const _IO_UPPERCASE : :: std :: os :: raw :: c_uint = 512 ; pub const _IO_SHOWPOS : :: std :: os :: raw :: c_uint = 1024 ; pub const _IO_SCIENTIFIC : :: std :: os :: raw :: c_uint = 2048 ; pub const _IO_FIXED : :: std :: os :: raw :: c_uint = 4096 ; pub const _IO_UNITBUF : :: std :: os :: raw :: c_uint = 8192 ; pub const _IO_STDIO : :: std :: os :: raw :: c_uint = 16384 ; pub const _IO_DONT_CLOSE : :: std :: os :: raw :: c_uint = 32768 ; pub const _IO_BOOLALPHA : :: std :: os :: raw :: c_uint = 65536 ; pub const _IOFBF : :: std :: os :: raw :: c_uint = 0 ; pub const _IOLBF : :: std :: os :: raw :: c_uint = 1 ; pub const _IONBF : :: std :: os :: raw :: c_uint = 2 ; pub const BUFSIZ : :: std :: os :: raw :: c_uint = 8192 ; pub const SEEK_SET : :: std :: os :: raw :: c_uint = 0 ; pub const SEEK_CUR : :: std :: os :: raw :: c_uint = 1 ; pub const SEEK_END : :: std :: os :: raw :: c_uint = 2 ; pub const P_tmpdir : & 'static [ u8 ; 5usize ] = b"/tmp\0" ; pub const L_tmpnam : :: std :: os :: raw :: c_uint = 20 ; pub const TMP_MAX : :: std :: os :: raw :: c_uint = 238328 ; pub const FILENAME_MAX : :: std :: os :: raw :: c_uint = 4096 ; pub const L_ctermid : :: std :: os :: raw :: c_uint = 9 ; pub const FOPEN_MAX : :: std :: os :: raw :: c_uint = 16 ; pub const _SYS_STAT_H : :: std :: os :: raw :: c_uint = 1 ; pub const _BITS_STAT_H : :: std :: os :: raw :: c_uint = 1 ; pub const _STAT_VER_KERNEL : :: std :: os :: raw :: c_uint = 0 ; pub const _STAT_VER_LINUX : :: std :: os :: raw :: c_uint = 1 ; pub const _MKNOD_VER_LINUX : :: std :: os :: raw :: c_uint = 0 ; pub const _STAT_VER : :: std :: os :: raw :: c_uint = 1 ; pub const __S_IFMT : :: std :: os :: raw :: c_uint = 61440 ; pub const __S_IFDIR : :: std :: os :: raw :: c_uint = 16384 ; pub const __S_IFCHR : :: std :: os :: raw :: c_uint = 8192 ; pub const __S_IFBLK : :: std :: os :: raw :: c_uint = 24576 ; pub const __S_IFREG : :: std :: os :: raw :: c_uint = 32768 ; pub const __S_IFIFO : :: std :: os :: raw :: c_uint = 4096 ; pub const __S_IFLNK : :: std :: os :: raw :: c_uint = 40960 ; pub const __S_IFSOCK : :: std :: os :: raw :: c_uint = 49152 ; pub const __S_ISUID : :: std :: os :: raw :: c_uint = 2048 ; pub const __S_ISGID : :: std :: os :: raw :: c_uint = 1024 ; pub const __S_ISVTX : :: std :: os :: raw :: c_uint = 512 ; pub const __S_IREAD : :: std :: os :: raw :: c_uint = 256 ; pub const __S_IWRITE : :: std :: os :: raw :: c_uint = 128 ; pub const __S_IEXEC : :: std :: os :: raw :: c_uint = 64 ; pub const UTIME_NOW : :: std :: os :: raw :: c_uint = 1073741823 ; pub const UTIME_OMIT : :: std :: os :: raw :: c_uint = 1073741822 ; pub const S_IFMT : :: std :: os :: raw :: c_uint = 61440 ; pub const S_IFDIR : :: std :: os :: raw :: c_uint = 16384 ; pub const S_IFCHR : :: std :: os :: raw :: c_uint = 8192 ; pub const S_IFBLK : :: std :: os :: raw :: c_uint = 24576 ; pub const S_IFREG : :: std :: os :: raw :: c_uint = 32768 ; pub const S_IFIFO : :: std :: os :: raw :: c_uint = 4096 ; pub const S_IFLNK : :: std :: os :: raw :: c_uint = 40960 ; pub const S_IFSOCK : :: std :: os :: raw :: c_uint = 49152 ; pub const S_ISUID : :: std :: os :: raw :: c_uint = 2048 ; pub const S_ISGID : :: std :: os :: raw :: c_uint = 1024 ; pub const S_ISVTX : :: std :: os :: raw :: c_uint = 512 ; pub const S_IRUSR : :: std :: os :: raw :: c_uint = 256 ; pub const S_IWUSR : :: std :: os :: raw :: c_uint = 128 ; pub const S_IXUSR : :: std :: os :: raw :: c_uint = 64 ; pub const S_IRWXU : :: std :: os :: raw :: c_uint = 448 ; pub const S_IREAD : :: std :: os :: raw :: c_uint = 256 ; pub const S_IWRITE : :: std :: os :: raw :: c_uint = 128 ; pub const S_IEXEC : :: std :: os :: raw :: c_uint = 64 ; pub const S_IRGRP : :: std :: os :: raw :: c_uint = 32 ; pub const S_IWGRP : :: std :: os :: raw :: c_uint = 16 ; pub const S_IXGRP : :: std :: os :: raw :: c_uint = 8 ; pub const S_IRWXG : :: std :: os :: raw :: c_uint = 56 ; pub const S_IROTH : :: std :: os :: raw :: c_uint = 4 ; pub const S_IWOTH : :: std :: os :: raw :: c_uint = 2 ; pub const S_IXOTH : :: std :: os :: raw :: c_uint = 1 ; pub const S_IRWXO : :: std :: os :: raw :: c_uint = 7 ; pub const ACCESSPERMS : :: std :: os :: raw :: c_uint = 511 ; pub const ALLPERMS : :: std :: os :: raw :: c_uint = 4095 ; pub const DEFFILEMODE : :: std :: os :: raw :: c_uint = 438 ; pub const S_BLKSIZE : :: std :: os :: raw :: c_uint = 512 ; pub const _MKNOD_VER : :: std :: os :: raw :: c_uint = 0 ; pub const _STRING_H : :: std :: os :: raw :: c_uint = 1 ; pub const _XLOCALE_H : :: std :: os :: raw :: c_uint = 1 ; pub const _STRINGS_H : :: std :: os :: raw :: c_uint = 1 ; pub const _INTTYPES_H : :: std :: os :: raw :: c_uint = 1 ; pub const _STDINT_H : :: std :: os :: raw :: c_uint = 1 ; pub const _BITS_WCHAR_H : :: std :: os :: raw :: c_uint = 1 ; pub const INT8_MIN : :: std :: os :: raw :: c_int = -128 ; pub const INT16_MIN : :: std :: os :: raw :: c_int = -32768 ; pub const INT32_MIN : :: std :: os :: raw :: c_int = -2147483648 ; pub const INT8_MAX : :: std :: os :: raw :: c_uint = 127 ; pub const INT16_MAX : :: std :: os :: raw :: c_uint = 32767 ; pub const INT32_MAX : :: std :: os :: raw :: c_uint = 2147483647 ; pub const UINT8_MAX : :: std :: os :: raw :: c_uint = 255 ; pub const UINT16_MAX : :: std :: os :: raw :: c_uint = 65535 ; pub const UINT32_MAX : :: std :: os :: raw :: c_uint = 4294967295 ; pub const INT_LEAST8_MIN : :: std :: os :: raw :: c_int = -128 ; pub const INT_LEAST16_MIN : :: std :: os :: raw :: c_int = -32768 ; pub const INT_LEAST32_MIN : :: std :: os :: raw :: c_int = -2147483648 ; pub const INT_LEAST8_MAX : :: std :: os :: raw :: c_uint = 127 ; pub const INT_LEAST16_MAX : :: std :: os :: raw :: c_uint = 32767 ; pub const INT_LEAST32_MAX : :: std :: os :: raw :: c_uint = 2147483647 ; pub const UINT_LEAST8_MAX : :: std :: os :: raw :: c_uint = 255 ; pub const UINT_LEAST16_MAX : :: std :: os :: raw :: c_uint = 65535 ; pub const UINT_LEAST32_MAX : :: std :: os :: raw :: c_uint = 4294967295 ; pub const INT_FAST8_MIN : :: std :: os :: raw :: c_int = -128 ; pub const INT_FAST16_MIN : :: std :: os :: raw :: c_longlong = -9223372036854775808 ; pub const INT_FAST32_MIN : :: std :: os :: raw :: c_longlong = -9223372036854775808 ; pub const INT_FAST8_MAX : :: std :: os :: raw :: c_uint = 127 ; pub const INT_FAST16_MAX : :: std :: os :: raw :: c_ulonglong = 9223372036854775807 ; pub const INT_FAST32_MAX : :: std :: os :: raw :: c_ulonglong = 9223372036854775807 ; pub const UINT_FAST8_MAX : :: std :: os :: raw :: c_uint = 255 ; pub const UINT_FAST16_MAX : :: std :: os :: raw :: c_int = -1 ; pub const UINT_FAST32_MAX : :: std :: os :: raw :: c_int = -1 ; pub const INTPTR_MIN : :: std :: os :: raw :: c_longlong = -9223372036854775808 ; pub const INTPTR_MAX : :: std :: os :: raw :: c_ulonglong = 9223372036854775807 ; pub const UINTPTR_MAX : :: std :: os :: raw :: c_int = -1 ; pub const PTRDIFF_MIN : :: std :: os :: raw :: c_longlong = -9223372036854775808 ; pub const PTRDIFF_MAX : :: std :: os :: raw :: c_ulonglong = 9223372036854775807 ; pub const SIG_ATOMIC_MIN : :: std :: os :: raw :: c_int = -2147483648 ; pub const SIG_ATOMIC_MAX : :: std :: os :: raw :: c_uint = 2147483647 ; pub const SIZE_MAX : :: std :: os :: raw :: c_int = -1 ; pub const WINT_MIN : :: std :: os :: raw :: c_uint = 0 ; pub const WINT_MAX : :: std :: os :: raw :: c_uint = 4294967295 ; pub const ____gwchar_t_defined : :: std :: os :: raw :: c_uint = 1 ; pub const __PRI64_PREFIX : & 'static [ u8 ; 2usize ] = b"l\0" ; pub const __PRIPTR_PREFIX : & 'static [ u8 ; 2usize ] = b"l\0" ; pub const PRId8 : & 'static [ u8 ; 2usize ] = b"d\0" ; pub const PRId16 : & 'static [ u8 ; 2usize ] = b"d\0" ; pub const PRId32 : & 'static [ u8 ; 2usize ] = b"d\0" ; pub const PRId64 : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const PRIdLEAST8 : & 'static [ u8 ; 2usize ] = b"d\0" ; pub const PRIdLEAST16 : & 'static [ u8 ; 2usize ] = b"d\0" ; pub const PRIdLEAST32 : & 'static [ u8 ; 2usize ] = b"d\0" ; pub const PRIdLEAST64 : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const PRIdFAST8 : & 'static [ u8 ; 2usize ] = b"d\0" ; pub const PRIdFAST16 : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const PRIdFAST32 : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const PRIdFAST64 : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const PRIi8 : & 'static [ u8 ; 2usize ] = b"i\0" ; pub const PRIi16 : & 'static [ u8 ; 2usize ] = b"i\0" ; pub const PRIi32 : & 'static [ u8 ; 2usize ] = b"i\0" ; pub const PRIi64 : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const PRIiLEAST8 : & 'static [ u8 ; 2usize ] = b"i\0" ; pub const PRIiLEAST16 : & 'static [ u8 ; 2usize ] = b"i\0" ; pub const PRIiLEAST32 : & 'static [ u8 ; 2usize ] = b"i\0" ; pub const PRIiLEAST64 : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const PRIiFAST8 : & 'static [ u8 ; 2usize ] = b"i\0" ; pub const PRIiFAST16 : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const PRIiFAST32 : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const PRIiFAST64 : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const PRIo8 : & 'static [ u8 ; 2usize ] = b"o\0" ; pub const PRIo16 : & 'static [ u8 ; 2usize ] = b"o\0" ; pub const PRIo32 : & 'static [ u8 ; 2usize ] = b"o\0" ; pub const PRIo64 : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const PRIoLEAST8 : & 'static [ u8 ; 2usize ] = b"o\0" ; pub const PRIoLEAST16 : & 'static [ u8 ; 2usize ] = b"o\0" ; pub const PRIoLEAST32 : & 'static [ u8 ; 2usize ] = b"o\0" ; pub const PRIoLEAST64 : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const PRIoFAST8 : & 'static [ u8 ; 2usize ] = b"o\0" ; pub const PRIoFAST16 : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const PRIoFAST32 : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const PRIoFAST64 : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const PRIu8 : & 'static [ u8 ; 2usize ] = b"u\0" ; pub const PRIu16 : & 'static [ u8 ; 2usize ] = b"u\0" ; pub const PRIu32 : & 'static [ u8 ; 2usize ] = b"u\0" ; pub const PRIu64 : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const PRIuLEAST8 : & 'static [ u8 ; 2usize ] = b"u\0" ; pub const PRIuLEAST16 : & 'static [ u8 ; 2usize ] = b"u\0" ; pub const PRIuLEAST32 : & 'static [ u8 ; 2usize ] = b"u\0" ; pub const PRIuLEAST64 : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const PRIuFAST8 : & 'static [ u8 ; 2usize ] = b"u\0" ; pub const PRIuFAST16 : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const PRIuFAST32 : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const PRIuFAST64 : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const PRIx8 : & 'static [ u8 ; 2usize ] = b"x\0" ; pub const PRIx16 : & 'static [ u8 ; 2usize ] = b"x\0" ; pub const PRIx32 : & 'static [ u8 ; 2usize ] = b"x\0" ; pub const PRIx64 : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const PRIxLEAST8 : & 'static [ u8 ; 2usize ] = b"x\0" ; pub const PRIxLEAST16 : & 'static [ u8 ; 2usize ] = b"x\0" ; pub const PRIxLEAST32 : & 'static [ u8 ; 2usize ] = b"x\0" ; pub const PRIxLEAST64 : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const PRIxFAST8 : & 'static [ u8 ; 2usize ] = b"x\0" ; pub const PRIxFAST16 : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const PRIxFAST32 : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const PRIxFAST64 : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const PRIX8 : & 'static [ u8 ; 2usize ] = b"X\0" ; pub const PRIX16 : & 'static [ u8 ; 2usize ] = b"X\0" ; pub const PRIX32 : & 'static [ u8 ; 2usize ] = b"X\0" ; pub const PRIX64 : & 'static [ u8 ; 3usize ] = b"lX\0" ; pub const PRIXLEAST8 : & 'static [ u8 ; 2usize ] = b"X\0" ; pub const PRIXLEAST16 : & 'static [ u8 ; 2usize ] = b"X\0" ; pub const PRIXLEAST32 : & 'static [ u8 ; 2usize ] = b"X\0" ; pub const PRIXLEAST64 : & 'static [ u8 ; 3usize ] = b"lX\0" ; pub const PRIXFAST8 : & 'static [ u8 ; 2usize ] = b"X\0" ; pub const PRIXFAST16 : & 'static [ u8 ; 3usize ] = b"lX\0" ; pub const PRIXFAST32 : & 'static [ u8 ; 3usize ] = b"lX\0" ; pub const PRIXFAST64 : & 'static [ u8 ; 3usize ] = b"lX\0" ; pub const PRIdMAX : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const PRIiMAX : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const PRIoMAX : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const PRIuMAX : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const PRIxMAX : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const PRIXMAX : & 'static [ u8 ; 3usize ] = b"lX\0" ; pub const PRIdPTR : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const PRIiPTR : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const PRIoPTR : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const PRIuPTR : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const PRIxPTR : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const PRIXPTR : & 'static [ u8 ; 3usize ] = b"lX\0" ; pub const SCNd8 : & 'static [ u8 ; 4usize ] = b"hhd\0" ; pub const SCNd16 : & 'static [ u8 ; 3usize ] = b"hd\0" ; pub const SCNd32 : & 'static [ u8 ; 2usize ] = b"d\0" ; pub const SCNd64 : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const SCNdLEAST8 : & 'static [ u8 ; 4usize ] = b"hhd\0" ; pub const SCNdLEAST16 : & 'static [ u8 ; 3usize ] = b"hd\0" ; pub const SCNdLEAST32 : & 'static [ u8 ; 2usize ] = b"d\0" ; pub const SCNdLEAST64 : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const SCNdFAST8 : & 'static [ u8 ; 4usize ] = b"hhd\0" ; pub const SCNdFAST16 : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const SCNdFAST32 : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const SCNdFAST64 : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const SCNi8 : & 'static [ u8 ; 4usize ] = b"hhi\0" ; pub const SCNi16 : & 'static [ u8 ; 3usize ] = b"hi\0" ; pub const SCNi32 : & 'static [ u8 ; 2usize ] = b"i\0" ; pub const SCNi64 : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const SCNiLEAST8 : & 'static [ u8 ; 4usize ] = b"hhi\0" ; pub const SCNiLEAST16 : & 'static [ u8 ; 3usize ] = b"hi\0" ; pub const SCNiLEAST32 : & 'static [ u8 ; 2usize ] = b"i\0" ; pub const SCNiLEAST64 : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const SCNiFAST8 : & 'static [ u8 ; 4usize ] = b"hhi\0" ; pub const SCNiFAST16 : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const SCNiFAST32 : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const SCNiFAST64 : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const SCNu8 : & 'static [ u8 ; 4usize ] = b"hhu\0" ; pub const SCNu16 : & 'static [ u8 ; 3usize ] = b"hu\0" ; pub const SCNu32 : & 'static [ u8 ; 2usize ] = b"u\0" ; pub const SCNu64 : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const SCNuLEAST8 : & 'static [ u8 ; 4usize ] = b"hhu\0" ; pub const SCNuLEAST16 : & 'static [ u8 ; 3usize ] = b"hu\0" ; pub const SCNuLEAST32 : & 'static [ u8 ; 2usize ] = b"u\0" ; pub const SCNuLEAST64 : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const SCNuFAST8 : & 'static [ u8 ; 4usize ] = b"hhu\0" ; pub const SCNuFAST16 : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const SCNuFAST32 : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const SCNuFAST64 : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const SCNo8 : & 'static [ u8 ; 4usize ] = b"hho\0" ; pub const SCNo16 : & 'static [ u8 ; 3usize ] = b"ho\0" ; pub const SCNo32 : & 'static [ u8 ; 2usize ] = b"o\0" ; pub const SCNo64 : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const SCNoLEAST8 : & 'static [ u8 ; 4usize ] = b"hho\0" ; pub const SCNoLEAST16 : & 'static [ u8 ; 3usize ] = b"ho\0" ; pub const SCNoLEAST32 : & 'static [ u8 ; 2usize ] = b"o\0" ; pub const SCNoLEAST64 : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const SCNoFAST8 : & 'static [ u8 ; 4usize ] = b"hho\0" ; pub const SCNoFAST16 : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const SCNoFAST32 : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const SCNoFAST64 : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const SCNx8 : & 'static [ u8 ; 4usize ] = b"hhx\0" ; pub const SCNx16 : & 'static [ u8 ; 3usize ] = b"hx\0" ; pub const SCNx32 : & 'static [ u8 ; 2usize ] = b"x\0" ; pub const SCNx64 : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const SCNxLEAST8 : & 'static [ u8 ; 4usize ] = b"hhx\0" ; pub const SCNxLEAST16 : & 'static [ u8 ; 3usize ] = b"hx\0" ; pub const SCNxLEAST32 : & 'static [ u8 ; 2usize ] = b"x\0" ; pub const SCNxLEAST64 : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const SCNxFAST8 : & 'static [ u8 ; 4usize ] = b"hhx\0" ; pub const SCNxFAST16 : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const SCNxFAST32 : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const SCNxFAST64 : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const SCNdMAX : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const SCNiMAX : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const SCNoMAX : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const SCNuMAX : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const SCNxMAX : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const SCNdPTR : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const SCNiPTR : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const SCNoPTR : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const SCNuPTR : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const SCNxPTR : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const _UNISTD_H : :: std :: os :: raw :: c_uint = 1 ; pub const _POSIX_VERSION : :: std :: os :: raw :: c_uint = 200809 ; pub const __POSIX2_THIS_VERSION : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX2_VERSION : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX2_C_BIND : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX2_C_DEV : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX2_SW_DEV : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX2_LOCALEDEF : :: std :: os :: raw :: c_uint = 200809 ; pub const _XOPEN_VERSION : :: std :: os :: raw :: c_uint = 700 ; pub const _XOPEN_XCU_VERSION : :: std :: os :: raw :: c_uint = 4 ; pub const _XOPEN_XPG2 : :: std :: os :: raw :: c_uint = 1 ; pub const _XOPEN_XPG3 : :: std :: os :: raw :: c_uint = 1 ; pub const _XOPEN_XPG4 : :: std :: os :: raw :: c_uint = 1 ; pub const _XOPEN_UNIX : :: std :: os :: raw :: c_uint = 1 ; pub const _XOPEN_CRYPT : :: std :: os :: raw :: c_uint = 1 ; pub const _XOPEN_ENH_I18N : :: std :: os :: raw :: c_uint = 1 ; pub const _XOPEN_LEGACY : :: std :: os :: raw :: c_uint = 1 ; pub const _BITS_POSIX_OPT_H : :: std :: os :: raw :: c_uint = 1 ; pub const _POSIX_JOB_CONTROL : :: std :: os :: raw :: c_uint = 1 ; pub const _POSIX_SAVED_IDS : :: std :: os :: raw :: c_uint = 1 ; pub const _POSIX_PRIORITY_SCHEDULING : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_SYNCHRONIZED_IO : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_FSYNC : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_MAPPED_FILES : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_MEMLOCK : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_MEMLOCK_RANGE : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_MEMORY_PROTECTION : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_CHOWN_RESTRICTED : :: std :: os :: raw :: c_uint = 0 ; pub const _POSIX_VDISABLE : u8 = 0u8 ; pub const _POSIX_NO_TRUNC : :: std :: os :: raw :: c_uint = 1 ; pub const _XOPEN_REALTIME : :: std :: os :: raw :: c_uint = 1 ; pub const _XOPEN_REALTIME_THREADS : :: std :: os :: raw :: c_uint = 1 ; pub const _XOPEN_SHM : :: std :: os :: raw :: c_uint = 1 ; pub const _POSIX_THREADS : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_REENTRANT_FUNCTIONS : :: std :: os :: raw :: c_uint = 1 ; pub const _POSIX_THREAD_SAFE_FUNCTIONS : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_THREAD_PRIORITY_SCHEDULING : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_THREAD_ATTR_STACKSIZE : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_THREAD_ATTR_STACKADDR : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_THREAD_PRIO_INHERIT : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_THREAD_PRIO_PROTECT : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT : :: std :: os :: raw :: c_int = -1 ; pub const _POSIX_SEMAPHORES : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_REALTIME_SIGNALS : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_ASYNCHRONOUS_IO : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_ASYNC_IO : :: std :: os :: raw :: c_uint = 1 ; pub const _LFS_ASYNCHRONOUS_IO : :: std :: os :: raw :: c_uint = 1 ; pub const _POSIX_PRIORITIZED_IO : :: std :: os :: raw :: c_uint = 200809 ; pub const _LFS64_ASYNCHRONOUS_IO : :: std :: os :: raw :: c_uint = 1 ; pub const _LFS_LARGEFILE : :: std :: os :: raw :: c_uint = 1 ; pub const _LFS64_LARGEFILE : :: std :: os :: raw :: c_uint = 1 ; pub const _LFS64_STDIO : :: std :: os :: raw :: c_uint = 1 ; pub const _POSIX_SHARED_MEMORY_OBJECTS : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_CPUTIME : :: std :: os :: raw :: c_uint = 0 ; pub const _POSIX_THREAD_CPUTIME : :: std :: os :: raw :: c_uint = 0 ; pub const _POSIX_REGEXP : :: std :: os :: raw :: c_uint = 1 ; pub const _POSIX_READER_WRITER_LOCKS : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_SHELL : :: std :: os :: raw :: c_uint = 1 ; pub const _POSIX_TIMEOUTS : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_SPIN_LOCKS : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_SPAWN : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_TIMERS : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_BARRIERS : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_MESSAGE_PASSING : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_THREAD_PROCESS_SHARED : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_MONOTONIC_CLOCK : :: std :: os :: raw :: c_uint = 0 ; pub const _POSIX_CLOCK_SELECTION : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_ADVISORY_INFO : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_IPV6 : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_RAW_SOCKETS : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX2_CHAR_TERM : :: std :: os :: raw :: c_uint = 200809 ; pub const _POSIX_SPORADIC_SERVER : :: std :: os :: raw :: c_int = -1 ; pub const _POSIX_THREAD_SPORADIC_SERVER : :: std :: os :: raw :: c_int = -1 ; pub const _POSIX_TRACE : :: std :: os :: raw :: c_int = -1 ; pub const _POSIX_TRACE_EVENT_FILTER : :: std :: os :: raw :: c_int = -1 ; pub const _POSIX_TRACE_INHERIT : :: std :: os :: raw :: c_int = -1 ; pub const _POSIX_TRACE_LOG : :: std :: os :: raw :: c_int = -1 ; pub const _POSIX_TYPED_MEMORY_OBJECTS : :: std :: os :: raw :: c_int = -1 ; pub const _POSIX_V7_LPBIG_OFFBIG : :: std :: os :: raw :: c_int = -1 ; pub const _POSIX_V6_LPBIG_OFFBIG : :: std :: os :: raw :: c_int = -1 ; pub const _XBS5_LPBIG_OFFBIG : :: std :: os :: raw :: c_int = -1 ; pub const _POSIX_V7_LP64_OFF64 : :: std :: os :: raw :: c_uint = 1 ; pub const _POSIX_V6_LP64_OFF64 : :: std :: os :: raw :: c_uint = 1 ; pub const _XBS5_LP64_OFF64 : :: std :: os :: raw :: c_uint = 1 ; pub const __ILP32_OFF32_CFLAGS : & 'static [ u8 ; 5usize ] = b"-m32\0" ; pub const __ILP32_OFF32_LDFLAGS : & 'static [ u8 ; 5usize ] = b"-m32\0" ; pub const __ILP32_OFFBIG_CFLAGS : & 'static [ u8 ; 48usize ] = b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0" ; pub const __ILP32_OFFBIG_LDFLAGS : & 'static [ u8 ; 5usize ] = b"-m32\0" ; pub const __LP64_OFF64_CFLAGS : & 'static [ u8 ; 5usize ] = b"-m64\0" ; pub const __LP64_OFF64_LDFLAGS : & 'static [ u8 ; 5usize ] = b"-m64\0" ; pub const STDIN_FILENO : :: std :: os :: raw :: c_uint = 0 ; pub const STDOUT_FILENO : :: std :: os :: raw :: c_uint = 1 ; pub const STDERR_FILENO : :: std :: os :: raw :: c_uint = 2 ; pub const R_OK : :: std :: os :: raw :: c_uint = 4 ; pub const W_OK : :: std :: os :: raw :: c_uint = 2 ; pub const X_OK : :: std :: os :: raw :: c_uint = 1 ; pub const F_OK : :: std :: os :: raw :: c_uint = 0 ; pub const L_SET : :: std :: os :: raw :: c_uint = 0 ; pub const L_INCR : :: std :: os :: raw :: c_uint = 1 ; pub const L_XTND : :: std :: os :: raw :: c_uint = 2 ; pub const F_ULOCK : :: std :: os :: raw :: c_uint = 0 ; pub const F_LOCK : :: std :: os :: raw :: c_uint = 1 ; pub const F_TLOCK : :: std :: os :: raw :: c_uint = 2 ; pub const F_TEST : :: std :: os :: raw :: c_uint = 3 ; pub const _SYS_WAIT_H : :: std :: os :: raw :: c_uint = 1 ; pub const _SIGSET_H_fns : :: std :: os :: raw :: c_uint = 1 ; pub const SIGHUP : :: std :: os :: raw :: c_uint = 1 ; pub const SIGINT : :: std :: os :: raw :: c_uint = 2 ; pub const SIGQUIT : :: std :: os :: raw :: c_uint = 3 ; pub const SIGILL : :: std :: os :: raw :: c_uint = 4 ; pub const SIGTRAP : :: std :: os :: raw :: c_uint = 5 ; pub const SIGABRT : :: std :: os :: raw :: c_uint = 6 ; pub const SIGIOT : :: std :: os :: raw :: c_uint = 6 ; pub const SIGBUS : :: std :: os :: raw :: c_uint = 7 ; pub const SIGFPE : :: std :: os :: raw :: c_uint = 8 ; pub const SIGKILL : :: std :: os :: raw :: c_uint = 9 ; pub const SIGUSR1 : :: std :: os :: raw :: c_uint = 10 ; pub const SIGSEGV : :: std :: os :: raw :: c_uint = 11 ; pub const SIGUSR2 : :: std :: os :: raw :: c_uint = 12 ; pub const SIGPIPE : :: std :: os :: raw :: c_uint = 13 ; pub const SIGALRM : :: std :: os :: raw :: c_uint = 14 ; pub const SIGTERM : :: std :: os :: raw :: c_uint = 15 ; pub const SIGSTKFLT : :: std :: os :: raw :: c_uint = 16 ; pub const SIGCHLD : :: std :: os :: raw :: c_uint = 17 ; pub const SIGCONT : :: std :: os :: raw :: c_uint = 18 ; pub const SIGSTOP : :: std :: os :: raw :: c_uint = 19 ; pub const SIGTSTP : :: std :: os :: raw :: c_uint = 20 ; pub const SIGTTIN : :: std :: os :: raw :: c_uint = 21 ; pub const SIGTTOU : :: std :: os :: raw :: c_uint = 22 ; pub const SIGURG : :: std :: os :: raw :: c_uint = 23 ; pub const SIGXCPU : :: std :: os :: raw :: c_uint = 24 ; pub const SIGXFSZ : :: std :: os :: raw :: c_uint = 25 ; pub const SIGVTALRM : :: std :: os :: raw :: c_uint = 26 ; pub const SIGPROF : :: std :: os :: raw :: c_uint = 27 ; pub const SIGWINCH : :: std :: os :: raw :: c_uint = 28 ; pub const SIGIO : :: std :: os :: raw :: c_uint = 29 ; pub const SIGPWR : :: std :: os :: raw :: c_uint = 30 ; pub const SIGSYS : :: std :: os :: raw :: c_uint = 31 ; pub const SIGUNUSED : :: std :: os :: raw :: c_uint = 31 ; pub const _NSIG : :: std :: os :: raw :: c_uint = 65 ; pub const __SIGRTMIN : :: std :: os :: raw :: c_uint = 32 ; pub const __SIGRTMAX : :: std :: os :: raw :: c_uint = 64 ; pub const __have_sigval_t : :: std :: os :: raw :: c_uint = 1 ; pub const __have_siginfo_t : :: std :: os :: raw :: c_uint = 1 ; pub const __SI_MAX_SIZE : :: std :: os :: raw :: c_uint = 128 ; pub const __have_sigevent_t : :: std :: os :: raw :: c_uint = 1 ; pub const __SIGEV_MAX_SIZE : :: std :: os :: raw :: c_uint = 64 ; pub const NSIG : :: std :: os :: raw :: c_uint = 65 ; pub const SA_NOCLDSTOP : :: std :: os :: raw :: c_uint = 1 ; pub const SA_NOCLDWAIT : :: std :: os :: raw :: c_uint = 2 ; pub const SA_SIGINFO : :: std :: os :: raw :: c_uint = 4 ; pub const SA_ONSTACK : :: std :: os :: raw :: c_uint = 134217728 ; pub const SA_RESTART : :: std :: os :: raw :: c_uint = 268435456 ; pub const SA_NODEFER : :: std :: os :: raw :: c_uint = 1073741824 ; pub const SA_RESETHAND : :: std :: os :: raw :: c_uint = 2147483648 ; pub const SA_INTERRUPT : :: std :: os :: raw :: c_uint = 536870912 ; pub const SA_NOMASK : :: std :: os :: raw :: c_uint = 1073741824 ; pub const SA_ONESHOT : :: std :: os :: raw :: c_uint = 2147483648 ; pub const SA_STACK : :: std :: os :: raw :: c_uint = 134217728 ; pub const SIG_BLOCK : :: std :: os :: raw :: c_uint = 0 ; pub const SIG_UNBLOCK : :: std :: os :: raw :: c_uint = 1 ; pub const SIG_SETMASK : :: std :: os :: raw :: c_uint = 2 ; pub const SV_ONSTACK : :: std :: os :: raw :: c_uint = 1 ; pub const SV_INTERRUPT : :: std :: os :: raw :: c_uint = 2 ; pub const SV_RESETHAND : :: std :: os :: raw :: c_uint = 4 ; pub const _BITS_SIGCONTEXT_H : :: std :: os :: raw :: c_uint = 1 ; pub const FP_XSTATE_MAGIC1 : :: std :: os :: raw :: c_uint = 1179670611 ; pub const FP_XSTATE_MAGIC2 : :: std :: os :: raw :: c_uint = 1179670597 ; pub const MINSIGSTKSZ : :: std :: os :: raw :: c_uint = 2048 ; pub const SIGSTKSZ : :: std :: os :: raw :: c_uint = 8192 ; pub const _SYS_UCONTEXT_H : :: std :: os :: raw :: c_uint = 1 ; pub const NGREG : :: std :: os :: raw :: c_uint = 23 ; pub const _BITS_SIGTHREAD_H : :: std :: os :: raw :: c_uint = 1 ; pub const WCOREFLAG : :: std :: os :: raw :: c_uint = 128 ; pub const WAIT_ANY : :: std :: os :: raw :: c_int = -1 ; pub const WAIT_MYPGRP : :: std :: os :: raw :: c_uint = 0 ; pub const _FCNTL_H : :: std :: os :: raw :: c_uint = 1 ; pub const __O_LARGEFILE : :: std :: os :: raw :: c_uint = 0 ; pub const F_GETLK64 : :: std :: os :: raw :: c_uint = 5 ; pub const F_SETLK64 : :: std :: os :: raw :: c_uint = 6 ; pub const F_SETLKW64 : :: std :: os :: raw :: c_uint = 7 ; pub const O_ACCMODE : :: std :: os :: raw :: c_uint = 3 ; pub const O_RDONLY : :: std :: os :: raw :: c_uint = 0 ; pub const O_WRONLY : :: std :: os :: raw :: c_uint = 1 ; pub const O_RDWR : :: std :: os :: raw :: c_uint = 2 ; pub const O_CREAT : :: std :: os :: raw :: c_uint = 64 ; pub const O_EXCL : :: std :: os :: raw :: c_uint = 128 ; pub const O_NOCTTY : :: std :: os :: raw :: c_uint = 256 ; pub const O_TRUNC : :: std :: os :: raw :: c_uint = 512 ; pub const O_APPEND : :: std :: os :: raw :: c_uint = 1024 ; pub const O_NONBLOCK : :: std :: os :: raw :: c_uint = 2048 ; pub const O_NDELAY : :: std :: os :: raw :: c_uint = 2048 ; pub const O_SYNC : :: std :: os :: raw :: c_uint = 1052672 ; pub const O_FSYNC : :: std :: os :: raw :: c_uint = 1052672 ; pub const O_ASYNC : :: std :: os :: raw :: c_uint = 8192 ; pub const __O_DIRECTORY : :: std :: os :: raw :: c_uint = 65536 ; pub const __O_NOFOLLOW : :: std :: os :: raw :: c_uint = 131072 ; pub const __O_CLOEXEC : :: std :: os :: raw :: c_uint = 524288 ; pub const __O_DIRECT : :: std :: os :: raw :: c_uint = 16384 ; pub const __O_NOATIME : :: std :: os :: raw :: c_uint = 262144 ; pub const __O_PATH : :: std :: os :: raw :: c_uint = 2097152 ; pub const __O_DSYNC : :: std :: os :: raw :: c_uint = 4096 ; pub const __O_TMPFILE : :: std :: os :: raw :: c_uint = 4259840 ; pub const F_GETLK : :: std :: os :: raw :: c_uint = 5 ; pub const F_SETLK : :: std :: os :: raw :: c_uint = 6 ; pub const F_SETLKW : :: std :: os :: raw :: c_uint = 7 ; pub const O_DIRECTORY : :: std :: os :: raw :: c_uint = 65536 ; pub const O_NOFOLLOW : :: std :: os :: raw :: c_uint = 131072 ; pub const O_CLOEXEC : :: std :: os :: raw :: c_uint = 524288 ; pub const O_DSYNC : :: std :: os :: raw :: c_uint = 4096 ; pub const O_RSYNC : :: std :: os :: raw :: c_uint = 1052672 ; pub const F_DUPFD : :: std :: os :: raw :: c_uint = 0 ; pub const F_GETFD : :: std :: os :: raw :: c_uint = 1 ; pub const F_SETFD : :: std :: os :: raw :: c_uint = 2 ; pub const F_GETFL : :: std :: os :: raw :: c_uint = 3 ; pub const F_SETFL : :: std :: os :: raw :: c_uint = 4 ; pub const __F_SETOWN : :: std :: os :: raw :: c_uint = 8 ; pub const __F_GETOWN : :: std :: os :: raw :: c_uint = 9 ; pub const F_SETOWN : :: std :: os :: raw :: c_uint = 8 ; pub const F_GETOWN : :: std :: os :: raw :: c_uint = 9 ; pub const __F_SETSIG : :: std :: os :: raw :: c_uint = 10 ; pub const __F_GETSIG : :: std :: os :: raw :: c_uint = 11 ; pub const __F_SETOWN_EX : :: std :: os :: raw :: c_uint = 15 ; pub const __F_GETOWN_EX : :: std :: os :: raw :: c_uint = 16 ; pub const F_DUPFD_CLOEXEC : :: std :: os :: raw :: c_uint = 1030 ; pub const FD_CLOEXEC : :: std :: os :: raw :: c_uint = 1 ; pub const F_RDLCK : :: std :: os :: raw :: c_uint = 0 ; pub const F_WRLCK : :: std :: os :: raw :: c_uint = 1 ; pub const F_UNLCK : :: std :: os :: raw :: c_uint = 2 ; pub const F_EXLCK : :: std :: os :: raw :: c_uint = 4 ; pub const F_SHLCK : :: std :: os :: raw :: c_uint = 8 ; pub const LOCK_SH : :: std :: os :: raw :: c_uint = 1 ; pub const LOCK_EX : :: std :: os :: raw :: c_uint = 2 ; pub const LOCK_NB : :: std :: os :: raw :: c_uint = 4 ; pub const LOCK_UN : :: std :: os :: raw :: c_uint = 8 ; pub const FAPPEND : :: std :: os :: raw :: c_uint = 1024 ; pub const FFSYNC : :: std :: os :: raw :: c_uint = 1052672 ; pub const FASYNC : :: std :: os :: raw :: c_uint = 8192 ; pub const FNONBLOCK : :: std :: os :: raw :: c_uint = 2048 ; pub const FNDELAY : :: std :: os :: raw :: c_uint = 2048 ; pub const __POSIX_FADV_DONTNEED : :: std :: os :: raw :: c_uint = 4 ; pub const __POSIX_FADV_NOREUSE : :: std :: os :: raw :: c_uint = 5 ; pub const POSIX_FADV_NORMAL : :: std :: os :: raw :: c_uint = 0 ; pub const POSIX_FADV_RANDOM : :: std :: os :: raw :: c_uint = 1 ; pub const POSIX_FADV_SEQUENTIAL : :: std :: os :: raw :: c_uint = 2 ; pub const POSIX_FADV_WILLNEED : :: std :: os :: raw :: c_uint = 3 ; pub const POSIX_FADV_DONTNEED : :: std :: os :: raw :: c_uint = 4 ; pub const POSIX_FADV_NOREUSE : :: std :: os :: raw :: c_uint = 5 ; pub const AT_FDCWD : :: std :: os :: raw :: c_int = -100 ; pub const AT_SYMLINK_NOFOLLOW : :: std :: os :: raw :: c_uint = 256 ; pub const AT_REMOVEDIR : :: std :: os :: raw :: c_uint = 512 ; pub const AT_SYMLINK_FOLLOW : :: std :: os :: raw :: c_uint = 1024 ; pub const AT_EACCESS : :: std :: os :: raw :: c_uint = 512 ; pub const _ERRNO_H : :: std :: os :: raw :: c_uint = 1 ; pub const EPERM : :: std :: os :: raw :: c_uint = 1 ; pub const ENOENT : :: std :: os :: raw :: c_uint = 2 ; pub const ESRCH : :: std :: os :: raw :: c_uint = 3 ; pub const EINTR : :: std :: os :: raw :: c_uint = 4 ; pub const EIO : :: std :: os :: raw :: c_uint = 5 ; pub const ENXIO : :: std :: os :: raw :: c_uint = 6 ; pub const E2BIG : :: std :: os :: raw :: c_uint = 7 ; pub const ENOEXEC : :: std :: os :: raw :: c_uint = 8 ; pub const EBADF : :: std :: os :: raw :: c_uint = 9 ; pub const ECHILD : :: std :: os :: raw :: c_uint = 10 ; pub const EAGAIN : :: std :: os :: raw :: c_uint = 11 ; pub const ENOMEM : :: std :: os :: raw :: c_uint = 12 ; pub const EACCES : :: std :: os :: raw :: c_uint = 13 ; pub const EFAULT : :: std :: os :: raw :: c_uint = 14 ; pub const ENOTBLK : :: std :: os :: raw :: c_uint = 15 ; pub const EBUSY : :: std :: os :: raw :: c_uint = 16 ; pub const EEXIST : :: std :: os :: raw :: c_uint = 17 ; pub const EXDEV : :: std :: os :: raw :: c_uint = 18 ; pub const ENODEV : :: std :: os :: raw :: c_uint = 19 ; pub const ENOTDIR : :: std :: os :: raw :: c_uint = 20 ; pub const EISDIR : :: std :: os :: raw :: c_uint = 21 ; pub const EINVAL : :: std :: os :: raw :: c_uint = 22 ; pub const ENFILE : :: std :: os :: raw :: c_uint = 23 ; pub const EMFILE : :: std :: os :: raw :: c_uint = 24 ; pub const ENOTTY : :: std :: os :: raw :: c_uint = 25 ; pub const ETXTBSY : :: std :: os :: raw :: c_uint = 26 ; pub const EFBIG : :: std :: os :: raw :: c_uint = 27 ; pub const ENOSPC : :: std :: os :: raw :: c_uint = 28 ; pub const ESPIPE : :: std :: os :: raw :: c_uint = 29 ; pub const EROFS : :: std :: os :: raw :: c_uint = 30 ; pub const EMLINK : :: std :: os :: raw :: c_uint = 31 ; pub const EPIPE : :: std :: os :: raw :: c_uint = 32 ; pub const EDOM : :: std :: os :: raw :: c_uint = 33 ; pub const ERANGE : :: std :: os :: raw :: c_uint = 34 ; pub const EDEADLK : :: std :: os :: raw :: c_uint = 35 ; pub const ENAMETOOLONG : :: std :: os :: raw :: c_uint = 36 ; pub const ENOLCK : :: std :: os :: raw :: c_uint = 37 ; pub const ENOSYS : :: std :: os :: raw :: c_uint = 38 ; pub const ENOTEMPTY : :: std :: os :: raw :: c_uint = 39 ; pub const ELOOP : :: std :: os :: raw :: c_uint = 40 ; pub const EWOULDBLOCK : :: std :: os :: raw :: c_uint = 11 ; pub const ENOMSG : :: std :: os :: raw :: c_uint = 42 ; pub const EIDRM : :: std :: os :: raw :: c_uint = 43 ; pub const ECHRNG : :: std :: os :: raw :: c_uint = 44 ; pub const EL2NSYNC : :: std :: os :: raw :: c_uint = 45 ; pub const EL3HLT : :: std :: os :: raw :: c_uint = 46 ; pub const EL3RST : :: std :: os :: raw :: c_uint = 47 ; pub const ELNRNG : :: std :: os :: raw :: c_uint = 48 ; pub const EUNATCH : :: std :: os :: raw :: c_uint = 49 ; pub const ENOCSI : :: std :: os :: raw :: c_uint = 50 ; pub const EL2HLT : :: std :: os :: raw :: c_uint = 51 ; pub const EBADE : :: std :: os :: raw :: c_uint = 52 ; pub const EBADR : :: std :: os :: raw :: c_uint = 53 ; pub const EXFULL : :: std :: os :: raw :: c_uint = 54 ; pub const ENOANO : :: std :: os :: raw :: c_uint = 55 ; pub const EBADRQC : :: std :: os :: raw :: c_uint = 56 ; pub const EBADSLT : :: std :: os :: raw :: c_uint = 57 ; pub const EDEADLOCK : :: std :: os :: raw :: c_uint = 35 ; pub const EBFONT : :: std :: os :: raw :: c_uint = 59 ; pub const ENOSTR : :: std :: os :: raw :: c_uint = 60 ; pub const ENODATA : :: std :: os :: raw :: c_uint = 61 ; pub const ETIME : :: std :: os :: raw :: c_uint = 62 ; pub const ENOSR : :: std :: os :: raw :: c_uint = 63 ; pub const ENONET : :: std :: os :: raw :: c_uint = 64 ; pub const ENOPKG : :: std :: os :: raw :: c_uint = 65 ; pub const EREMOTE : :: std :: os :: raw :: c_uint = 66 ; pub const ENOLINK : :: std :: os :: raw :: c_uint = 67 ; pub const EADV : :: std :: os :: raw :: c_uint = 68 ; pub const ESRMNT : :: std :: os :: raw :: c_uint = 69 ; pub const ECOMM : :: std :: os :: raw :: c_uint = 70 ; pub const EPROTO : :: std :: os :: raw :: c_uint = 71 ; pub const EMULTIHOP : :: std :: os :: raw :: c_uint = 72 ; pub const EDOTDOT : :: std :: os :: raw :: c_uint = 73 ; pub const EBADMSG : :: std :: os :: raw :: c_uint = 74 ; pub const EOVERFLOW : :: std :: os :: raw :: c_uint = 75 ; pub const ENOTUNIQ : :: std :: os :: raw :: c_uint = 76 ; pub const EBADFD : :: std :: os :: raw :: c_uint = 77 ; pub const EREMCHG : :: std :: os :: raw :: c_uint = 78 ; pub const ELIBACC : :: std :: os :: raw :: c_uint = 79 ; pub const ELIBBAD : :: std :: os :: raw :: c_uint = 80 ; pub const ELIBSCN : :: std :: os :: raw :: c_uint = 81 ; pub const ELIBMAX : :: std :: os :: raw :: c_uint = 82 ; pub const ELIBEXEC : :: std :: os :: raw :: c_uint = 83 ; pub const EILSEQ : :: std :: os :: raw :: c_uint = 84 ; pub const ERESTART : :: std :: os :: raw :: c_uint = 85 ; pub const ESTRPIPE : :: std :: os :: raw :: c_uint = 86 ; pub const EUSERS : :: std :: os :: raw :: c_uint = 87 ; pub const ENOTSOCK : :: std :: os :: raw :: c_uint = 88 ; pub const EDESTADDRREQ : :: std :: os :: raw :: c_uint = 89 ; pub const EMSGSIZE : :: std :: os :: raw :: c_uint = 90 ; pub const EPROTOTYPE : :: std :: os :: raw :: c_uint = 91 ; pub const ENOPROTOOPT : :: std :: os :: raw :: c_uint = 92 ; pub const EPROTONOSUPPORT : :: std :: os :: raw :: c_uint = 93 ; pub const ESOCKTNOSUPPORT : :: std :: os :: raw :: c_uint = 94 ; pub const EOPNOTSUPP : :: std :: os :: raw :: c_uint = 95 ; pub const EPFNOSUPPORT : :: std :: os :: raw :: c_uint = 96 ; pub const EAFNOSUPPORT : :: std :: os :: raw :: c_uint = 97 ; pub const EADDRINUSE : :: std :: os :: raw :: c_uint = 98 ; pub const EADDRNOTAVAIL : :: std :: os :: raw :: c_uint = 99 ; pub const ENETDOWN : :: std :: os :: raw :: c_uint = 100 ; pub const ENETUNREACH : :: std :: os :: raw :: c_uint = 101 ; pub const ENETRESET : :: std :: os :: raw :: c_uint = 102 ; pub const ECONNABORTED : :: std :: os :: raw :: c_uint = 103 ; pub const ECONNRESET : :: std :: os :: raw :: c_uint = 104 ; pub const ENOBUFS : :: std :: os :: raw :: c_uint = 105 ; pub const EISCONN : :: std :: os :: raw :: c_uint = 106 ; pub const ENOTCONN : :: std :: os :: raw :: c_uint = 107 ; pub const ESHUTDOWN : :: std :: os :: raw :: c_uint = 108 ; pub const ETOOMANYREFS : :: std :: os :: raw :: c_uint = 109 ; pub const ETIMEDOUT : :: std :: os :: raw :: c_uint = 110 ; pub const ECONNREFUSED : :: std :: os :: raw :: c_uint = 111 ; pub const EHOSTDOWN : :: std :: os :: raw :: c_uint = 112 ; pub const EHOSTUNREACH : :: std :: os :: raw :: c_uint = 113 ; pub const EALREADY : :: std :: os :: raw :: c_uint = 114 ; pub const EINPROGRESS : :: std :: os :: raw :: c_uint = 115 ; pub const ESTALE : :: std :: os :: raw :: c_uint = 116 ; pub const EUCLEAN : :: std :: os :: raw :: c_uint = 117 ; pub const ENOTNAM : :: std :: os :: raw :: c_uint = 118 ; pub const ENAVAIL : :: std :: os :: raw :: c_uint = 119 ; pub const EISNAM : :: std :: os :: raw :: c_uint = 120 ; pub const EREMOTEIO : :: std :: os :: raw :: c_uint = 121 ; pub const EDQUOT : :: std :: os :: raw :: c_uint = 122 ; pub const ENOMEDIUM : :: std :: os :: raw :: c_uint = 123 ; pub const EMEDIUMTYPE : :: std :: os :: raw :: c_uint = 124 ; pub const ECANCELED : :: std :: os :: raw :: c_uint = 125 ; pub const ENOKEY : :: std :: os :: raw :: c_uint = 126 ; pub const EKEYEXPIRED : :: std :: os :: raw :: c_uint = 127 ; pub const EKEYREVOKED : :: std :: os :: raw :: c_uint = 128 ; pub const EKEYREJECTED : :: std :: os :: raw :: c_uint = 129 ; pub const EOWNERDEAD : :: std :: os :: raw :: c_uint = 130 ; pub const ENOTRECOVERABLE : :: std :: os :: raw :: c_uint = 131 ; pub const ERFKILL : :: std :: os :: raw :: c_uint = 132 ; pub const EHWPOISON : :: std :: os :: raw :: c_uint = 133 ; pub const ENOTSUP : :: std :: os :: raw :: c_uint = 95 ; pub const _LIBC_LIMITS_H_ : :: std :: os :: raw :: c_uint = 1 ; pub const MB_LEN_MAX : :: std :: os :: raw :: c_uint = 16 ; pub const _BITS_POSIX1_LIM_H : :: std :: os :: raw :: c_uint = 1 ; pub const _POSIX_AIO_LISTIO_MAX : :: std :: os :: raw :: c_uint = 2 ; pub const _POSIX_AIO_MAX : :: std :: os :: raw :: c_uint = 1 ; pub const _POSIX_ARG_MAX : :: std :: os :: raw :: c_uint = 4096 ; pub const _POSIX_CHILD_MAX : :: std :: os :: raw :: c_uint = 25 ; pub const _POSIX_DELAYTIMER_MAX : :: std :: os :: raw :: c_uint = 32 ; pub const _POSIX_HOST_NAME_MAX : :: std :: os :: raw :: c_uint = 255 ; pub const _POSIX_LINK_MAX : :: std :: os :: raw :: c_uint = 8 ; pub const _POSIX_LOGIN_NAME_MAX : :: std :: os :: raw :: c_uint = 9 ; pub const _POSIX_MAX_CANON : :: std :: os :: raw :: c_uint = 255 ; pub const _POSIX_MAX_INPUT : :: std :: os :: raw :: c_uint = 255 ; pub const _POSIX_MQ_OPEN_MAX : :: std :: os :: raw :: c_uint = 8 ; pub const _POSIX_MQ_PRIO_MAX : :: std :: os :: raw :: c_uint = 32 ; pub const _POSIX_NAME_MAX : :: std :: os :: raw :: c_uint = 14 ; pub const _POSIX_NGROUPS_MAX : :: std :: os :: raw :: c_uint = 8 ; pub const _POSIX_OPEN_MAX : :: std :: os :: raw :: c_uint = 20 ; pub const _POSIX_PATH_MAX : :: std :: os :: raw :: c_uint = 256 ; pub const _POSIX_PIPE_BUF : :: std :: os :: raw :: c_uint = 512 ; pub const _POSIX_RE_DUP_MAX : :: std :: os :: raw :: c_uint = 255 ; pub const _POSIX_RTSIG_MAX : :: std :: os :: raw :: c_uint = 8 ; pub const _POSIX_SEM_NSEMS_MAX : :: std :: os :: raw :: c_uint = 256 ; pub const _POSIX_SEM_VALUE_MAX : :: std :: os :: raw :: c_uint = 32767 ; pub const _POSIX_SIGQUEUE_MAX : :: std :: os :: raw :: c_uint = 32 ; pub const _POSIX_SSIZE_MAX : :: std :: os :: raw :: c_uint = 32767 ; pub const _POSIX_STREAM_MAX : :: std :: os :: raw :: c_uint = 8 ; pub const _POSIX_SYMLINK_MAX : :: std :: os :: raw :: c_uint = 255 ; pub const _POSIX_SYMLOOP_MAX : :: std :: os :: raw :: c_uint = 8 ; pub const _POSIX_TIMER_MAX : :: std :: os :: raw :: c_uint = 32 ; pub const _POSIX_TTY_NAME_MAX : :: std :: os :: raw :: c_uint = 9 ; pub const _POSIX_TZNAME_MAX : :: std :: os :: raw :: c_uint = 6 ; pub const _POSIX_CLOCKRES_MIN : :: std :: os :: raw :: c_uint = 20000000 ; pub const NR_OPEN : :: std :: os :: raw :: c_uint = 1024 ; pub const NGROUPS_MAX : :: std :: os :: raw :: c_uint = 65536 ; pub const ARG_MAX : :: std :: os :: raw :: c_uint = 131072 ; pub const LINK_MAX : :: std :: os :: raw :: c_uint = 127 ; pub const MAX_CANON : :: std :: os :: raw :: c_uint = 255 ; pub const MAX_INPUT : :: std :: os :: raw :: c_uint = 255 ; pub const NAME_MAX : :: std :: os :: raw :: c_uint = 255 ; pub const PATH_MAX : :: std :: os :: raw :: c_uint = 4096 ; pub const PIPE_BUF : :: std :: os :: raw :: c_uint = 4096 ; pub const XATTR_NAME_MAX : :: std :: os :: raw :: c_uint = 255 ; pub const XATTR_SIZE_MAX : :: std :: os :: raw :: c_uint = 65536 ; pub const XATTR_LIST_MAX : :: std :: os :: raw :: c_uint = 65536 ; pub const RTSIG_MAX : :: std :: os :: raw :: c_uint = 32 ; pub const _POSIX_THREAD_KEYS_MAX : :: std :: os :: raw :: c_uint = 128 ; pub const PTHREAD_KEYS_MAX : :: std :: os :: raw :: c_uint = 1024 ; pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS : :: std :: os :: raw :: c_uint = 4 ; pub const PTHREAD_DESTRUCTOR_ITERATIONS : :: std :: os :: raw :: c_uint = 4 ; pub const _POSIX_THREAD_THREADS_MAX : :: std :: os :: raw :: c_uint = 64 ; pub const AIO_PRIO_DELTA_MAX : :: std :: os :: raw :: c_uint = 20 ; pub const PTHREAD_STACK_MIN : :: std :: os :: raw :: c_uint = 16384 ; pub const DELAYTIMER_MAX : :: std :: os :: raw :: c_uint = 2147483647 ; pub const TTY_NAME_MAX : :: std :: os :: raw :: c_uint = 32 ; pub const LOGIN_NAME_MAX : :: std :: os :: raw :: c_uint = 256 ; pub const HOST_NAME_MAX : :: std :: os :: raw :: c_uint = 64 ; pub const MQ_PRIO_MAX : :: std :: os :: raw :: c_uint = 32768 ; pub const SEM_VALUE_MAX : :: std :: os :: raw :: c_uint = 2147483647 ; pub const _BITS_POSIX2_LIM_H : :: std :: os :: raw :: c_uint = 1 ; pub const _POSIX2_BC_BASE_MAX : :: std :: os :: raw :: c_uint = 99 ; pub const _POSIX2_BC_DIM_MAX : :: std :: os :: raw :: c_uint = 2048 ; pub const _POSIX2_BC_SCALE_MAX : :: std :: os :: raw :: c_uint = 99 ; pub const _POSIX2_BC_STRING_MAX : :: std :: os :: raw :: c_uint = 1000 ; pub const _POSIX2_COLL_WEIGHTS_MAX : :: std :: os :: raw :: c_uint = 2 ; pub const _POSIX2_EXPR_NEST_MAX : :: std :: os :: raw :: c_uint = 32 ; pub const _POSIX2_LINE_MAX : :: std :: os :: raw :: c_uint = 2048 ; pub const _POSIX2_RE_DUP_MAX : :: std :: os :: raw :: c_uint = 255 ; pub const _POSIX2_CHARCLASS_NAME_MAX : :: std :: os :: raw :: c_uint = 14 ; pub const BC_BASE_MAX : :: std :: os :: raw :: c_uint = 99 ; pub const BC_DIM_MAX : :: std :: os :: raw :: c_uint = 2048 ; pub const BC_SCALE_MAX : :: std :: os :: raw :: c_uint = 99 ; pub const BC_STRING_MAX : :: std :: os :: raw :: c_uint = 1000 ; pub const COLL_WEIGHTS_MAX : :: std :: os :: raw :: c_uint = 255 ; pub const EXPR_NEST_MAX : :: std :: os :: raw :: c_uint = 32 ; pub const LINE_MAX : :: std :: os :: raw :: c_uint = 2048 ; pub const CHARCLASS_NAME_MAX : :: std :: os :: raw :: c_uint = 2048 ; pub const RE_DUP_MAX : :: std :: os :: raw :: c_uint = 32767 ; pub const _SYS_TIME_H : :: std :: os :: raw :: c_uint = 1 ; pub const _TIME_H : :: std :: os :: raw :: c_uint = 1 ; pub const _BITS_TIME_H : :: std :: os :: raw :: c_uint = 1 ; pub const CLOCKS_PER_SEC : :: std :: os :: raw :: c_uint = 1000000 ; pub const CLOCK_REALTIME : :: std :: os :: raw :: c_uint = 0 ; pub const CLOCK_MONOTONIC : :: std :: os :: raw :: c_uint = 1 ; pub const CLOCK_PROCESS_CPUTIME_ID : :: std :: os :: raw :: c_uint = 2 ; pub const CLOCK_THREAD_CPUTIME_ID : :: std :: os :: raw :: c_uint = 3 ; pub const CLOCK_MONOTONIC_RAW : :: std :: os :: raw :: c_uint = 4 ; pub const CLOCK_REALTIME_COARSE : :: std :: os :: raw :: c_uint = 5 ; pub const CLOCK_MONOTONIC_COARSE : :: std :: os :: raw :: c_uint = 6 ; pub const CLOCK_BOOTTIME : :: std :: os :: raw :: c_uint = 7 ; pub const CLOCK_REALTIME_ALARM : :: std :: os :: raw :: c_uint = 8 ; pub const CLOCK_BOOTTIME_ALARM : :: std :: os :: raw :: c_uint = 9 ; pub const TIMER_ABSTIME : :: std :: os :: raw :: c_uint = 1 ; pub const TIME_UTC : :: std :: os :: raw :: c_uint = 1 ; pub const _ASSERT_H : :: std :: os :: raw :: c_uint = 1 ; pub const _MATH_H : :: std :: os :: raw :: c_uint = 1 ; pub const _MATH_H_MATHDEF : :: std :: os :: raw :: c_uint = 1 ; pub const FP_ILOGB0 : :: std :: os :: raw :: c_int = -2147483648 ; pub const FP_ILOGBNAN : :: std :: os :: raw :: c_int = -2147483648 ; pub const __MATH_DECLARE_LDOUBLE : :: std :: os :: raw :: c_uint = 1 ; pub const MATH_ERRNO : :: std :: os :: raw :: c_uint = 1 ; pub const MATH_ERREXCEPT : :: std :: os :: raw :: c_uint = 2 ; pub const math_errhandling : :: std :: os :: raw :: c_uint = 3 ; pub const DOMAIN : :: std :: os :: raw :: c_uint = 1 ; pub const SING : :: std :: os :: raw :: c_uint = 2 ; pub const OVERFLOW : :: std :: os :: raw :: c_uint = 3 ; pub const UNDERFLOW : :: std :: os :: raw :: c_uint = 4 ; pub const TLOSS : :: std :: os :: raw :: c_uint = 5 ; pub const PLOSS : :: std :: os :: raw :: c_uint = 6 ; pub const M_E : f64 = 2.718281828459045 ; pub const M_LOG2E : f64 = 1.4426950408889634 ; pub const M_LOG10E : f64 = 0.4342944819032518 ; pub const M_LN2 : f64 = 0.6931471805599453 ; pub const M_LN10 : f64 = 2.302585092994046 ; pub const M_PI : f64 = 3.141592653589793 ; pub const M_PI_2 : f64 = 1.5707963267948966 ; pub const M_PI_4 : f64 = 0.7853981633974483 ; pub const M_1_PI : f64 = 0.3183098861837907 ; pub const M_2_PI : f64 = 0.6366197723675814 ; pub const M_2_SQRTPI : f64 = 1.1283791670955126 ; pub const M_SQRT2 : f64 = 1.4142135623730951 ; pub const M_SQRT1_2 : f64 = 0.7071067811865476 ; pub const _DIRENT_H : :: std :: os :: raw :: c_uint = 1 ; pub const _DIRENT_MATCHES_DIRENT64 : :: std :: os :: raw :: c_uint = 1 ; pub const MAXNAMLEN : :: std :: os :: raw :: c_uint = 255 ; pub const _CTYPE_H : :: std :: os :: raw :: c_uint = 1 ; pub const _SYS_PARAM_H : :: std :: os :: raw :: c_uint = 1 ; pub const HZ : :: std :: os :: raw :: c_uint = 100 ; pub const EXEC_PAGESIZE : :: std :: os :: raw :: c_uint = 4096 ; pub const NOGROUP : :: std :: os :: raw :: c_int = -1 ; pub const MAXHOSTNAMELEN : :: std :: os :: raw :: c_uint = 64 ; pub const MAXSYMLINKS : :: std :: os :: raw :: c_uint = 20 ; pub const NOFILE : :: std :: os :: raw :: c_uint = 256 ; pub const NCARGS : :: std :: os :: raw :: c_uint = 131072 ; pub const NGROUPS : :: std :: os :: raw :: c_uint = 65536 ; pub const CANBSIZ : :: std :: os :: raw :: c_uint = 255 ; pub const MAXPATHLEN : :: std :: os :: raw :: c_uint = 4096 ; pub const DEV_BSIZE : :: std :: os :: raw :: c_uint = 512 ; pub const PREFIX : & 'static [ u8 ; 14usize ] = b"/opt/collectd\0" ; pub const SYSCONFDIR : & 'static [ u8 ; 18usize ] = b"/opt/collectd/etc\0" ; pub const CONFIGFILE : & 'static [ u8 ; 32usize ] = b"/opt/collectd/etc/collectd.conf\0" ; pub const LOCALSTATEDIR : & 'static [ u8 ; 18usize ] = b"/opt/collectd/var\0" ; pub const PKGLOCALSTATEDIR : & 'static [ u8 ; 31usize ] = b"/opt/collectd/var/lib/collectd\0" ; pub const PIDFILE : & 'static [ u8 ; 35usize ] = b"/opt/collectd/var/run/collectd.pid\0" ; pub const PLUGINDIR : & 'static [ u8 ; 27usize ] = b"/opt/collectd/lib/collectd\0" ; pub const PKGDATADIR : & 'static [ u8 ; 29usize ] = b"/opt/collectd/share/collectd\0" ; pub const COLLECTD_GRP_NAME : & 'static [ u8 ; 9usize ] = b"collectd\0" ; pub const COLLECTD_DEFAULT_INTERVAL : f64 = 10. ; pub const UTILS_TIME_H : :: std :: os :: raw :: c_uint = 1 ; pub const OCONFIG_H : :: std :: os :: raw :: c_uint = 1 ; pub const OCONFIG_TYPE_STRING : :: std :: os :: raw :: c_uint = 0 ; pub const OCONFIG_TYPE_NUMBER : :: std :: os :: raw :: c_uint = 1 ; pub const OCONFIG_TYPE_BOOLEAN : :: std :: os :: raw :: c_uint = 2 ; pub const MD_TYPE_STRING : :: std :: os :: raw :: c_uint = 1 ; pub const MD_TYPE_SIGNED_INT : :: std :: os :: raw :: c_uint = 2 ; pub const MD_TYPE_UNSIGNED_INT : :: std :: os :: raw :: c_uint = 3 ; pub const MD_TYPE_DOUBLE : :: std :: os :: raw :: c_uint = 4 ; pub const MD_TYPE_BOOLEAN : :: std :: os :: raw :: c_uint = 5 ; pub const PLUGIN_FLAGS_GLOBAL : :: std :: os :: raw :: c_uint = 1 ; pub const DATA_MAX_NAME_LEN : :: std :: os :: raw :: c_uint = 64 ; pub const DS_TYPE_COUNTER : :: std :: os :: raw :: c_uint = 0 ; pub const DS_TYPE_GAUGE : :: std :: os :: raw :: c_uint = 1 ; pub const DS_TYPE_DERIVE : :: std :: os :: raw :: c_uint = 2 ; pub const DS_TYPE_ABSOLUTE : :: std :: os :: raw :: c_uint = 3 ; pub const LOG_ERR : :: std :: os :: raw :: c_uint = 3 ; pub const LOG_WARNING : :: std :: os :: raw :: c_uint = 4 ; pub const LOG_NOTICE : :: std :: os :: raw :: c_uint = 5 ; pub const LOG_INFO : :: std :: os :: raw :: c_uint = 6 ; pub const LOG_DEBUG : :: std :: os :: raw :: c_uint = 7 ; pub const NOTIF_MAX_MSG_LEN : :: std :: os :: raw :: c_uint = 256 ; pub const NOTIF_FAILURE : :: std :: os :: raw :: c_uint = 1 ; pub const NOTIF_WARNING : :: std :: os :: raw :: c_uint = 2 ; pub const NOTIF_OKAY : :: std :: os :: raw :: c_uint = 4 ; extern "C" {
 pub fn dlopen ( __file : * const :: std :: os :: raw :: c_char , __mode : :: std :: os :: raw :: c_int , ) -> * mut :: std :: os :: raw :: c_void ; 
} extern "C" {
 pub fn dlclose ( __handle : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn dlsym ( __handle : * mut :: std :: os :: raw :: c_void , __name : * const :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_void ; 
} extern "C" {
 pub fn dlerror ( ) -> * mut :: std :: os :: raw :: c_char ; 
} pub type wchar_t = :: std :: os :: raw :: c_int ; pub const idtype_t_P_ALL : idtype_t = 0 ; pub const idtype_t_P_PID : idtype_t = 1 ; pub const idtype_t_P_PGID : idtype_t = 2 ; pub type idtype_t = :: std :: os :: raw :: c_uint ; pub type __u_char = :: std :: os :: raw :: c_uchar ; pub type __u_short = :: std :: os :: raw :: c_ushort ; pub type __u_int = :: std :: os :: raw :: c_uint ; pub type __u_long = :: std :: os :: raw :: c_ulong ; pub type __int8_t = :: std :: os :: raw :: c_schar ; pub type __uint8_t = :: std :: os :: raw :: c_uchar ; pub type __int16_t = :: std :: os :: raw :: c_short ; pub type __uint16_t = :: std :: os :: raw :: c_ushort ; pub type __int32_t = :: std :: os :: raw :: c_int ; pub type __uint32_t = :: std :: os :: raw :: c_uint ; pub type __int64_t = :: std :: os :: raw :: c_long ; pub type __uint64_t = :: std :: os :: raw :: c_ulong ; pub type __quad_t = :: std :: os :: raw :: c_long ; pub type __u_quad_t = :: std :: os :: raw :: c_ulong ; pub type __dev_t = :: std :: os :: raw :: c_ulong ; pub type __uid_t = :: std :: os :: raw :: c_uint ; pub type __gid_t = :: std :: os :: raw :: c_uint ; pub type __ino_t = :: std :: os :: raw :: c_ulong ; pub type __ino64_t = :: std :: os :: raw :: c_ulong ; pub type __mode_t = :: std :: os :: raw :: c_uint ; pub type __nlink_t = :: std :: os :: raw :: c_ulong ; pub type __off_t = :: std :: os :: raw :: c_long ; pub type __off64_t = :: std :: os :: raw :: c_long ; pub type __pid_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __fsid_t { pub __val : [ :: std :: os :: raw :: c_int ; 2usize ] , } # [ test ] fn bindgen_test_layout___fsid_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __fsid_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __fsid_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __fsid_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __fsid_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __fsid_t ) ) . __val as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __fsid_t ) , "::" , stringify ! ( __val ) ) ) ; } pub type __clock_t = :: std :: os :: raw :: c_long ; pub type __rlim_t = :: std :: os :: raw :: c_ulong ; pub type __rlim64_t = :: std :: os :: raw :: c_ulong ; pub type __id_t = :: std :: os :: raw :: c_uint ; pub type __time_t = :: std :: os :: raw :: c_long ; pub type __useconds_t = :: std :: os :: raw :: c_uint ; pub type __suseconds_t = :: std :: os :: raw :: c_long ; pub type __daddr_t = :: std :: os :: raw :: c_int ; pub type __key_t = :: std :: os :: raw :: c_int ; pub type __clockid_t = :: std :: os :: raw :: c_int ; pub type __timer_t = * mut :: std :: os :: raw :: c_void ; pub type __blksize_t = :: std :: os :: raw :: c_long ; pub type __blkcnt_t = :: std :: os :: raw :: c_long ; pub type __blkcnt64_t = :: std :: os :: raw :: c_long ; pub type __fsblkcnt_t = :: std :: os :: raw :: c_ulong ; pub type __fsblkcnt64_t = :: std :: os :: raw :: c_ulong ; pub type __fsfilcnt_t = :: std :: os :: raw :: c_ulong ; pub type __fsfilcnt64_t = :: std :: os :: raw :: c_ulong ; pub type __fsword_t = :: std :: os :: raw :: c_long ; pub type __ssize_t = :: std :: os :: raw :: c_long ; pub type __syscall_slong_t = :: std :: os :: raw :: c_long ; pub type __syscall_ulong_t = :: std :: os :: raw :: c_ulong ; pub type __loff_t = __off64_t ; pub type __qaddr_t = * mut __quad_t ; pub type __caddr_t = * mut :: std :: os :: raw :: c_char ; pub type __intptr_t = :: std :: os :: raw :: c_long ; pub type __socklen_t = :: std :: os :: raw :: c_uint ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union wait { pub w_status : :: std :: os :: raw :: c_int , pub __wait_terminated : wait__bindgen_ty_1 , pub __wait_stopped : wait__bindgen_ty_2 , _bindgen_union_align : u32 , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct wait__bindgen_ty_1 { pub _bitfield_1 : [ u16 ; 2usize ] , pub __bindgen_align : [ u32 ; 0usize ] , } # [ test ] fn bindgen_test_layout_wait__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < wait__bindgen_ty_1 > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( wait__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < wait__bindgen_ty_1 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( wait__bindgen_ty_1 ) ) ) ; } impl wait__bindgen_ty_1 { # [ inline ] pub fn __w_termsig ( & self ) -> :: std :: os :: raw :: c_uint { let mut unit_field_val : u32 = unsafe { :: std :: mem :: uninitialized ( ) } ; unsafe { :: std :: ptr :: copy_nonoverlapping ( & self . _bitfield_1 as * const _ as * const u8 , & mut unit_field_val as * mut u32 as * mut u8 , :: std :: mem :: size_of :: < u32 > ( ) , ) } ; let mask = 0x7f as u32 ; let val = ( unit_field_val & mask ) >> 0usize ; unsafe { :: std :: mem :: transmute ( val as u32 ) } } # [ inline ] pub fn set___w_termsig ( & mut self , val : :: std :: os :: raw :: c_uint ) { let mask = 0x7f as u32 ; let val = val as u32 as u32 ; let mut unit_field_val : u32 = unsafe { :: std :: mem :: uninitialized ( ) } ; unsafe { :: std :: ptr :: copy_nonoverlapping ( & self . _bitfield_1 as * const _ as * const u8 , & mut unit_field_val as * mut u32 as * mut u8 , :: std :: mem :: size_of :: < u32 > ( ) , ) } ; unit_field_val &= ! mask ; unit_field_val |= ( val << 0usize ) & mask ; unsafe { :: std :: ptr :: copy_nonoverlapping ( & unit_field_val as * const _ as * const u8 , & mut self . _bitfield_1 as * mut _ as * mut u8 , :: std :: mem :: size_of :: < u32 > ( ) , ) ; } } # [ inline ] pub fn __w_coredump ( & self ) -> :: std :: os :: raw :: c_uint { let mut unit_field_val : u32 = unsafe { :: std :: mem :: uninitialized ( ) } ; unsafe { :: std :: ptr :: copy_nonoverlapping ( & self . _bitfield_1 as * const _ as * const u8 , & mut unit_field_val as * mut u32 as * mut u8 , :: std :: mem :: size_of :: < u32 > ( ) , ) } ; let mask = 0x80 as u32 ; let val = ( unit_field_val & mask ) >> 7usize ; unsafe { :: std :: mem :: transmute ( val as u32 ) } } # [ inline ] pub fn set___w_coredump ( & mut self , val : :: std :: os :: raw :: c_uint ) { let mask = 0x80 as u32 ; let val = val as u32 as u32 ; let mut unit_field_val : u32 = unsafe { :: std :: mem :: uninitialized ( ) } ; unsafe { :: std :: ptr :: copy_nonoverlapping ( & self . _bitfield_1 as * const _ as * const u8 , & mut unit_field_val as * mut u32 as * mut u8 , :: std :: mem :: size_of :: < u32 > ( ) , ) } ; unit_field_val &= ! mask ; unit_field_val |= ( val << 7usize ) & mask ; unsafe { :: std :: ptr :: copy_nonoverlapping ( & unit_field_val as * const _ as * const u8 , & mut self . _bitfield_1 as * mut _ as * mut u8 , :: std :: mem :: size_of :: < u32 > ( ) , ) ; } } # [ inline ] pub fn __w_retcode ( & self ) -> :: std :: os :: raw :: c_uint { let mut unit_field_val : u32 = unsafe { :: std :: mem :: uninitialized ( ) } ; unsafe { :: std :: ptr :: copy_nonoverlapping ( & self . _bitfield_1 as * const _ as * const u8 , & mut unit_field_val as * mut u32 as * mut u8 , :: std :: mem :: size_of :: < u32 > ( ) , ) } ; let mask = 0xff00 as u32 ; let val = ( unit_field_val & mask ) >> 8usize ; unsafe { :: std :: mem :: transmute ( val as u32 ) } } # [ inline ] pub fn set___w_retcode ( & mut self , val : :: std :: os :: raw :: c_uint ) { let mask = 0xff00 as u32 ; let val = val as u32 as u32 ; let mut unit_field_val : u32 = unsafe { :: std :: mem :: uninitialized ( ) } ; unsafe { :: std :: ptr :: copy_nonoverlapping ( & self . _bitfield_1 as * const _ as * const u8 , & mut unit_field_val as * mut u32 as * mut u8 , :: std :: mem :: size_of :: < u32 > ( ) , ) } ; unit_field_val &= ! mask ; unit_field_val |= ( val << 8usize ) & mask ; unsafe { :: std :: ptr :: copy_nonoverlapping ( & unit_field_val as * const _ as * const u8 , & mut self . _bitfield_1 as * mut _ as * mut u8 , :: std :: mem :: size_of :: < u32 > ( ) , ) ; } } # [ inline ] pub fn new_bitfield_1 ( __w_termsig : :: std :: os :: raw :: c_uint , __w_coredump : :: std :: os :: raw :: c_uint , __w_retcode : :: std :: os :: raw :: c_uint ) -> u32 { ( ( ( 0 | ( ( __w_termsig as u32 as u32 ) << 0usize ) & ( 0x7f as u32 ) ) | ( ( __w_coredump as u32 as u32 ) << 7usize ) & ( 0x80 as u32 ) ) | ( ( __w_retcode as u32 as u32 ) << 8usize ) & ( 0xff00 as u32 ) ) } } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct wait__bindgen_ty_2 { pub _bitfield_1 : [ u16 ; 2usize ] , pub __bindgen_align : [ u32 ; 0usize ] , } # [ test ] fn bindgen_test_layout_wait__bindgen_ty_2 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < wait__bindgen_ty_2 > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( wait__bindgen_ty_2 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < wait__bindgen_ty_2 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( wait__bindgen_ty_2 ) ) ) ; } impl wait__bindgen_ty_2 { # [ inline ] pub fn __w_stopval ( & self ) -> :: std :: os :: raw :: c_uint { let mut unit_field_val : u32 = unsafe { :: std :: mem :: uninitialized ( ) } ; unsafe { :: std :: ptr :: copy_nonoverlapping ( & self . _bitfield_1 as * const _ as * const u8 , & mut unit_field_val as * mut u32 as * mut u8 , :: std :: mem :: size_of :: < u32 > ( ) , ) } ; let mask = 0xff as u32 ; let val = ( unit_field_val & mask ) >> 0usize ; unsafe { :: std :: mem :: transmute ( val as u32 ) } } # [ inline ] pub fn set___w_stopval ( & mut self , val : :: std :: os :: raw :: c_uint ) { let mask = 0xff as u32 ; let val = val as u32 as u32 ; let mut unit_field_val : u32 = unsafe { :: std :: mem :: uninitialized ( ) } ; unsafe { :: std :: ptr :: copy_nonoverlapping ( & self . _bitfield_1 as * const _ as * const u8 , & mut unit_field_val as * mut u32 as * mut u8 , :: std :: mem :: size_of :: < u32 > ( ) , ) } ; unit_field_val &= ! mask ; unit_field_val |= ( val << 0usize ) & mask ; unsafe { :: std :: ptr :: copy_nonoverlapping ( & unit_field_val as * const _ as * const u8 , & mut self . _bitfield_1 as * mut _ as * mut u8 , :: std :: mem :: size_of :: < u32 > ( ) , ) ; } } # [ inline ] pub fn __w_stopsig ( & self ) -> :: std :: os :: raw :: c_uint { let mut unit_field_val : u32 = unsafe { :: std :: mem :: uninitialized ( ) } ; unsafe { :: std :: ptr :: copy_nonoverlapping ( & self . _bitfield_1 as * const _ as * const u8 , & mut unit_field_val as * mut u32 as * mut u8 , :: std :: mem :: size_of :: < u32 > ( ) , ) } ; let mask = 0xff00 as u32 ; let val = ( unit_field_val & mask ) >> 8usize ; unsafe { :: std :: mem :: transmute ( val as u32 ) } } # [ inline ] pub fn set___w_stopsig ( & mut self , val : :: std :: os :: raw :: c_uint ) { let mask = 0xff00 as u32 ; let val = val as u32 as u32 ; let mut unit_field_val : u32 = unsafe { :: std :: mem :: uninitialized ( ) } ; unsafe { :: std :: ptr :: copy_nonoverlapping ( & self . _bitfield_1 as * const _ as * const u8 , & mut unit_field_val as * mut u32 as * mut u8 , :: std :: mem :: size_of :: < u32 > ( ) , ) } ; unit_field_val &= ! mask ; unit_field_val |= ( val << 8usize ) & mask ; unsafe { :: std :: ptr :: copy_nonoverlapping ( & unit_field_val as * const _ as * const u8 , & mut self . _bitfield_1 as * mut _ as * mut u8 , :: std :: mem :: size_of :: < u32 > ( ) , ) ; } } # [ inline ] pub fn new_bitfield_1 ( __w_stopval : :: std :: os :: raw :: c_uint , __w_stopsig : :: std :: os :: raw :: c_uint ) -> u32 { ( ( 0 | ( ( __w_stopval as u32 as u32 ) << 0usize ) & ( 0xff as u32 ) ) | ( ( __w_stopsig as u32 as u32 ) << 8usize ) & ( 0xff00 as u32 ) ) } } # [ test ] fn bindgen_test_layout_wait ( ) { assert_eq ! ( :: std :: mem :: size_of :: < wait > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( wait ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < wait > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( wait ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const wait ) ) . w_status as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( wait ) , "::" , stringify ! ( w_status ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const wait ) ) . __wait_terminated as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( wait ) , "::" , stringify ! ( __wait_terminated ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const wait ) ) . __wait_stopped as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( wait ) , "::" , stringify ! ( __wait_stopped ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union __WAIT_STATUS { pub __uptr : * mut wait , pub __iptr : * mut :: std :: os :: raw :: c_int , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout___WAIT_STATUS ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __WAIT_STATUS > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __WAIT_STATUS ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __WAIT_STATUS > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __WAIT_STATUS ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __WAIT_STATUS ) ) . __uptr as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __WAIT_STATUS ) , "::" , stringify ! ( __uptr ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __WAIT_STATUS ) ) . __iptr as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __WAIT_STATUS ) , "::" , stringify ! ( __iptr ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct div_t { pub quot : :: std :: os :: raw :: c_int , pub rem : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_div_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < div_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( div_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < div_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( div_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const div_t ) ) . quot as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( div_t ) , "::" , stringify ! ( quot ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const div_t ) ) . rem as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( div_t ) , "::" , stringify ! ( rem ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ldiv_t { pub quot : :: std :: os :: raw :: c_long , pub rem : :: std :: os :: raw :: c_long , } # [ test ] fn bindgen_test_layout_ldiv_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ldiv_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ldiv_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ldiv_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ldiv_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const ldiv_t ) ) . quot as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( ldiv_t ) , "::" , stringify ! ( quot ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const ldiv_t ) ) . rem as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( ldiv_t ) , "::" , stringify ! ( rem ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lldiv_t { pub quot : :: std :: os :: raw :: c_longlong , pub rem : :: std :: os :: raw :: c_longlong , } # [ test ] fn bindgen_test_layout_lldiv_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lldiv_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( lldiv_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lldiv_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lldiv_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const lldiv_t ) ) . quot as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( lldiv_t ) , "::" , stringify ! ( quot ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const lldiv_t ) ) . rem as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( lldiv_t ) , "::" , stringify ! ( rem ) ) ) ; } extern "C" {
 pub fn __ctype_get_mb_cur_max ( ) -> usize ; 
} extern "C" {
 pub fn atof ( __nptr : * const :: std :: os :: raw :: c_char , ) -> f64 ; 
} extern "C" {
 pub fn atoi ( __nptr : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn atol ( __nptr : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn atoll ( __nptr : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_longlong ; 
} extern "C" {
 pub fn strtod ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , ) -> f64 ; 
} extern "C" {
 pub fn strtof ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , ) -> f32 ; 
} extern "C" {
 pub fn strtold ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , ) -> f64 ; 
} extern "C" {
 pub fn strtol ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn strtoul ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_ulong ; 
} extern "C" {
 pub fn strtoq ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_longlong ; 
} extern "C" {
 pub fn strtouq ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_ulonglong ; 
} extern "C" {
 pub fn strtoll ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_longlong ; 
} extern "C" {
 pub fn strtoull ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_ulonglong ; 
} extern "C" {
 pub fn l64a ( __n : :: std :: os :: raw :: c_long , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn a64l ( __s : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_long ; 
} pub type u_char = __u_char ; pub type u_short = __u_short ; pub type u_int = __u_int ; pub type u_long = __u_long ; pub type quad_t = __quad_t ; pub type u_quad_t = __u_quad_t ; pub type fsid_t = __fsid_t ; pub type loff_t = __loff_t ; pub type ino_t = __ino_t ; pub type dev_t = __dev_t ; pub type gid_t = __gid_t ; pub type mode_t = __mode_t ; pub type nlink_t = __nlink_t ; pub type uid_t = __uid_t ; pub type off_t = __off_t ; pub type pid_t = __pid_t ; pub type id_t = __id_t ; pub type daddr_t = __daddr_t ; pub type caddr_t = __caddr_t ; pub type key_t = __key_t ; pub type clock_t = __clock_t ; pub type time_t = __time_t ; pub type clockid_t = __clockid_t ; pub type timer_t = __timer_t ; pub type ulong = :: std :: os :: raw :: c_ulong ; pub type ushort = :: std :: os :: raw :: c_ushort ; pub type uint = :: std :: os :: raw :: c_uint ; pub type u_int8_t = :: std :: os :: raw :: c_uchar ; pub type u_int16_t = :: std :: os :: raw :: c_ushort ; pub type u_int32_t = :: std :: os :: raw :: c_uint ; pub type u_int64_t = :: std :: os :: raw :: c_ulong ; pub type register_t = :: std :: os :: raw :: c_long ; pub type __sig_atomic_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __sigset_t { pub __val : [ :: std :: os :: raw :: c_ulong ; 16usize ] , } # [ test ] fn bindgen_test_layout___sigset_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __sigset_t > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( __sigset_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __sigset_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __sigset_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __sigset_t ) ) . __val as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __sigset_t ) , "::" , stringify ! ( __val ) ) ) ; } pub type sigset_t = __sigset_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct timespec { pub tv_sec : __time_t , pub tv_nsec : __syscall_slong_t , } # [ test ] fn bindgen_test_layout_timespec ( ) { assert_eq ! ( :: std :: mem :: size_of :: < timespec > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( timespec ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < timespec > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( timespec ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timespec ) ) . tv_sec as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( timespec ) , "::" , stringify ! ( tv_sec ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timespec ) ) . tv_nsec as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( timespec ) , "::" , stringify ! ( tv_nsec ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct timeval { pub tv_sec : __time_t , pub tv_usec : __suseconds_t , } # [ test ] fn bindgen_test_layout_timeval ( ) { assert_eq ! ( :: std :: mem :: size_of :: < timeval > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( timeval ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < timeval > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( timeval ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timeval ) ) . tv_sec as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( timeval ) , "::" , stringify ! ( tv_sec ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timeval ) ) . tv_usec as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( timeval ) , "::" , stringify ! ( tv_usec ) ) ) ; } pub type suseconds_t = __suseconds_t ; pub type __fd_mask = :: std :: os :: raw :: c_long ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct fd_set { pub __fds_bits : [ __fd_mask ; 16usize ] , } # [ test ] fn bindgen_test_layout_fd_set ( ) { assert_eq ! ( :: std :: mem :: size_of :: < fd_set > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( fd_set ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < fd_set > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( fd_set ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const fd_set ) ) . __fds_bits as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( fd_set ) , "::" , stringify ! ( __fds_bits ) ) ) ; } pub type fd_mask = __fd_mask ; extern "C" {
 pub fn select ( __nfds : :: std :: os :: raw :: c_int , __readfds : * mut fd_set , __writefds : * mut fd_set , __exceptfds : * mut fd_set , __timeout : * mut timeval , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn pselect ( __nfds : :: std :: os :: raw :: c_int , __readfds : * mut fd_set , __writefds : * mut fd_set , __exceptfds : * mut fd_set , __timeout : * const timespec , __sigmask : * const __sigset_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn gnu_dev_major ( __dev : :: std :: os :: raw :: c_ulonglong , ) -> :: std :: os :: raw :: c_uint ; 
} extern "C" {
 pub fn gnu_dev_minor ( __dev : :: std :: os :: raw :: c_ulonglong , ) -> :: std :: os :: raw :: c_uint ; 
} extern "C" {
 pub fn gnu_dev_makedev ( __major : :: std :: os :: raw :: c_uint , __minor : :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_ulonglong ; 
} pub type blksize_t = __blksize_t ; pub type blkcnt_t = __blkcnt_t ; pub type fsblkcnt_t = __fsblkcnt_t ; pub type fsfilcnt_t = __fsfilcnt_t ; pub type pthread_t = :: std :: os :: raw :: c_ulong ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_attr_t { pub __size : [ :: std :: os :: raw :: c_char ; 56usize ] , pub __align : :: std :: os :: raw :: c_long , _bindgen_union_align : [ u64 ; 7usize ] , } # [ test ] fn bindgen_test_layout_pthread_attr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_attr_t > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( pthread_attr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_attr_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_attr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_attr_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_attr_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_attr_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_attr_t ) , "::" , stringify ! ( __align ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __pthread_internal_list { pub __prev : * mut __pthread_internal_list , pub __next : * mut __pthread_internal_list , } # [ test ] fn bindgen_test_layout___pthread_internal_list ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_internal_list > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( __pthread_internal_list ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_internal_list > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __pthread_internal_list ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_internal_list ) ) . __prev as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_internal_list ) , "::" , stringify ! ( __prev ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_internal_list ) ) . __next as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_internal_list ) , "::" , stringify ! ( __next ) ) ) ; } pub type __pthread_list_t = __pthread_internal_list ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_mutex_t { pub __data : pthread_mutex_t___pthread_mutex_s , pub __size : [ :: std :: os :: raw :: c_char ; 40usize ] , pub __align : :: std :: os :: raw :: c_long , _bindgen_union_align : [ u64 ; 5usize ] , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct pthread_mutex_t___pthread_mutex_s { pub __lock : :: std :: os :: raw :: c_int , pub __count : :: std :: os :: raw :: c_uint , pub __owner : :: std :: os :: raw :: c_int , pub __nusers : :: std :: os :: raw :: c_uint , pub __kind : :: std :: os :: raw :: c_int , pub __spins : :: std :: os :: raw :: c_short , pub __elision : :: std :: os :: raw :: c_short , pub __list : __pthread_list_t , } # [ test ] fn bindgen_test_layout_pthread_mutex_t___pthread_mutex_s ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_mutex_t___pthread_mutex_s > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( pthread_mutex_t___pthread_mutex_s ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_mutex_t___pthread_mutex_s > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_mutex_t___pthread_mutex_s ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) . __lock as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! ( __lock ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) . __count as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! ( __count ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) . __owner as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! ( __owner ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) . __nusers as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! ( __nusers ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) . __kind as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! ( __kind ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) . __spins as * const _ as usize } , 20usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! ( __spins ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) . __elision as * const _ as usize } , 22usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! ( __elision ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) . __list as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! ( __list ) ) ) ; } # [ test ] fn bindgen_test_layout_pthread_mutex_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_mutex_t > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( pthread_mutex_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_mutex_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_mutex_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutex_t ) ) . __data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutex_t ) , "::" , stringify ! ( __data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutex_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutex_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutex_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutex_t ) , "::" , stringify ! ( __align ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_mutexattr_t { pub __size : [ :: std :: os :: raw :: c_char ; 4usize ] , pub __align : :: std :: os :: raw :: c_int , _bindgen_union_align : u32 , } # [ test ] fn bindgen_test_layout_pthread_mutexattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_mutexattr_t > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( pthread_mutexattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_mutexattr_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( pthread_mutexattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutexattr_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutexattr_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutexattr_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutexattr_t ) , "::" , stringify ! ( __align ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_cond_t { pub __data : pthread_cond_t__bindgen_ty_1 , pub __size : [ :: std :: os :: raw :: c_char ; 48usize ] , pub __align : :: std :: os :: raw :: c_longlong , _bindgen_union_align : [ u64 ; 6usize ] , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct pthread_cond_t__bindgen_ty_1 { pub __lock : :: std :: os :: raw :: c_int , pub __futex : :: std :: os :: raw :: c_uint , pub __total_seq : :: std :: os :: raw :: c_ulonglong , pub __wakeup_seq : :: std :: os :: raw :: c_ulonglong , pub __woken_seq : :: std :: os :: raw :: c_ulonglong , pub __mutex : * mut :: std :: os :: raw :: c_void , pub __nwaiters : :: std :: os :: raw :: c_uint , pub __broadcast_seq : :: std :: os :: raw :: c_uint , } # [ test ] fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_cond_t__bindgen_ty_1 > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( pthread_cond_t__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_cond_t__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_cond_t__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) . __lock as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __lock ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) . __futex as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __futex ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) . __total_seq as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __total_seq ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) . __wakeup_seq as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __wakeup_seq ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) . __woken_seq as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __woken_seq ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) . __mutex as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __mutex ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) . __nwaiters as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __nwaiters ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) . __broadcast_seq as * const _ as usize } , 44usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __broadcast_seq ) ) ) ; } # [ test ] fn bindgen_test_layout_pthread_cond_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_cond_t > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( pthread_cond_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_cond_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_cond_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_cond_t ) ) . __data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::" , stringify ! ( __data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_cond_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_cond_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::" , stringify ! ( __align ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_condattr_t { pub __size : [ :: std :: os :: raw :: c_char ; 4usize ] , pub __align : :: std :: os :: raw :: c_int , _bindgen_union_align : u32 , } # [ test ] fn bindgen_test_layout_pthread_condattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_condattr_t > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( pthread_condattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_condattr_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( pthread_condattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_condattr_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_condattr_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_condattr_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_condattr_t ) , "::" , stringify ! ( __align ) ) ) ; } pub type pthread_key_t = :: std :: os :: raw :: c_uint ; pub type pthread_once_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_rwlock_t { pub __data : pthread_rwlock_t__bindgen_ty_1 , pub __size : [ :: std :: os :: raw :: c_char ; 56usize ] , pub __align : :: std :: os :: raw :: c_long , _bindgen_union_align : [ u64 ; 7usize ] , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct pthread_rwlock_t__bindgen_ty_1 { pub __lock : :: std :: os :: raw :: c_int , pub __nr_readers : :: std :: os :: raw :: c_uint , pub __readers_wakeup : :: std :: os :: raw :: c_uint , pub __writer_wakeup : :: std :: os :: raw :: c_uint , pub __nr_readers_queued : :: std :: os :: raw :: c_uint , pub __nr_writers_queued : :: std :: os :: raw :: c_uint , pub __writer : :: std :: os :: raw :: c_int , pub __shared : :: std :: os :: raw :: c_int , pub __pad1 : :: std :: os :: raw :: c_ulong , pub __pad2 : :: std :: os :: raw :: c_ulong , pub __flags : :: std :: os :: raw :: c_uint , } # [ test ] fn bindgen_test_layout_pthread_rwlock_t__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_rwlock_t__bindgen_ty_1 > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_rwlock_t__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) . __lock as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __lock ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) . __nr_readers as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __nr_readers ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) . __readers_wakeup as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __readers_wakeup ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) . __writer_wakeup as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __writer_wakeup ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) . __nr_readers_queued as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __nr_readers_queued ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) . __nr_writers_queued as * const _ as usize } , 20usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __nr_writers_queued ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) . __writer as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __writer ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) . __shared as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __shared ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) . __pad1 as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __pad1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) . __pad2 as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __pad2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) . __flags as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __flags ) ) ) ; } # [ test ] fn bindgen_test_layout_pthread_rwlock_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_rwlock_t > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( pthread_rwlock_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_rwlock_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_rwlock_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlock_t ) ) . __data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlock_t ) , "::" , stringify ! ( __data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlock_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlock_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlock_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlock_t ) , "::" , stringify ! ( __align ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_rwlockattr_t { pub __size : [ :: std :: os :: raw :: c_char ; 8usize ] , pub __align : :: std :: os :: raw :: c_long , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout_pthread_rwlockattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_rwlockattr_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( pthread_rwlockattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_rwlockattr_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_rwlockattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlockattr_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlockattr_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlockattr_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlockattr_t ) , "::" , stringify ! ( __align ) ) ) ; } pub type pthread_spinlock_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_barrier_t { pub __size : [ :: std :: os :: raw :: c_char ; 32usize ] , pub __align : :: std :: os :: raw :: c_long , _bindgen_union_align : [ u64 ; 4usize ] , } # [ test ] fn bindgen_test_layout_pthread_barrier_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_barrier_t > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( pthread_barrier_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_barrier_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_barrier_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_barrier_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_barrier_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_barrier_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_barrier_t ) , "::" , stringify ! ( __align ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_barrierattr_t { pub __size : [ :: std :: os :: raw :: c_char ; 4usize ] , pub __align : :: std :: os :: raw :: c_int , _bindgen_union_align : u32 , } # [ test ] fn bindgen_test_layout_pthread_barrierattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_barrierattr_t > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( pthread_barrierattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_barrierattr_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( pthread_barrierattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_barrierattr_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_barrierattr_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_barrierattr_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_barrierattr_t ) , "::" , stringify ! ( __align ) ) ) ; } extern "C" {
 pub fn random ( ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn srandom ( __seed : :: std :: os :: raw :: c_uint , ) ; 
} extern "C" {
 pub fn initstate ( __seed : :: std :: os :: raw :: c_uint , __statebuf : * mut :: std :: os :: raw :: c_char , __statelen : usize , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn setstate ( __statebuf : * mut :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct random_data { pub fptr : * mut i32 , pub rptr : * mut i32 , pub state : * mut i32 , pub rand_type : :: std :: os :: raw :: c_int , pub rand_deg : :: std :: os :: raw :: c_int , pub rand_sep : :: std :: os :: raw :: c_int , pub end_ptr : * mut i32 , } # [ test ] fn bindgen_test_layout_random_data ( ) { assert_eq ! ( :: std :: mem :: size_of :: < random_data > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( random_data ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < random_data > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( random_data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const random_data ) ) . fptr as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( random_data ) , "::" , stringify ! ( fptr ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const random_data ) ) . rptr as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( random_data ) , "::" , stringify ! ( rptr ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const random_data ) ) . state as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( random_data ) , "::" , stringify ! ( state ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const random_data ) ) . rand_type as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( random_data ) , "::" , stringify ! ( rand_type ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const random_data ) ) . rand_deg as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( random_data ) , "::" , stringify ! ( rand_deg ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const random_data ) ) . rand_sep as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( random_data ) , "::" , stringify ! ( rand_sep ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const random_data ) ) . end_ptr as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( random_data ) , "::" , stringify ! ( end_ptr ) ) ) ; } extern "C" {
 pub fn random_r ( __buf : * mut random_data , __result : * mut i32 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn srandom_r ( __seed : :: std :: os :: raw :: c_uint , __buf : * mut random_data , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn initstate_r ( __seed : :: std :: os :: raw :: c_uint , __statebuf : * mut :: std :: os :: raw :: c_char , __statelen : usize , __buf : * mut random_data , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn setstate_r ( __statebuf : * mut :: std :: os :: raw :: c_char , __buf : * mut random_data , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn rand ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn srand ( __seed : :: std :: os :: raw :: c_uint , ) ; 
} extern "C" {
 pub fn rand_r ( __seed : * mut :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn drand48 ( ) -> f64 ; 
} extern "C" {
 pub fn erand48 ( __xsubi : * mut :: std :: os :: raw :: c_ushort , ) -> f64 ; 
} extern "C" {
 pub fn lrand48 ( ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn nrand48 ( __xsubi : * mut :: std :: os :: raw :: c_ushort , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn mrand48 ( ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn jrand48 ( __xsubi : * mut :: std :: os :: raw :: c_ushort , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn srand48 ( __seedval : :: std :: os :: raw :: c_long , ) ; 
} extern "C" {
 pub fn seed48 ( __seed16v : * mut :: std :: os :: raw :: c_ushort , ) -> * mut :: std :: os :: raw :: c_ushort ; 
} extern "C" {
 pub fn lcong48 ( __param : * mut :: std :: os :: raw :: c_ushort , ) ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct drand48_data { pub __x : [ :: std :: os :: raw :: c_ushort ; 3usize ] , pub __old_x : [ :: std :: os :: raw :: c_ushort ; 3usize ] , pub __c : :: std :: os :: raw :: c_ushort , pub __init : :: std :: os :: raw :: c_ushort , pub __a : :: std :: os :: raw :: c_ulonglong , } # [ test ] fn bindgen_test_layout_drand48_data ( ) { assert_eq ! ( :: std :: mem :: size_of :: < drand48_data > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( drand48_data ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < drand48_data > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( drand48_data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const drand48_data ) ) . __x as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( drand48_data ) , "::" , stringify ! ( __x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const drand48_data ) ) . __old_x as * const _ as usize } , 6usize , concat ! ( "Alignment of field: " , stringify ! ( drand48_data ) , "::" , stringify ! ( __old_x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const drand48_data ) ) . __c as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( drand48_data ) , "::" , stringify ! ( __c ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const drand48_data ) ) . __init as * const _ as usize } , 14usize , concat ! ( "Alignment of field: " , stringify ! ( drand48_data ) , "::" , stringify ! ( __init ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const drand48_data ) ) . __a as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( drand48_data ) , "::" , stringify ! ( __a ) ) ) ; } extern "C" {
 pub fn drand48_r ( __buffer : * mut drand48_data , __result : * mut f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn erand48_r ( __xsubi : * mut :: std :: os :: raw :: c_ushort , __buffer : * mut drand48_data , __result : * mut f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn lrand48_r ( __buffer : * mut drand48_data , __result : * mut :: std :: os :: raw :: c_long , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn nrand48_r ( __xsubi : * mut :: std :: os :: raw :: c_ushort , __buffer : * mut drand48_data , __result : * mut :: std :: os :: raw :: c_long , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn mrand48_r ( __buffer : * mut drand48_data , __result : * mut :: std :: os :: raw :: c_long , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn jrand48_r ( __xsubi : * mut :: std :: os :: raw :: c_ushort , __buffer : * mut drand48_data , __result : * mut :: std :: os :: raw :: c_long , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn srand48_r ( __seedval : :: std :: os :: raw :: c_long , __buffer : * mut drand48_data , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn seed48_r ( __seed16v : * mut :: std :: os :: raw :: c_ushort , __buffer : * mut drand48_data , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn lcong48_r ( __param : * mut :: std :: os :: raw :: c_ushort , __buffer : * mut drand48_data , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn malloc ( __size : usize , ) -> * mut :: std :: os :: raw :: c_void ; 
} extern "C" {
 pub fn calloc ( __nmemb : usize , __size : usize , ) -> * mut :: std :: os :: raw :: c_void ; 
} extern "C" {
 pub fn realloc ( __ptr : * mut :: std :: os :: raw :: c_void , __size : usize , ) -> * mut :: std :: os :: raw :: c_void ; 
} extern "C" {
 pub fn free ( __ptr : * mut :: std :: os :: raw :: c_void , ) ; 
} extern "C" {
 pub fn cfree ( __ptr : * mut :: std :: os :: raw :: c_void , ) ; 
} extern "C" {
 pub fn alloca ( __size : usize , ) -> * mut :: std :: os :: raw :: c_void ; 
} extern "C" {
 pub fn valloc ( __size : usize , ) -> * mut :: std :: os :: raw :: c_void ; 
} extern "C" {
 pub fn posix_memalign ( __memptr : * mut * mut :: std :: os :: raw :: c_void , __alignment : usize , __size : usize , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn aligned_alloc ( __alignment : usize , __size : usize , ) -> * mut :: std :: os :: raw :: c_void ; 
} extern "C" {
 pub fn abort ( ) ; 
} extern "C" {
 pub fn atexit ( __func : :: std :: option :: Option < unsafe extern "C" fn ( ) > , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn at_quick_exit ( __func : :: std :: option :: Option < unsafe extern "C" fn ( ) > , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn on_exit ( __func : :: std :: option :: Option < unsafe extern "C" fn ( __status : :: std :: os :: raw :: c_int , __arg : * mut :: std :: os :: raw :: c_void ) > , __arg : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn exit ( __status : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn quick_exit ( __status : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn _Exit ( __status : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn getenv ( __name : * const :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn putenv ( __string : * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn setenv ( __name : * const :: std :: os :: raw :: c_char , __value : * const :: std :: os :: raw :: c_char , __replace : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn unsetenv ( __name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn clearenv ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn mktemp ( __template : * mut :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn mkstemp ( __template : * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn mkstemps ( __template : * mut :: std :: os :: raw :: c_char , __suffixlen : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn mkdtemp ( __template : * mut :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn system ( __command : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn realpath ( __name : * const :: std :: os :: raw :: c_char , __resolved : * mut :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} pub type __compar_fn_t = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const :: std :: os :: raw :: c_void , arg2 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int > ; extern "C" {
 pub fn bsearch ( __key : * const :: std :: os :: raw :: c_void , __base : * const :: std :: os :: raw :: c_void , __nmemb : usize , __size : usize , __compar : __compar_fn_t , ) -> * mut :: std :: os :: raw :: c_void ; 
} extern "C" {
 pub fn qsort ( __base : * mut :: std :: os :: raw :: c_void , __nmemb : usize , __size : usize , __compar : __compar_fn_t , ) ; 
} extern "C" {
 pub fn abs ( __x : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn labs ( __x : :: std :: os :: raw :: c_long , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn llabs ( __x : :: std :: os :: raw :: c_longlong , ) -> :: std :: os :: raw :: c_longlong ; 
} extern "C" {
 pub fn div ( __numer : :: std :: os :: raw :: c_int , __denom : :: std :: os :: raw :: c_int , ) -> div_t ; 
} extern "C" {
 pub fn ldiv ( __numer : :: std :: os :: raw :: c_long , __denom : :: std :: os :: raw :: c_long , ) -> ldiv_t ; 
} extern "C" {
 pub fn lldiv ( __numer : :: std :: os :: raw :: c_longlong , __denom : :: std :: os :: raw :: c_longlong , ) -> lldiv_t ; 
} extern "C" {
 pub fn ecvt ( __value : f64 , __ndigit : :: std :: os :: raw :: c_int , __decpt : * mut :: std :: os :: raw :: c_int , __sign : * mut :: std :: os :: raw :: c_int , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn fcvt ( __value : f64 , __ndigit : :: std :: os :: raw :: c_int , __decpt : * mut :: std :: os :: raw :: c_int , __sign : * mut :: std :: os :: raw :: c_int , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn gcvt ( __value : f64 , __ndigit : :: std :: os :: raw :: c_int , __buf : * mut :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn qecvt ( __value : f64 , __ndigit : :: std :: os :: raw :: c_int , __decpt : * mut :: std :: os :: raw :: c_int , __sign : * mut :: std :: os :: raw :: c_int , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn qfcvt ( __value : f64 , __ndigit : :: std :: os :: raw :: c_int , __decpt : * mut :: std :: os :: raw :: c_int , __sign : * mut :: std :: os :: raw :: c_int , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn qgcvt ( __value : f64 , __ndigit : :: std :: os :: raw :: c_int , __buf : * mut :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn ecvt_r ( __value : f64 , __ndigit : :: std :: os :: raw :: c_int , __decpt : * mut :: std :: os :: raw :: c_int , __sign : * mut :: std :: os :: raw :: c_int , __buf : * mut :: std :: os :: raw :: c_char , __len : usize , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fcvt_r ( __value : f64 , __ndigit : :: std :: os :: raw :: c_int , __decpt : * mut :: std :: os :: raw :: c_int , __sign : * mut :: std :: os :: raw :: c_int , __buf : * mut :: std :: os :: raw :: c_char , __len : usize , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn qecvt_r ( __value : f64 , __ndigit : :: std :: os :: raw :: c_int , __decpt : * mut :: std :: os :: raw :: c_int , __sign : * mut :: std :: os :: raw :: c_int , __buf : * mut :: std :: os :: raw :: c_char , __len : usize , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn qfcvt_r ( __value : f64 , __ndigit : :: std :: os :: raw :: c_int , __decpt : * mut :: std :: os :: raw :: c_int , __sign : * mut :: std :: os :: raw :: c_int , __buf : * mut :: std :: os :: raw :: c_char , __len : usize , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn mblen ( __s : * const :: std :: os :: raw :: c_char , __n : usize , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn mbtowc ( __pwc : * mut wchar_t , __s : * const :: std :: os :: raw :: c_char , __n : usize , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn wctomb ( __s : * mut :: std :: os :: raw :: c_char , __wchar : wchar_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn mbstowcs ( __pwcs : * mut wchar_t , __s : * const :: std :: os :: raw :: c_char , __n : usize , ) -> usize ; 
} extern "C" {
 pub fn wcstombs ( __s : * mut :: std :: os :: raw :: c_char , __pwcs : * const wchar_t , __n : usize , ) -> usize ; 
} extern "C" {
 pub fn rpmatch ( __response : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn getsubopt ( __optionp : * mut * mut :: std :: os :: raw :: c_char , __tokens : * const * const :: std :: os :: raw :: c_char , __valuep : * mut * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn getloadavg ( __loadavg : * mut f64 , __nelem : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} pub type FILE = _IO_FILE ; pub type __FILE = _IO_FILE ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct __mbstate_t { pub __count : :: std :: os :: raw :: c_int , pub __value : __mbstate_t__bindgen_ty_1 , } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union __mbstate_t__bindgen_ty_1 { pub __wch : :: std :: os :: raw :: c_uint , pub __wchb : [ :: std :: os :: raw :: c_char ; 4usize ] , _bindgen_union_align : u32 , } # [ test ] fn bindgen_test_layout___mbstate_t__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __mbstate_t__bindgen_ty_1 > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( __mbstate_t__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __mbstate_t__bindgen_ty_1 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __mbstate_t__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __mbstate_t__bindgen_ty_1 ) ) . __wch as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __mbstate_t__bindgen_ty_1 ) , "::" , stringify ! ( __wch ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __mbstate_t__bindgen_ty_1 ) ) . __wchb as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __mbstate_t__bindgen_ty_1 ) , "::" , stringify ! ( __wchb ) ) ) ; } # [ test ] fn bindgen_test_layout___mbstate_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __mbstate_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __mbstate_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __mbstate_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __mbstate_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __mbstate_t ) ) . __count as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" , stringify ! ( __count ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __mbstate_t ) ) . __value as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" , stringify ! ( __value ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _G_fpos_t { pub __pos : __off_t , pub __state : __mbstate_t , } # [ test ] fn bindgen_test_layout__G_fpos_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _G_fpos_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _G_fpos_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _G_fpos_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _G_fpos_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _G_fpos_t ) ) . __pos as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _G_fpos_t ) , "::" , stringify ! ( __pos ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _G_fpos_t ) ) . __state as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _G_fpos_t ) , "::" , stringify ! ( __state ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _G_fpos64_t { pub __pos : __off64_t , pub __state : __mbstate_t , } # [ test ] fn bindgen_test_layout__G_fpos64_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _G_fpos64_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _G_fpos64_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _G_fpos64_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _G_fpos64_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _G_fpos64_t ) ) . __pos as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _G_fpos64_t ) , "::" , stringify ! ( __pos ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _G_fpos64_t ) ) . __state as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _G_fpos64_t ) , "::" , stringify ! ( __state ) ) ) ; } pub type va_list = __builtin_va_list ; pub type __gnuc_va_list = __builtin_va_list ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _IO_jump_t { _unused : [ u8 ; 0 ] } pub type _IO_lock_t = :: std :: os :: raw :: c_void ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _IO_marker { pub _next : * mut _IO_marker , pub _sbuf : * mut _IO_FILE , pub _pos : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout__IO_marker ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _IO_marker > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( _IO_marker ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _IO_marker > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _IO_marker ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_marker ) ) . _next as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_marker ) , "::" , stringify ! ( _next ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_marker ) ) . _sbuf as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_marker ) , "::" , stringify ! ( _sbuf ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_marker ) ) . _pos as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_marker ) , "::" , stringify ! ( _pos ) ) ) ; } pub const __codecvt_result___codecvt_ok : __codecvt_result = 0 ; pub const __codecvt_result___codecvt_partial : __codecvt_result = 1 ; pub const __codecvt_result___codecvt_error : __codecvt_result = 2 ; pub const __codecvt_result___codecvt_noconv : __codecvt_result = 3 ; pub type __codecvt_result = :: std :: os :: raw :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _IO_FILE { pub _flags : :: std :: os :: raw :: c_int , pub _IO_read_ptr : * mut :: std :: os :: raw :: c_char , pub _IO_read_end : * mut :: std :: os :: raw :: c_char , pub _IO_read_base : * mut :: std :: os :: raw :: c_char , pub _IO_write_base : * mut :: std :: os :: raw :: c_char , pub _IO_write_ptr : * mut :: std :: os :: raw :: c_char , pub _IO_write_end : * mut :: std :: os :: raw :: c_char , pub _IO_buf_base : * mut :: std :: os :: raw :: c_char , pub _IO_buf_end : * mut :: std :: os :: raw :: c_char , pub _IO_save_base : * mut :: std :: os :: raw :: c_char , pub _IO_backup_base : * mut :: std :: os :: raw :: c_char , pub _IO_save_end : * mut :: std :: os :: raw :: c_char , pub _markers : * mut _IO_marker , pub _chain : * mut _IO_FILE , pub _fileno : :: std :: os :: raw :: c_int , pub _flags2 : :: std :: os :: raw :: c_int , pub _old_offset : __off_t , pub _cur_column : :: std :: os :: raw :: c_ushort , pub _vtable_offset : :: std :: os :: raw :: c_schar , pub _shortbuf : [ :: std :: os :: raw :: c_char ; 1usize ] , pub _lock : * mut _IO_lock_t , pub _offset : __off64_t , pub __pad1 : * mut :: std :: os :: raw :: c_void , pub __pad2 : * mut :: std :: os :: raw :: c_void , pub __pad3 : * mut :: std :: os :: raw :: c_void , pub __pad4 : * mut :: std :: os :: raw :: c_void , pub __pad5 : usize , pub _mode : :: std :: os :: raw :: c_int , pub _unused2 : [ :: std :: os :: raw :: c_char ; 20usize ] , } # [ test ] fn bindgen_test_layout__IO_FILE ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _IO_FILE > ( ) , 216usize , concat ! ( "Size of: " , stringify ! ( _IO_FILE ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _IO_FILE > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _IO_FILE ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _flags as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _IO_read_ptr as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_read_ptr ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _IO_read_end as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_read_end ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _IO_read_base as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_read_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _IO_write_base as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_write_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _IO_write_ptr as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_write_ptr ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _IO_write_end as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_write_end ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _IO_buf_base as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_buf_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _IO_buf_end as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_buf_end ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _IO_save_base as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_save_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _IO_backup_base as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_backup_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _IO_save_end as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_save_end ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _markers as * const _ as usize } , 96usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _markers ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _chain as * const _ as usize } , 104usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _chain ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _fileno as * const _ as usize } , 112usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _fileno ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _flags2 as * const _ as usize } , 116usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _flags2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _old_offset as * const _ as usize } , 120usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _old_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _cur_column as * const _ as usize } , 128usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _cur_column ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _vtable_offset as * const _ as usize } , 130usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _vtable_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _shortbuf as * const _ as usize } , 131usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _shortbuf ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _lock as * const _ as usize } , 136usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _lock ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _offset as * const _ as usize } , 144usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . __pad1 as * const _ as usize } , 152usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( __pad1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . __pad2 as * const _ as usize } , 160usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( __pad2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . __pad3 as * const _ as usize } , 168usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( __pad3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . __pad4 as * const _ as usize } , 176usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( __pad4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . __pad5 as * const _ as usize } , 184usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( __pad5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _mode as * const _ as usize } , 192usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _mode ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _unused2 as * const _ as usize } , 196usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _unused2 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _IO_FILE_plus { _unused : [ u8 ; 0 ] } extern "C" {
 # [ link_name = "\u{1}_IO_2_1_stdin_" ] 
 pub static mut  _IO_2_1_stdin_  :  _IO_FILE_plus ;
} extern "C" {
 # [ link_name = "\u{1}_IO_2_1_stdout_" ] 
 pub static mut  _IO_2_1_stdout_  :  _IO_FILE_plus ;
} extern "C" {
 # [ link_name = "\u{1}_IO_2_1_stderr_" ] 
 pub static mut  _IO_2_1_stderr_  :  _IO_FILE_plus ;
} pub type __io_read_fn = :: std :: option :: Option < unsafe extern "C" fn ( __cookie : * mut :: std :: os :: raw :: c_void , __buf : * mut :: std :: os :: raw :: c_char , __nbytes : usize ) -> __ssize_t > ; pub type __io_write_fn = :: std :: option :: Option < unsafe extern "C" fn ( __cookie : * mut :: std :: os :: raw :: c_void , __buf : * const :: std :: os :: raw :: c_char , __n : usize ) -> __ssize_t > ; pub type __io_seek_fn = :: std :: option :: Option < unsafe extern "C" fn ( __cookie : * mut :: std :: os :: raw :: c_void , __pos : * mut __off64_t , __w : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int > ; pub type __io_close_fn = :: std :: option :: Option < unsafe extern "C" fn ( __cookie : * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int > ; extern "C" {
 pub fn __underflow ( arg1 : * mut _IO_FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __uflow ( arg1 : * mut _IO_FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __overflow ( arg1 : * mut _IO_FILE , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn _IO_getc ( __fp : * mut _IO_FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn _IO_putc ( __c : :: std :: os :: raw :: c_int , __fp : * mut _IO_FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn _IO_feof ( __fp : * mut _IO_FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn _IO_ferror ( __fp : * mut _IO_FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn _IO_peekc_locked ( __fp : * mut _IO_FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn _IO_flockfile ( arg1 : * mut _IO_FILE , ) ; 
} extern "C" {
 pub fn _IO_funlockfile ( arg1 : * mut _IO_FILE , ) ; 
} extern "C" {
 pub fn _IO_ftrylockfile ( arg1 : * mut _IO_FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn _IO_vfscanf ( arg1 : * mut _IO_FILE , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut __va_list_tag , arg4 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn _IO_vfprintf ( arg1 : * mut _IO_FILE , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut __va_list_tag , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn _IO_padn ( arg1 : * mut _IO_FILE , arg2 : :: std :: os :: raw :: c_int , arg3 : __ssize_t , ) -> __ssize_t ; 
} extern "C" {
 pub fn _IO_sgetn ( arg1 : * mut _IO_FILE , arg2 : * mut :: std :: os :: raw :: c_void , arg3 : usize , ) -> usize ; 
} extern "C" {
 pub fn _IO_seekoff ( arg1 : * mut _IO_FILE , arg2 : __off64_t , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , ) -> __off64_t ; 
} extern "C" {
 pub fn _IO_seekpos ( arg1 : * mut _IO_FILE , arg2 : __off64_t , arg3 : :: std :: os :: raw :: c_int , ) -> __off64_t ; 
} extern "C" {
 pub fn _IO_free_backup_area ( arg1 : * mut _IO_FILE , ) ; 
} pub type fpos_t = _G_fpos_t ; extern "C" {
 # [ link_name = "\u{1}stdin" ] 
 pub static mut  stdin  :  * mut _IO_FILE ;
} extern "C" {
 # [ link_name = "\u{1}stdout" ] 
 pub static mut  stdout  :  * mut _IO_FILE ;
} extern "C" {
 # [ link_name = "\u{1}stderr" ] 
 pub static mut  stderr  :  * mut _IO_FILE ;
} extern "C" {
 pub fn remove ( __filename : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn rename ( __old : * const :: std :: os :: raw :: c_char , __new : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn renameat ( __oldfd : :: std :: os :: raw :: c_int , __old : * const :: std :: os :: raw :: c_char , __newfd : :: std :: os :: raw :: c_int , __new : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn tmpfile ( ) -> * mut FILE ; 
} extern "C" {
 pub fn tmpnam ( __s : * mut :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn tmpnam_r ( __s : * mut :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn tempnam ( __dir : * const :: std :: os :: raw :: c_char , __pfx : * const :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn fclose ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fflush ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fflush_unlocked ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fopen ( __filename : * const :: std :: os :: raw :: c_char , __modes : * const :: std :: os :: raw :: c_char , ) -> * mut FILE ; 
} extern "C" {
 pub fn freopen ( __filename : * const :: std :: os :: raw :: c_char , __modes : * const :: std :: os :: raw :: c_char , __stream : * mut FILE , ) -> * mut FILE ; 
} extern "C" {
 pub fn fdopen ( __fd : :: std :: os :: raw :: c_int , __modes : * const :: std :: os :: raw :: c_char , ) -> * mut FILE ; 
} extern "C" {
 pub fn fmemopen ( __s : * mut :: std :: os :: raw :: c_void , __len : usize , __modes : * const :: std :: os :: raw :: c_char , ) -> * mut FILE ; 
} extern "C" {
 pub fn open_memstream ( __bufloc : * mut * mut :: std :: os :: raw :: c_char , __sizeloc : * mut usize , ) -> * mut FILE ; 
} extern "C" {
 pub fn setbuf ( __stream : * mut FILE , __buf : * mut :: std :: os :: raw :: c_char , ) ; 
} extern "C" {
 pub fn setvbuf ( __stream : * mut FILE , __buf : * mut :: std :: os :: raw :: c_char , __modes : :: std :: os :: raw :: c_int , __n : usize , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn setbuffer ( __stream : * mut FILE , __buf : * mut :: std :: os :: raw :: c_char , __size : usize , ) ; 
} extern "C" {
 pub fn setlinebuf ( __stream : * mut FILE , ) ; 
} extern "C" {
 pub fn fprintf ( __stream : * mut FILE , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn printf ( __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn sprintf ( __s : * mut :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn vfprintf ( __s : * mut FILE , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn vprintf ( __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn vsprintf ( __s : * mut :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn snprintf ( __s : * mut :: std :: os :: raw :: c_char , __maxlen : usize , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn vsnprintf ( __s : * mut :: std :: os :: raw :: c_char , __maxlen : usize , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn vdprintf ( __fd : :: std :: os :: raw :: c_int , __fmt : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn dprintf ( __fd : :: std :: os :: raw :: c_int , __fmt : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fscanf ( __stream : * mut FILE , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn scanf ( __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn sscanf ( __s : * const :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 # [ link_name = "\u{1}__isoc99_fscanf" ] 
 pub fn fscanf1 ( __stream : * mut FILE , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 # [ link_name = "\u{1}__isoc99_scanf" ] 
 pub fn scanf1 ( __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 # [ link_name = "\u{1}__isoc99_sscanf" ] 
 pub fn sscanf1 ( __s : * const :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn vfscanf ( __s : * mut FILE , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn vscanf ( __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn vsscanf ( __s : * const :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 # [ link_name = "\u{1}__isoc99_vfscanf" ] 
 pub fn vfscanf1 ( __s : * mut FILE , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 # [ link_name = "\u{1}__isoc99_vscanf" ] 
 pub fn vscanf1 ( __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 # [ link_name = "\u{1}__isoc99_vsscanf" ] 
 pub fn vsscanf1 ( __s : * const :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fgetc ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn getc ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn getchar ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn getc_unlocked ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn getchar_unlocked ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fgetc_unlocked ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fputc ( __c : :: std :: os :: raw :: c_int , __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn putc ( __c : :: std :: os :: raw :: c_int , __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn putchar ( __c : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fputc_unlocked ( __c : :: std :: os :: raw :: c_int , __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn putc_unlocked ( __c : :: std :: os :: raw :: c_int , __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn putchar_unlocked ( __c : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn getw ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn putw ( __w : :: std :: os :: raw :: c_int , __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fgets ( __s : * mut :: std :: os :: raw :: c_char , __n : :: std :: os :: raw :: c_int , __stream : * mut FILE , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn __getdelim ( __lineptr : * mut * mut :: std :: os :: raw :: c_char , __n : * mut usize , __delimiter : :: std :: os :: raw :: c_int , __stream : * mut FILE , ) -> __ssize_t ; 
} extern "C" {
 pub fn getdelim ( __lineptr : * mut * mut :: std :: os :: raw :: c_char , __n : * mut usize , __delimiter : :: std :: os :: raw :: c_int , __stream : * mut FILE , ) -> __ssize_t ; 
} extern "C" {
 pub fn getline ( __lineptr : * mut * mut :: std :: os :: raw :: c_char , __n : * mut usize , __stream : * mut FILE , ) -> __ssize_t ; 
} extern "C" {
 pub fn fputs ( __s : * const :: std :: os :: raw :: c_char , __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn puts ( __s : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn ungetc ( __c : :: std :: os :: raw :: c_int , __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fread ( __ptr : * mut :: std :: os :: raw :: c_void , __size : usize , __n : usize , __stream : * mut FILE , ) -> usize ; 
} extern "C" {
 pub fn fwrite ( __ptr : * const :: std :: os :: raw :: c_void , __size : usize , __n : usize , __s : * mut FILE , ) -> usize ; 
} extern "C" {
 pub fn fread_unlocked ( __ptr : * mut :: std :: os :: raw :: c_void , __size : usize , __n : usize , __stream : * mut FILE , ) -> usize ; 
} extern "C" {
 pub fn fwrite_unlocked ( __ptr : * const :: std :: os :: raw :: c_void , __size : usize , __n : usize , __stream : * mut FILE , ) -> usize ; 
} extern "C" {
 pub fn fseek ( __stream : * mut FILE , __off : :: std :: os :: raw :: c_long , __whence : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn ftell ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn rewind ( __stream : * mut FILE , ) ; 
} extern "C" {
 pub fn fseeko ( __stream : * mut FILE , __off : __off_t , __whence : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn ftello ( __stream : * mut FILE , ) -> __off_t ; 
} extern "C" {
 pub fn fgetpos ( __stream : * mut FILE , __pos : * mut fpos_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fsetpos ( __stream : * mut FILE , __pos : * const fpos_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn clearerr ( __stream : * mut FILE , ) ; 
} extern "C" {
 pub fn feof ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn ferror ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn clearerr_unlocked ( __stream : * mut FILE , ) ; 
} extern "C" {
 pub fn feof_unlocked ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn ferror_unlocked ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn perror ( __s : * const :: std :: os :: raw :: c_char , ) ; 
} extern "C" {
 # [ link_name = "\u{1}sys_nerr" ] 
 pub static mut  sys_nerr  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}sys_errlist" ] 
 pub static mut  sys_errlist  :  [ * const :: std :: os :: raw :: c_char ; 0usize ] ;
} extern "C" {
 pub fn fileno ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fileno_unlocked ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn popen ( __command : * const :: std :: os :: raw :: c_char , __modes : * const :: std :: os :: raw :: c_char , ) -> * mut FILE ; 
} extern "C" {
 pub fn pclose ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn ctermid ( __s : * mut :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn flockfile ( __stream : * mut FILE , ) ; 
} extern "C" {
 pub fn ftrylockfile ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn funlockfile ( __stream : * mut FILE , ) ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct stat { pub st_dev : __dev_t , pub st_ino : __ino_t , pub st_nlink : __nlink_t , pub st_mode : __mode_t , pub st_uid : __uid_t , pub st_gid : __gid_t , pub __pad0 : :: std :: os :: raw :: c_int , pub st_rdev : __dev_t , pub st_size : __off_t , pub st_blksize : __blksize_t , pub st_blocks : __blkcnt_t , pub st_atim : timespec , pub st_mtim : timespec , pub st_ctim : timespec , pub __glibc_reserved : [ __syscall_slong_t ; 3usize ] , } # [ test ] fn bindgen_test_layout_stat ( ) { assert_eq ! ( :: std :: mem :: size_of :: < stat > ( ) , 144usize , concat ! ( "Size of: " , stringify ! ( stat ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < stat > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( stat ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const stat ) ) . st_dev as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( stat ) , "::" , stringify ! ( st_dev ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const stat ) ) . st_ino as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( stat ) , "::" , stringify ! ( st_ino ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const stat ) ) . st_nlink as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( stat ) , "::" , stringify ! ( st_nlink ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const stat ) ) . st_mode as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( stat ) , "::" , stringify ! ( st_mode ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const stat ) ) . st_uid as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( stat ) , "::" , stringify ! ( st_uid ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const stat ) ) . st_gid as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( stat ) , "::" , stringify ! ( st_gid ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const stat ) ) . __pad0 as * const _ as usize } , 36usize , concat ! ( "Alignment of field: " , stringify ! ( stat ) , "::" , stringify ! ( __pad0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const stat ) ) . st_rdev as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( stat ) , "::" , stringify ! ( st_rdev ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const stat ) ) . st_size as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( stat ) , "::" , stringify ! ( st_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const stat ) ) . st_blksize as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( stat ) , "::" , stringify ! ( st_blksize ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const stat ) ) . st_blocks as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( stat ) , "::" , stringify ! ( st_blocks ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const stat ) ) . st_atim as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( stat ) , "::" , stringify ! ( st_atim ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const stat ) ) . st_mtim as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( stat ) , "::" , stringify ! ( st_mtim ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const stat ) ) . st_ctim as * const _ as usize } , 104usize , concat ! ( "Alignment of field: " , stringify ! ( stat ) , "::" , stringify ! ( st_ctim ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const stat ) ) . __glibc_reserved as * const _ as usize } , 120usize , concat ! ( "Alignment of field: " , stringify ! ( stat ) , "::" , stringify ! ( __glibc_reserved ) ) ) ; } extern "C" {
 pub fn stat ( __file : * const :: std :: os :: raw :: c_char , __buf : * mut stat , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fstat ( __fd : :: std :: os :: raw :: c_int , __buf : * mut stat , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fstatat ( __fd : :: std :: os :: raw :: c_int , __file : * const :: std :: os :: raw :: c_char , __buf : * mut stat , __flag : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn lstat ( __file : * const :: std :: os :: raw :: c_char , __buf : * mut stat , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn chmod ( __file : * const :: std :: os :: raw :: c_char , __mode : __mode_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn lchmod ( __file : * const :: std :: os :: raw :: c_char , __mode : __mode_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fchmod ( __fd : :: std :: os :: raw :: c_int , __mode : __mode_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fchmodat ( __fd : :: std :: os :: raw :: c_int , __file : * const :: std :: os :: raw :: c_char , __mode : __mode_t , __flag : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn umask ( __mask : __mode_t , ) -> __mode_t ; 
} extern "C" {
 pub fn mkdir ( __path : * const :: std :: os :: raw :: c_char , __mode : __mode_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn mkdirat ( __fd : :: std :: os :: raw :: c_int , __path : * const :: std :: os :: raw :: c_char , __mode : __mode_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn mknod ( __path : * const :: std :: os :: raw :: c_char , __mode : __mode_t , __dev : __dev_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn mknodat ( __fd : :: std :: os :: raw :: c_int , __path : * const :: std :: os :: raw :: c_char , __mode : __mode_t , __dev : __dev_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn mkfifo ( __path : * const :: std :: os :: raw :: c_char , __mode : __mode_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn mkfifoat ( __fd : :: std :: os :: raw :: c_int , __path : * const :: std :: os :: raw :: c_char , __mode : __mode_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn utimensat ( __fd : :: std :: os :: raw :: c_int , __path : * const :: std :: os :: raw :: c_char , __times : * const timespec , __flags : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn futimens ( __fd : :: std :: os :: raw :: c_int , __times : * const timespec , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __fxstat ( __ver : :: std :: os :: raw :: c_int , __fildes : :: std :: os :: raw :: c_int , __stat_buf : * mut stat , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __xstat ( __ver : :: std :: os :: raw :: c_int , __filename : * const :: std :: os :: raw :: c_char , __stat_buf : * mut stat , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __lxstat ( __ver : :: std :: os :: raw :: c_int , __filename : * const :: std :: os :: raw :: c_char , __stat_buf : * mut stat , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __fxstatat ( __ver : :: std :: os :: raw :: c_int , __fildes : :: std :: os :: raw :: c_int , __filename : * const :: std :: os :: raw :: c_char , __stat_buf : * mut stat , __flag : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __xmknod ( __ver : :: std :: os :: raw :: c_int , __path : * const :: std :: os :: raw :: c_char , __mode : __mode_t , __dev : * mut __dev_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __xmknodat ( __ver : :: std :: os :: raw :: c_int , __fd : :: std :: os :: raw :: c_int , __path : * const :: std :: os :: raw :: c_char , __mode : __mode_t , __dev : * mut __dev_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn memcpy ( __dest : * mut :: std :: os :: raw :: c_void , __src : * const :: std :: os :: raw :: c_void , __n : usize , ) -> * mut :: std :: os :: raw :: c_void ; 
} extern "C" {
 pub fn memmove ( __dest : * mut :: std :: os :: raw :: c_void , __src : * const :: std :: os :: raw :: c_void , __n : usize , ) -> * mut :: std :: os :: raw :: c_void ; 
} extern "C" {
 pub fn memccpy ( __dest : * mut :: std :: os :: raw :: c_void , __src : * const :: std :: os :: raw :: c_void , __c : :: std :: os :: raw :: c_int , __n : usize , ) -> * mut :: std :: os :: raw :: c_void ; 
} extern "C" {
 pub fn memset ( __s : * mut :: std :: os :: raw :: c_void , __c : :: std :: os :: raw :: c_int , __n : usize , ) -> * mut :: std :: os :: raw :: c_void ; 
} extern "C" {
 pub fn memcmp ( __s1 : * const :: std :: os :: raw :: c_void , __s2 : * const :: std :: os :: raw :: c_void , __n : usize , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn memchr ( __s : * const :: std :: os :: raw :: c_void , __c : :: std :: os :: raw :: c_int , __n : usize , ) -> * mut :: std :: os :: raw :: c_void ; 
} extern "C" {
 pub fn strcpy ( __dest : * mut :: std :: os :: raw :: c_char , __src : * const :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn strncpy ( __dest : * mut :: std :: os :: raw :: c_char , __src : * const :: std :: os :: raw :: c_char , __n : usize , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn strcat ( __dest : * mut :: std :: os :: raw :: c_char , __src : * const :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn strncat ( __dest : * mut :: std :: os :: raw :: c_char , __src : * const :: std :: os :: raw :: c_char , __n : usize , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn strcmp ( __s1 : * const :: std :: os :: raw :: c_char , __s2 : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn strncmp ( __s1 : * const :: std :: os :: raw :: c_char , __s2 : * const :: std :: os :: raw :: c_char , __n : usize , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn strcoll ( __s1 : * const :: std :: os :: raw :: c_char , __s2 : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn strxfrm ( __dest : * mut :: std :: os :: raw :: c_char , __src : * const :: std :: os :: raw :: c_char , __n : usize , ) -> :: std :: os :: raw :: c_ulong ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __locale_struct { pub __locales : [ * mut __locale_data ; 13usize ] , pub __ctype_b : * const :: std :: os :: raw :: c_ushort , pub __ctype_tolower : * const :: std :: os :: raw :: c_int , pub __ctype_toupper : * const :: std :: os :: raw :: c_int , pub __names : [ * const :: std :: os :: raw :: c_char ; 13usize ] , } # [ test ] fn bindgen_test_layout___locale_struct ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __locale_struct > ( ) , 232usize , concat ! ( "Size of: " , stringify ! ( __locale_struct ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __locale_struct > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __locale_struct ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __locale_struct ) ) . __locales as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __locale_struct ) , "::" , stringify ! ( __locales ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __locale_struct ) ) . __ctype_b as * const _ as usize } , 104usize , concat ! ( "Alignment of field: " , stringify ! ( __locale_struct ) , "::" , stringify ! ( __ctype_b ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __locale_struct ) ) . __ctype_tolower as * const _ as usize } , 112usize , concat ! ( "Alignment of field: " , stringify ! ( __locale_struct ) , "::" , stringify ! ( __ctype_tolower ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __locale_struct ) ) . __ctype_toupper as * const _ as usize } , 120usize , concat ! ( "Alignment of field: " , stringify ! ( __locale_struct ) , "::" , stringify ! ( __ctype_toupper ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __locale_struct ) ) . __names as * const _ as usize } , 128usize , concat ! ( "Alignment of field: " , stringify ! ( __locale_struct ) , "::" , stringify ! ( __names ) ) ) ; } pub type __locale_t = * mut __locale_struct ; pub type locale_t = __locale_t ; extern "C" {
 pub fn strcoll_l ( __s1 : * const :: std :: os :: raw :: c_char , __s2 : * const :: std :: os :: raw :: c_char , __l : __locale_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn strxfrm_l ( __dest : * mut :: std :: os :: raw :: c_char , __src : * const :: std :: os :: raw :: c_char , __n : usize , __l : __locale_t , ) -> usize ; 
} extern "C" {
 pub fn strdup ( __s : * const :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn strndup ( __string : * const :: std :: os :: raw :: c_char , __n : usize , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn strchr ( __s : * const :: std :: os :: raw :: c_char , __c : :: std :: os :: raw :: c_int , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn strrchr ( __s : * const :: std :: os :: raw :: c_char , __c : :: std :: os :: raw :: c_int , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn strcspn ( __s : * const :: std :: os :: raw :: c_char , __reject : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_ulong ; 
} extern "C" {
 pub fn strspn ( __s : * const :: std :: os :: raw :: c_char , __accept : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_ulong ; 
} extern "C" {
 pub fn strpbrk ( __s : * const :: std :: os :: raw :: c_char , __accept : * const :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn strstr ( __haystack : * const :: std :: os :: raw :: c_char , __needle : * const :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn strtok ( __s : * mut :: std :: os :: raw :: c_char , __delim : * const :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn __strtok_r ( __s : * mut :: std :: os :: raw :: c_char , __delim : * const :: std :: os :: raw :: c_char , __save_ptr : * mut * mut :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn strtok_r ( __s : * mut :: std :: os :: raw :: c_char , __delim : * const :: std :: os :: raw :: c_char , __save_ptr : * mut * mut :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn strlen ( __s : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_ulong ; 
} extern "C" {
 pub fn strnlen ( __string : * const :: std :: os :: raw :: c_char , __maxlen : usize , ) -> usize ; 
} extern "C" {
 pub fn strerror ( __errnum : :: std :: os :: raw :: c_int , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 # [ link_name = "\u{1}__xpg_strerror_r" ] 
 pub fn strerror_r ( __errnum : :: std :: os :: raw :: c_int , __buf : * mut :: std :: os :: raw :: c_char , __buflen : usize , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn strerror_l ( __errnum : :: std :: os :: raw :: c_int , __l : __locale_t , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn __bzero ( __s : * mut :: std :: os :: raw :: c_void , __n : usize , ) ; 
} extern "C" {
 pub fn bcopy ( __src : * const :: std :: os :: raw :: c_void , __dest : * mut :: std :: os :: raw :: c_void , __n : usize , ) ; 
} extern "C" {
 pub fn bzero ( __s : * mut :: std :: os :: raw :: c_void , __n : usize , ) ; 
} extern "C" {
 pub fn bcmp ( __s1 : * const :: std :: os :: raw :: c_void , __s2 : * const :: std :: os :: raw :: c_void , __n : usize , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn index ( __s : * const :: std :: os :: raw :: c_char , __c : :: std :: os :: raw :: c_int , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn rindex ( __s : * const :: std :: os :: raw :: c_char , __c : :: std :: os :: raw :: c_int , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn ffs ( __i : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn strcasecmp ( __s1 : * const :: std :: os :: raw :: c_char , __s2 : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn strncasecmp ( __s1 : * const :: std :: os :: raw :: c_char , __s2 : * const :: std :: os :: raw :: c_char , __n : usize , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn strsep ( __stringp : * mut * mut :: std :: os :: raw :: c_char , __delim : * const :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn strsignal ( __sig : :: std :: os :: raw :: c_int , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn __stpcpy ( __dest : * mut :: std :: os :: raw :: c_char , __src : * const :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn stpcpy ( __dest : * mut :: std :: os :: raw :: c_char , __src : * const :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn __stpncpy ( __dest : * mut :: std :: os :: raw :: c_char , __src : * const :: std :: os :: raw :: c_char , __n : usize , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn stpncpy ( __dest : * mut :: std :: os :: raw :: c_char , __src : * const :: std :: os :: raw :: c_char , __n : usize , ) -> * mut :: std :: os :: raw :: c_char ; 
} pub type int_least8_t = :: std :: os :: raw :: c_schar ; pub type int_least16_t = :: std :: os :: raw :: c_short ; pub type int_least32_t = :: std :: os :: raw :: c_int ; pub type int_least64_t = :: std :: os :: raw :: c_long ; pub type uint_least8_t = :: std :: os :: raw :: c_uchar ; pub type uint_least16_t = :: std :: os :: raw :: c_ushort ; pub type uint_least32_t = :: std :: os :: raw :: c_uint ; pub type uint_least64_t = :: std :: os :: raw :: c_ulong ; pub type int_fast8_t = :: std :: os :: raw :: c_schar ; pub type int_fast16_t = :: std :: os :: raw :: c_long ; pub type int_fast32_t = :: std :: os :: raw :: c_long ; pub type int_fast64_t = :: std :: os :: raw :: c_long ; pub type uint_fast8_t = :: std :: os :: raw :: c_uchar ; pub type uint_fast16_t = :: std :: os :: raw :: c_ulong ; pub type uint_fast32_t = :: std :: os :: raw :: c_ulong ; pub type uint_fast64_t = :: std :: os :: raw :: c_ulong ; pub type intmax_t = :: std :: os :: raw :: c_long ; pub type uintmax_t = :: std :: os :: raw :: c_ulong ; pub type __gwchar_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct imaxdiv_t { pub quot : :: std :: os :: raw :: c_long , pub rem : :: std :: os :: raw :: c_long , } # [ test ] fn bindgen_test_layout_imaxdiv_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < imaxdiv_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( imaxdiv_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < imaxdiv_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( imaxdiv_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const imaxdiv_t ) ) . quot as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( imaxdiv_t ) , "::" , stringify ! ( quot ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const imaxdiv_t ) ) . rem as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( imaxdiv_t ) , "::" , stringify ! ( rem ) ) ) ; } extern "C" {
 pub fn imaxabs ( __n : intmax_t , ) -> intmax_t ; 
} extern "C" {
 pub fn imaxdiv ( __numer : intmax_t , __denom : intmax_t , ) -> imaxdiv_t ; 
} extern "C" {
 pub fn strtoimax ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int , ) -> intmax_t ; 
} extern "C" {
 pub fn strtoumax ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int , ) -> uintmax_t ; 
} extern "C" {
 pub fn wcstoimax ( __nptr : * const __gwchar_t , __endptr : * mut * mut __gwchar_t , __base : :: std :: os :: raw :: c_int , ) -> intmax_t ; 
} extern "C" {
 pub fn wcstoumax ( __nptr : * const __gwchar_t , __endptr : * mut * mut __gwchar_t , __base : :: std :: os :: raw :: c_int , ) -> uintmax_t ; 
} pub type useconds_t = __useconds_t ; pub type socklen_t = __socklen_t ; extern "C" {
 pub fn access ( __name : * const :: std :: os :: raw :: c_char , __type : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn faccessat ( __fd : :: std :: os :: raw :: c_int , __file : * const :: std :: os :: raw :: c_char , __type : :: std :: os :: raw :: c_int , __flag : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn lseek ( __fd : :: std :: os :: raw :: c_int , __offset : __off_t , __whence : :: std :: os :: raw :: c_int , ) -> __off_t ; 
} extern "C" {
 pub fn close ( __fd : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn read ( __fd : :: std :: os :: raw :: c_int , __buf : * mut :: std :: os :: raw :: c_void , __nbytes : usize , ) -> isize ; 
} extern "C" {
 pub fn write ( __fd : :: std :: os :: raw :: c_int , __buf : * const :: std :: os :: raw :: c_void , __n : usize , ) -> isize ; 
} extern "C" {
 pub fn pread ( __fd : :: std :: os :: raw :: c_int , __buf : * mut :: std :: os :: raw :: c_void , __nbytes : usize , __offset : __off_t , ) -> isize ; 
} extern "C" {
 pub fn pwrite ( __fd : :: std :: os :: raw :: c_int , __buf : * const :: std :: os :: raw :: c_void , __n : usize , __offset : __off_t , ) -> isize ; 
} extern "C" {
 pub fn pipe ( __pipedes : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn alarm ( __seconds : :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_uint ; 
} extern "C" {
 pub fn sleep ( __seconds : :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_uint ; 
} extern "C" {
 pub fn ualarm ( __value : __useconds_t , __interval : __useconds_t , ) -> __useconds_t ; 
} extern "C" {
 pub fn usleep ( __useconds : __useconds_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn pause ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn chown ( __file : * const :: std :: os :: raw :: c_char , __owner : __uid_t , __group : __gid_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fchown ( __fd : :: std :: os :: raw :: c_int , __owner : __uid_t , __group : __gid_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn lchown ( __file : * const :: std :: os :: raw :: c_char , __owner : __uid_t , __group : __gid_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fchownat ( __fd : :: std :: os :: raw :: c_int , __file : * const :: std :: os :: raw :: c_char , __owner : __uid_t , __group : __gid_t , __flag : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn chdir ( __path : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fchdir ( __fd : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn getcwd ( __buf : * mut :: std :: os :: raw :: c_char , __size : usize , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn getwd ( __buf : * mut :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn dup ( __fd : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn dup2 ( __fd : :: std :: os :: raw :: c_int , __fd2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 # [ link_name = "\u{1}__environ" ] 
 pub static mut  __environ  :  * mut * mut :: std :: os :: raw :: c_char ;
} extern "C" {
 pub fn execve ( __path : * const :: std :: os :: raw :: c_char , __argv : * const * const :: std :: os :: raw :: c_char , __envp : * const * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fexecve ( __fd : :: std :: os :: raw :: c_int , __argv : * const * const :: std :: os :: raw :: c_char , __envp : * const * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn execv ( __path : * const :: std :: os :: raw :: c_char , __argv : * const * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn execle ( __path : * const :: std :: os :: raw :: c_char , __arg : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn execl ( __path : * const :: std :: os :: raw :: c_char , __arg : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn execvp ( __file : * const :: std :: os :: raw :: c_char , __argv : * const * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn execlp ( __file : * const :: std :: os :: raw :: c_char , __arg : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn nice ( __inc : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn _exit ( __status : :: std :: os :: raw :: c_int , ) ; 
} pub const _PC_LINK_MAX : _bindgen_ty_1 = 0 ; pub const _PC_MAX_CANON : _bindgen_ty_1 = 1 ; pub const _PC_MAX_INPUT : _bindgen_ty_1 = 2 ; pub const _PC_NAME_MAX : _bindgen_ty_1 = 3 ; pub const _PC_PATH_MAX : _bindgen_ty_1 = 4 ; pub const _PC_PIPE_BUF : _bindgen_ty_1 = 5 ; pub const _PC_CHOWN_RESTRICTED : _bindgen_ty_1 = 6 ; pub const _PC_NO_TRUNC : _bindgen_ty_1 = 7 ; pub const _PC_VDISABLE : _bindgen_ty_1 = 8 ; pub const _PC_SYNC_IO : _bindgen_ty_1 = 9 ; pub const _PC_ASYNC_IO : _bindgen_ty_1 = 10 ; pub const _PC_PRIO_IO : _bindgen_ty_1 = 11 ; pub const _PC_SOCK_MAXBUF : _bindgen_ty_1 = 12 ; pub const _PC_FILESIZEBITS : _bindgen_ty_1 = 13 ; pub const _PC_REC_INCR_XFER_SIZE : _bindgen_ty_1 = 14 ; pub const _PC_REC_MAX_XFER_SIZE : _bindgen_ty_1 = 15 ; pub const _PC_REC_MIN_XFER_SIZE : _bindgen_ty_1 = 16 ; pub const _PC_REC_XFER_ALIGN : _bindgen_ty_1 = 17 ; pub const _PC_ALLOC_SIZE_MIN : _bindgen_ty_1 = 18 ; pub const _PC_SYMLINK_MAX : _bindgen_ty_1 = 19 ; pub const _PC_2_SYMLINKS : _bindgen_ty_1 = 20 ; pub type _bindgen_ty_1 = :: std :: os :: raw :: c_uint ; pub const _SC_ARG_MAX : _bindgen_ty_2 = 0 ; pub const _SC_CHILD_MAX : _bindgen_ty_2 = 1 ; pub const _SC_CLK_TCK : _bindgen_ty_2 = 2 ; pub const _SC_NGROUPS_MAX : _bindgen_ty_2 = 3 ; pub const _SC_OPEN_MAX : _bindgen_ty_2 = 4 ; pub const _SC_STREAM_MAX : _bindgen_ty_2 = 5 ; pub const _SC_TZNAME_MAX : _bindgen_ty_2 = 6 ; pub const _SC_JOB_CONTROL : _bindgen_ty_2 = 7 ; pub const _SC_SAVED_IDS : _bindgen_ty_2 = 8 ; pub const _SC_REALTIME_SIGNALS : _bindgen_ty_2 = 9 ; pub const _SC_PRIORITY_SCHEDULING : _bindgen_ty_2 = 10 ; pub const _SC_TIMERS : _bindgen_ty_2 = 11 ; pub const _SC_ASYNCHRONOUS_IO : _bindgen_ty_2 = 12 ; pub const _SC_PRIORITIZED_IO : _bindgen_ty_2 = 13 ; pub const _SC_SYNCHRONIZED_IO : _bindgen_ty_2 = 14 ; pub const _SC_FSYNC : _bindgen_ty_2 = 15 ; pub const _SC_MAPPED_FILES : _bindgen_ty_2 = 16 ; pub const _SC_MEMLOCK : _bindgen_ty_2 = 17 ; pub const _SC_MEMLOCK_RANGE : _bindgen_ty_2 = 18 ; pub const _SC_MEMORY_PROTECTION : _bindgen_ty_2 = 19 ; pub const _SC_MESSAGE_PASSING : _bindgen_ty_2 = 20 ; pub const _SC_SEMAPHORES : _bindgen_ty_2 = 21 ; pub const _SC_SHARED_MEMORY_OBJECTS : _bindgen_ty_2 = 22 ; pub const _SC_AIO_LISTIO_MAX : _bindgen_ty_2 = 23 ; pub const _SC_AIO_MAX : _bindgen_ty_2 = 24 ; pub const _SC_AIO_PRIO_DELTA_MAX : _bindgen_ty_2 = 25 ; pub const _SC_DELAYTIMER_MAX : _bindgen_ty_2 = 26 ; pub const _SC_MQ_OPEN_MAX : _bindgen_ty_2 = 27 ; pub const _SC_MQ_PRIO_MAX : _bindgen_ty_2 = 28 ; pub const _SC_VERSION : _bindgen_ty_2 = 29 ; pub const _SC_PAGESIZE : _bindgen_ty_2 = 30 ; pub const _SC_RTSIG_MAX : _bindgen_ty_2 = 31 ; pub const _SC_SEM_NSEMS_MAX : _bindgen_ty_2 = 32 ; pub const _SC_SEM_VALUE_MAX : _bindgen_ty_2 = 33 ; pub const _SC_SIGQUEUE_MAX : _bindgen_ty_2 = 34 ; pub const _SC_TIMER_MAX : _bindgen_ty_2 = 35 ; pub const _SC_BC_BASE_MAX : _bindgen_ty_2 = 36 ; pub const _SC_BC_DIM_MAX : _bindgen_ty_2 = 37 ; pub const _SC_BC_SCALE_MAX : _bindgen_ty_2 = 38 ; pub const _SC_BC_STRING_MAX : _bindgen_ty_2 = 39 ; pub const _SC_COLL_WEIGHTS_MAX : _bindgen_ty_2 = 40 ; pub const _SC_EQUIV_CLASS_MAX : _bindgen_ty_2 = 41 ; pub const _SC_EXPR_NEST_MAX : _bindgen_ty_2 = 42 ; pub const _SC_LINE_MAX : _bindgen_ty_2 = 43 ; pub const _SC_RE_DUP_MAX : _bindgen_ty_2 = 44 ; pub const _SC_CHARCLASS_NAME_MAX : _bindgen_ty_2 = 45 ; pub const _SC_2_VERSION : _bindgen_ty_2 = 46 ; pub const _SC_2_C_BIND : _bindgen_ty_2 = 47 ; pub const _SC_2_C_DEV : _bindgen_ty_2 = 48 ; pub const _SC_2_FORT_DEV : _bindgen_ty_2 = 49 ; pub const _SC_2_FORT_RUN : _bindgen_ty_2 = 50 ; pub const _SC_2_SW_DEV : _bindgen_ty_2 = 51 ; pub const _SC_2_LOCALEDEF : _bindgen_ty_2 = 52 ; pub const _SC_PII : _bindgen_ty_2 = 53 ; pub const _SC_PII_XTI : _bindgen_ty_2 = 54 ; pub const _SC_PII_SOCKET : _bindgen_ty_2 = 55 ; pub const _SC_PII_INTERNET : _bindgen_ty_2 = 56 ; pub const _SC_PII_OSI : _bindgen_ty_2 = 57 ; pub const _SC_POLL : _bindgen_ty_2 = 58 ; pub const _SC_SELECT : _bindgen_ty_2 = 59 ; pub const _SC_UIO_MAXIOV : _bindgen_ty_2 = 60 ; pub const _SC_IOV_MAX : _bindgen_ty_2 = 60 ; pub const _SC_PII_INTERNET_STREAM : _bindgen_ty_2 = 61 ; pub const _SC_PII_INTERNET_DGRAM : _bindgen_ty_2 = 62 ; pub const _SC_PII_OSI_COTS : _bindgen_ty_2 = 63 ; pub const _SC_PII_OSI_CLTS : _bindgen_ty_2 = 64 ; pub const _SC_PII_OSI_M : _bindgen_ty_2 = 65 ; pub const _SC_T_IOV_MAX : _bindgen_ty_2 = 66 ; pub const _SC_THREADS : _bindgen_ty_2 = 67 ; pub const _SC_THREAD_SAFE_FUNCTIONS : _bindgen_ty_2 = 68 ; pub const _SC_GETGR_R_SIZE_MAX : _bindgen_ty_2 = 69 ; pub const _SC_GETPW_R_SIZE_MAX : _bindgen_ty_2 = 70 ; pub const _SC_LOGIN_NAME_MAX : _bindgen_ty_2 = 71 ; pub const _SC_TTY_NAME_MAX : _bindgen_ty_2 = 72 ; pub const _SC_THREAD_DESTRUCTOR_ITERATIONS : _bindgen_ty_2 = 73 ; pub const _SC_THREAD_KEYS_MAX : _bindgen_ty_2 = 74 ; pub const _SC_THREAD_STACK_MIN : _bindgen_ty_2 = 75 ; pub const _SC_THREAD_THREADS_MAX : _bindgen_ty_2 = 76 ; pub const _SC_THREAD_ATTR_STACKADDR : _bindgen_ty_2 = 77 ; pub const _SC_THREAD_ATTR_STACKSIZE : _bindgen_ty_2 = 78 ; pub const _SC_THREAD_PRIORITY_SCHEDULING : _bindgen_ty_2 = 79 ; pub const _SC_THREAD_PRIO_INHERIT : _bindgen_ty_2 = 80 ; pub const _SC_THREAD_PRIO_PROTECT : _bindgen_ty_2 = 81 ; pub const _SC_THREAD_PROCESS_SHARED : _bindgen_ty_2 = 82 ; pub const _SC_NPROCESSORS_CONF : _bindgen_ty_2 = 83 ; pub const _SC_NPROCESSORS_ONLN : _bindgen_ty_2 = 84 ; pub const _SC_PHYS_PAGES : _bindgen_ty_2 = 85 ; pub const _SC_AVPHYS_PAGES : _bindgen_ty_2 = 86 ; pub const _SC_ATEXIT_MAX : _bindgen_ty_2 = 87 ; pub const _SC_PASS_MAX : _bindgen_ty_2 = 88 ; pub const _SC_XOPEN_VERSION : _bindgen_ty_2 = 89 ; pub const _SC_XOPEN_XCU_VERSION : _bindgen_ty_2 = 90 ; pub const _SC_XOPEN_UNIX : _bindgen_ty_2 = 91 ; pub const _SC_XOPEN_CRYPT : _bindgen_ty_2 = 92 ; pub const _SC_XOPEN_ENH_I18N : _bindgen_ty_2 = 93 ; pub const _SC_XOPEN_SHM : _bindgen_ty_2 = 94 ; pub const _SC_2_CHAR_TERM : _bindgen_ty_2 = 95 ; pub const _SC_2_C_VERSION : _bindgen_ty_2 = 96 ; pub const _SC_2_UPE : _bindgen_ty_2 = 97 ; pub const _SC_XOPEN_XPG2 : _bindgen_ty_2 = 98 ; pub const _SC_XOPEN_XPG3 : _bindgen_ty_2 = 99 ; pub const _SC_XOPEN_XPG4 : _bindgen_ty_2 = 100 ; pub const _SC_CHAR_BIT : _bindgen_ty_2 = 101 ; pub const _SC_CHAR_MAX : _bindgen_ty_2 = 102 ; pub const _SC_CHAR_MIN : _bindgen_ty_2 = 103 ; pub const _SC_INT_MAX : _bindgen_ty_2 = 104 ; pub const _SC_INT_MIN : _bindgen_ty_2 = 105 ; pub const _SC_LONG_BIT : _bindgen_ty_2 = 106 ; pub const _SC_WORD_BIT : _bindgen_ty_2 = 107 ; pub const _SC_MB_LEN_MAX : _bindgen_ty_2 = 108 ; pub const _SC_NZERO : _bindgen_ty_2 = 109 ; pub const _SC_SSIZE_MAX : _bindgen_ty_2 = 110 ; pub const _SC_SCHAR_MAX : _bindgen_ty_2 = 111 ; pub const _SC_SCHAR_MIN : _bindgen_ty_2 = 112 ; pub const _SC_SHRT_MAX : _bindgen_ty_2 = 113 ; pub const _SC_SHRT_MIN : _bindgen_ty_2 = 114 ; pub const _SC_UCHAR_MAX : _bindgen_ty_2 = 115 ; pub const _SC_UINT_MAX : _bindgen_ty_2 = 116 ; pub const _SC_ULONG_MAX : _bindgen_ty_2 = 117 ; pub const _SC_USHRT_MAX : _bindgen_ty_2 = 118 ; pub const _SC_NL_ARGMAX : _bindgen_ty_2 = 119 ; pub const _SC_NL_LANGMAX : _bindgen_ty_2 = 120 ; pub const _SC_NL_MSGMAX : _bindgen_ty_2 = 121 ; pub const _SC_NL_NMAX : _bindgen_ty_2 = 122 ; pub const _SC_NL_SETMAX : _bindgen_ty_2 = 123 ; pub const _SC_NL_TEXTMAX : _bindgen_ty_2 = 124 ; pub const _SC_XBS5_ILP32_OFF32 : _bindgen_ty_2 = 125 ; pub const _SC_XBS5_ILP32_OFFBIG : _bindgen_ty_2 = 126 ; pub const _SC_XBS5_LP64_OFF64 : _bindgen_ty_2 = 127 ; pub const _SC_XBS5_LPBIG_OFFBIG : _bindgen_ty_2 = 128 ; pub const _SC_XOPEN_LEGACY : _bindgen_ty_2 = 129 ; pub const _SC_XOPEN_REALTIME : _bindgen_ty_2 = 130 ; pub const _SC_XOPEN_REALTIME_THREADS : _bindgen_ty_2 = 131 ; pub const _SC_ADVISORY_INFO : _bindgen_ty_2 = 132 ; pub const _SC_BARRIERS : _bindgen_ty_2 = 133 ; pub const _SC_BASE : _bindgen_ty_2 = 134 ; pub const _SC_C_LANG_SUPPORT : _bindgen_ty_2 = 135 ; pub const _SC_C_LANG_SUPPORT_R : _bindgen_ty_2 = 136 ; pub const _SC_CLOCK_SELECTION : _bindgen_ty_2 = 137 ; pub const _SC_CPUTIME : _bindgen_ty_2 = 138 ; pub const _SC_THREAD_CPUTIME : _bindgen_ty_2 = 139 ; pub const _SC_DEVICE_IO : _bindgen_ty_2 = 140 ; pub const _SC_DEVICE_SPECIFIC : _bindgen_ty_2 = 141 ; pub const _SC_DEVICE_SPECIFIC_R : _bindgen_ty_2 = 142 ; pub const _SC_FD_MGMT : _bindgen_ty_2 = 143 ; pub const _SC_FIFO : _bindgen_ty_2 = 144 ; pub const _SC_PIPE : _bindgen_ty_2 = 145 ; pub const _SC_FILE_ATTRIBUTES : _bindgen_ty_2 = 146 ; pub const _SC_FILE_LOCKING : _bindgen_ty_2 = 147 ; pub const _SC_FILE_SYSTEM : _bindgen_ty_2 = 148 ; pub const _SC_MONOTONIC_CLOCK : _bindgen_ty_2 = 149 ; pub const _SC_MULTI_PROCESS : _bindgen_ty_2 = 150 ; pub const _SC_SINGLE_PROCESS : _bindgen_ty_2 = 151 ; pub const _SC_NETWORKING : _bindgen_ty_2 = 152 ; pub const _SC_READER_WRITER_LOCKS : _bindgen_ty_2 = 153 ; pub const _SC_SPIN_LOCKS : _bindgen_ty_2 = 154 ; pub const _SC_REGEXP : _bindgen_ty_2 = 155 ; pub const _SC_REGEX_VERSION : _bindgen_ty_2 = 156 ; pub const _SC_SHELL : _bindgen_ty_2 = 157 ; pub const _SC_SIGNALS : _bindgen_ty_2 = 158 ; pub const _SC_SPAWN : _bindgen_ty_2 = 159 ; pub const _SC_SPORADIC_SERVER : _bindgen_ty_2 = 160 ; pub const _SC_THREAD_SPORADIC_SERVER : _bindgen_ty_2 = 161 ; pub const _SC_SYSTEM_DATABASE : _bindgen_ty_2 = 162 ; pub const _SC_SYSTEM_DATABASE_R : _bindgen_ty_2 = 163 ; pub const _SC_TIMEOUTS : _bindgen_ty_2 = 164 ; pub const _SC_TYPED_MEMORY_OBJECTS : _bindgen_ty_2 = 165 ; pub const _SC_USER_GROUPS : _bindgen_ty_2 = 166 ; pub const _SC_USER_GROUPS_R : _bindgen_ty_2 = 167 ; pub const _SC_2_PBS : _bindgen_ty_2 = 168 ; pub const _SC_2_PBS_ACCOUNTING : _bindgen_ty_2 = 169 ; pub const _SC_2_PBS_LOCATE : _bindgen_ty_2 = 170 ; pub const _SC_2_PBS_MESSAGE : _bindgen_ty_2 = 171 ; pub const _SC_2_PBS_TRACK : _bindgen_ty_2 = 172 ; pub const _SC_SYMLOOP_MAX : _bindgen_ty_2 = 173 ; pub const _SC_STREAMS : _bindgen_ty_2 = 174 ; pub const _SC_2_PBS_CHECKPOINT : _bindgen_ty_2 = 175 ; pub const _SC_V6_ILP32_OFF32 : _bindgen_ty_2 = 176 ; pub const _SC_V6_ILP32_OFFBIG : _bindgen_ty_2 = 177 ; pub const _SC_V6_LP64_OFF64 : _bindgen_ty_2 = 178 ; pub const _SC_V6_LPBIG_OFFBIG : _bindgen_ty_2 = 179 ; pub const _SC_HOST_NAME_MAX : _bindgen_ty_2 = 180 ; pub const _SC_TRACE : _bindgen_ty_2 = 181 ; pub const _SC_TRACE_EVENT_FILTER : _bindgen_ty_2 = 182 ; pub const _SC_TRACE_INHERIT : _bindgen_ty_2 = 183 ; pub const _SC_TRACE_LOG : _bindgen_ty_2 = 184 ; pub const _SC_LEVEL1_ICACHE_SIZE : _bindgen_ty_2 = 185 ; pub const _SC_LEVEL1_ICACHE_ASSOC : _bindgen_ty_2 = 186 ; pub const _SC_LEVEL1_ICACHE_LINESIZE : _bindgen_ty_2 = 187 ; pub const _SC_LEVEL1_DCACHE_SIZE : _bindgen_ty_2 = 188 ; pub const _SC_LEVEL1_DCACHE_ASSOC : _bindgen_ty_2 = 189 ; pub const _SC_LEVEL1_DCACHE_LINESIZE : _bindgen_ty_2 = 190 ; pub const _SC_LEVEL2_CACHE_SIZE : _bindgen_ty_2 = 191 ; pub const _SC_LEVEL2_CACHE_ASSOC : _bindgen_ty_2 = 192 ; pub const _SC_LEVEL2_CACHE_LINESIZE : _bindgen_ty_2 = 193 ; pub const _SC_LEVEL3_CACHE_SIZE : _bindgen_ty_2 = 194 ; pub const _SC_LEVEL3_CACHE_ASSOC : _bindgen_ty_2 = 195 ; pub const _SC_LEVEL3_CACHE_LINESIZE : _bindgen_ty_2 = 196 ; pub const _SC_LEVEL4_CACHE_SIZE : _bindgen_ty_2 = 197 ; pub const _SC_LEVEL4_CACHE_ASSOC : _bindgen_ty_2 = 198 ; pub const _SC_LEVEL4_CACHE_LINESIZE : _bindgen_ty_2 = 199 ; pub const _SC_IPV6 : _bindgen_ty_2 = 235 ; pub const _SC_RAW_SOCKETS : _bindgen_ty_2 = 236 ; pub const _SC_V7_ILP32_OFF32 : _bindgen_ty_2 = 237 ; pub const _SC_V7_ILP32_OFFBIG : _bindgen_ty_2 = 238 ; pub const _SC_V7_LP64_OFF64 : _bindgen_ty_2 = 239 ; pub const _SC_V7_LPBIG_OFFBIG : _bindgen_ty_2 = 240 ; pub const _SC_SS_REPL_MAX : _bindgen_ty_2 = 241 ; pub const _SC_TRACE_EVENT_NAME_MAX : _bindgen_ty_2 = 242 ; pub const _SC_TRACE_NAME_MAX : _bindgen_ty_2 = 243 ; pub const _SC_TRACE_SYS_MAX : _bindgen_ty_2 = 244 ; pub const _SC_TRACE_USER_EVENT_MAX : _bindgen_ty_2 = 245 ; pub const _SC_XOPEN_STREAMS : _bindgen_ty_2 = 246 ; pub const _SC_THREAD_ROBUST_PRIO_INHERIT : _bindgen_ty_2 = 247 ; pub const _SC_THREAD_ROBUST_PRIO_PROTECT : _bindgen_ty_2 = 248 ; pub type _bindgen_ty_2 = :: std :: os :: raw :: c_uint ; pub const _CS_PATH : _bindgen_ty_3 = 0 ; pub const _CS_V6_WIDTH_RESTRICTED_ENVS : _bindgen_ty_3 = 1 ; pub const _CS_GNU_LIBC_VERSION : _bindgen_ty_3 = 2 ; pub const _CS_GNU_LIBPTHREAD_VERSION : _bindgen_ty_3 = 3 ; pub const _CS_V5_WIDTH_RESTRICTED_ENVS : _bindgen_ty_3 = 4 ; pub const _CS_V7_WIDTH_RESTRICTED_ENVS : _bindgen_ty_3 = 5 ; pub const _CS_LFS_CFLAGS : _bindgen_ty_3 = 1000 ; pub const _CS_LFS_LDFLAGS : _bindgen_ty_3 = 1001 ; pub const _CS_LFS_LIBS : _bindgen_ty_3 = 1002 ; pub const _CS_LFS_LINTFLAGS : _bindgen_ty_3 = 1003 ; pub const _CS_LFS64_CFLAGS : _bindgen_ty_3 = 1004 ; pub const _CS_LFS64_LDFLAGS : _bindgen_ty_3 = 1005 ; pub const _CS_LFS64_LIBS : _bindgen_ty_3 = 1006 ; pub const _CS_LFS64_LINTFLAGS : _bindgen_ty_3 = 1007 ; pub const _CS_XBS5_ILP32_OFF32_CFLAGS : _bindgen_ty_3 = 1100 ; pub const _CS_XBS5_ILP32_OFF32_LDFLAGS : _bindgen_ty_3 = 1101 ; pub const _CS_XBS5_ILP32_OFF32_LIBS : _bindgen_ty_3 = 1102 ; pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS : _bindgen_ty_3 = 1103 ; pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS : _bindgen_ty_3 = 1104 ; pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS : _bindgen_ty_3 = 1105 ; pub const _CS_XBS5_ILP32_OFFBIG_LIBS : _bindgen_ty_3 = 1106 ; pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS : _bindgen_ty_3 = 1107 ; pub const _CS_XBS5_LP64_OFF64_CFLAGS : _bindgen_ty_3 = 1108 ; pub const _CS_XBS5_LP64_OFF64_LDFLAGS : _bindgen_ty_3 = 1109 ; pub const _CS_XBS5_LP64_OFF64_LIBS : _bindgen_ty_3 = 1110 ; pub const _CS_XBS5_LP64_OFF64_LINTFLAGS : _bindgen_ty_3 = 1111 ; pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS : _bindgen_ty_3 = 1112 ; pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS : _bindgen_ty_3 = 1113 ; pub const _CS_XBS5_LPBIG_OFFBIG_LIBS : _bindgen_ty_3 = 1114 ; pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS : _bindgen_ty_3 = 1115 ; pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS : _bindgen_ty_3 = 1116 ; pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS : _bindgen_ty_3 = 1117 ; pub const _CS_POSIX_V6_ILP32_OFF32_LIBS : _bindgen_ty_3 = 1118 ; pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS : _bindgen_ty_3 = 1119 ; pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS : _bindgen_ty_3 = 1120 ; pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS : _bindgen_ty_3 = 1121 ; pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS : _bindgen_ty_3 = 1122 ; pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS : _bindgen_ty_3 = 1123 ; pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS : _bindgen_ty_3 = 1124 ; pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS : _bindgen_ty_3 = 1125 ; pub const _CS_POSIX_V6_LP64_OFF64_LIBS : _bindgen_ty_3 = 1126 ; pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS : _bindgen_ty_3 = 1127 ; pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS : _bindgen_ty_3 = 1128 ; pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS : _bindgen_ty_3 = 1129 ; pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS : _bindgen_ty_3 = 1130 ; pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS : _bindgen_ty_3 = 1131 ; pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS : _bindgen_ty_3 = 1132 ; pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS : _bindgen_ty_3 = 1133 ; pub const _CS_POSIX_V7_ILP32_OFF32_LIBS : _bindgen_ty_3 = 1134 ; pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS : _bindgen_ty_3 = 1135 ; pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS : _bindgen_ty_3 = 1136 ; pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS : _bindgen_ty_3 = 1137 ; pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS : _bindgen_ty_3 = 1138 ; pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS : _bindgen_ty_3 = 1139 ; pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS : _bindgen_ty_3 = 1140 ; pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS : _bindgen_ty_3 = 1141 ; pub const _CS_POSIX_V7_LP64_OFF64_LIBS : _bindgen_ty_3 = 1142 ; pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS : _bindgen_ty_3 = 1143 ; pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS : _bindgen_ty_3 = 1144 ; pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS : _bindgen_ty_3 = 1145 ; pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS : _bindgen_ty_3 = 1146 ; pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS : _bindgen_ty_3 = 1147 ; pub const _CS_V6_ENV : _bindgen_ty_3 = 1148 ; pub const _CS_V7_ENV : _bindgen_ty_3 = 1149 ; pub type _bindgen_ty_3 = :: std :: os :: raw :: c_uint ; extern "C" {
 pub fn pathconf ( __path : * const :: std :: os :: raw :: c_char , __name : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn fpathconf ( __fd : :: std :: os :: raw :: c_int , __name : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn sysconf ( __name : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn confstr ( __name : :: std :: os :: raw :: c_int , __buf : * mut :: std :: os :: raw :: c_char , __len : usize , ) -> usize ; 
} extern "C" {
 pub fn getpid ( ) -> __pid_t ; 
} extern "C" {
 pub fn getppid ( ) -> __pid_t ; 
} extern "C" {
 pub fn getpgrp ( ) -> __pid_t ; 
} extern "C" {
 pub fn __getpgid ( __pid : __pid_t , ) -> __pid_t ; 
} extern "C" {
 pub fn getpgid ( __pid : __pid_t , ) -> __pid_t ; 
} extern "C" {
 pub fn setpgid ( __pid : __pid_t , __pgid : __pid_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn setpgrp ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn setsid ( ) -> __pid_t ; 
} extern "C" {
 pub fn getsid ( __pid : __pid_t , ) -> __pid_t ; 
} extern "C" {
 pub fn getuid ( ) -> __uid_t ; 
} extern "C" {
 pub fn geteuid ( ) -> __uid_t ; 
} extern "C" {
 pub fn getgid ( ) -> __gid_t ; 
} extern "C" {
 pub fn getegid ( ) -> __gid_t ; 
} extern "C" {
 pub fn getgroups ( __size : :: std :: os :: raw :: c_int , __list : * mut __gid_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn setuid ( __uid : __uid_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn setreuid ( __ruid : __uid_t , __euid : __uid_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn seteuid ( __uid : __uid_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn setgid ( __gid : __gid_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn setregid ( __rgid : __gid_t , __egid : __gid_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn setegid ( __gid : __gid_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fork ( ) -> __pid_t ; 
} extern "C" {
 pub fn vfork ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn ttyname ( __fd : :: std :: os :: raw :: c_int , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn ttyname_r ( __fd : :: std :: os :: raw :: c_int , __buf : * mut :: std :: os :: raw :: c_char , __buflen : usize , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn isatty ( __fd : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn ttyslot ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn link ( __from : * const :: std :: os :: raw :: c_char , __to : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn linkat ( __fromfd : :: std :: os :: raw :: c_int , __from : * const :: std :: os :: raw :: c_char , __tofd : :: std :: os :: raw :: c_int , __to : * const :: std :: os :: raw :: c_char , __flags : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn symlink ( __from : * const :: std :: os :: raw :: c_char , __to : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn readlink ( __path : * const :: std :: os :: raw :: c_char , __buf : * mut :: std :: os :: raw :: c_char , __len : usize , ) -> isize ; 
} extern "C" {
 pub fn symlinkat ( __from : * const :: std :: os :: raw :: c_char , __tofd : :: std :: os :: raw :: c_int , __to : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn readlinkat ( __fd : :: std :: os :: raw :: c_int , __path : * const :: std :: os :: raw :: c_char , __buf : * mut :: std :: os :: raw :: c_char , __len : usize , ) -> isize ; 
} extern "C" {
 pub fn unlink ( __name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn unlinkat ( __fd : :: std :: os :: raw :: c_int , __name : * const :: std :: os :: raw :: c_char , __flag : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn rmdir ( __path : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn tcgetpgrp ( __fd : :: std :: os :: raw :: c_int , ) -> __pid_t ; 
} extern "C" {
 pub fn tcsetpgrp ( __fd : :: std :: os :: raw :: c_int , __pgrp_id : __pid_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn getlogin ( ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn getlogin_r ( __name : * mut :: std :: os :: raw :: c_char , __name_len : usize , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn setlogin ( __name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 # [ link_name = "\u{1}optarg" ] 
 pub static mut  optarg  :  * mut :: std :: os :: raw :: c_char ;
} extern "C" {
 # [ link_name = "\u{1}optind" ] 
 pub static mut  optind  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}opterr" ] 
 pub static mut  opterr  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}optopt" ] 
 pub static mut  optopt  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 pub fn getopt ( ___argc : :: std :: os :: raw :: c_int , ___argv : * const * const :: std :: os :: raw :: c_char , __shortopts : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn gethostname ( __name : * mut :: std :: os :: raw :: c_char , __len : usize , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn sethostname ( __name : * const :: std :: os :: raw :: c_char , __len : usize , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn sethostid ( __id : :: std :: os :: raw :: c_long , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn getdomainname ( __name : * mut :: std :: os :: raw :: c_char , __len : usize , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn setdomainname ( __name : * const :: std :: os :: raw :: c_char , __len : usize , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn vhangup ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn revoke ( __file : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn profil ( __sample_buffer : * mut :: std :: os :: raw :: c_ushort , __size : usize , __offset : usize , __scale : :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn acct ( __name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn getusershell ( ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn endusershell ( ) ; 
} extern "C" {
 pub fn setusershell ( ) ; 
} extern "C" {
 pub fn daemon ( __nochdir : :: std :: os :: raw :: c_int , __noclose : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn chroot ( __path : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn getpass ( __prompt : * const :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn fsync ( __fd : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn gethostid ( ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn sync ( ) ; 
} extern "C" {
 pub fn getpagesize ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn getdtablesize ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn truncate ( __file : * const :: std :: os :: raw :: c_char , __length : __off_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn ftruncate ( __fd : :: std :: os :: raw :: c_int , __length : __off_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn brk ( __addr : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn sbrk ( __delta : isize , ) -> * mut :: std :: os :: raw :: c_void ; 
} extern "C" {
 pub fn syscall ( __sysno : :: std :: os :: raw :: c_long , ... ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn lockf ( __fd : :: std :: os :: raw :: c_int , __cmd : :: std :: os :: raw :: c_int , __len : __off_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fdatasync ( __fildes : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __sigismember ( arg1 : * const __sigset_t , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __sigaddset ( arg1 : * mut __sigset_t , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __sigdelset ( arg1 : * mut __sigset_t , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} pub type sig_atomic_t = __sig_atomic_t ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union sigval { pub sival_int : :: std :: os :: raw :: c_int , pub sival_ptr : * mut :: std :: os :: raw :: c_void , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout_sigval ( ) { assert_eq ! ( :: std :: mem :: size_of :: < sigval > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( sigval ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < sigval > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( sigval ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigval ) ) . sival_int as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( sigval ) , "::" , stringify ! ( sival_int ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigval ) ) . sival_ptr as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( sigval ) , "::" , stringify ! ( sival_ptr ) ) ) ; } pub type sigval_t = sigval ; pub type __sigchld_clock_t = __clock_t ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct siginfo_t { pub si_signo : :: std :: os :: raw :: c_int , pub si_errno : :: std :: os :: raw :: c_int , pub si_code : :: std :: os :: raw :: c_int , pub _sifields : siginfo_t__bindgen_ty_1 , } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union siginfo_t__bindgen_ty_1 { pub _pad : [ :: std :: os :: raw :: c_int ; 28usize ] , pub _kill : siginfo_t__bindgen_ty_1__bindgen_ty_1 , pub _timer : siginfo_t__bindgen_ty_1__bindgen_ty_2 , pub _rt : siginfo_t__bindgen_ty_1__bindgen_ty_3 , pub _sigchld : siginfo_t__bindgen_ty_1__bindgen_ty_4 , pub _sigfault : siginfo_t__bindgen_ty_1__bindgen_ty_5 , pub _sigpoll : siginfo_t__bindgen_ty_1__bindgen_ty_6 , pub _sigsys : siginfo_t__bindgen_ty_1__bindgen_ty_7 , _bindgen_union_align : [ u64 ; 14usize ] , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct siginfo_t__bindgen_ty_1__bindgen_ty_1 { pub si_pid : __pid_t , pub si_uid : __uid_t , } # [ test ] fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_1 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_1 ) ) . si_pid as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! ( si_pid ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_1 ) ) . si_uid as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! ( si_uid ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct siginfo_t__bindgen_ty_1__bindgen_ty_2 { pub si_tid : :: std :: os :: raw :: c_int , pub si_overrun : :: std :: os :: raw :: c_int , pub si_sigval : sigval_t , } # [ test ] fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_2 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_2 > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_2 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_2 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_2 ) ) . si_tid as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_2 ) , "::" , stringify ! ( si_tid ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_2 ) ) . si_overrun as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_2 ) , "::" , stringify ! ( si_overrun ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_2 ) ) . si_sigval as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_2 ) , "::" , stringify ! ( si_sigval ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct siginfo_t__bindgen_ty_1__bindgen_ty_3 { pub si_pid : __pid_t , pub si_uid : __uid_t , pub si_sigval : sigval_t , } # [ test ] fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_3 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_3 > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_3 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_3 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_3 ) ) . si_pid as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_3 ) , "::" , stringify ! ( si_pid ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_3 ) ) . si_uid as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_3 ) , "::" , stringify ! ( si_uid ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_3 ) ) . si_sigval as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_3 ) , "::" , stringify ! ( si_sigval ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct siginfo_t__bindgen_ty_1__bindgen_ty_4 { pub si_pid : __pid_t , pub si_uid : __uid_t , pub si_status : :: std :: os :: raw :: c_int , pub si_utime : __sigchld_clock_t , pub si_stime : __sigchld_clock_t , } # [ test ] fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_4 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_4 > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_4 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_4 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_4 ) ) . si_pid as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_4 ) , "::" , stringify ! ( si_pid ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_4 ) ) . si_uid as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_4 ) , "::" , stringify ! ( si_uid ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_4 ) ) . si_status as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_4 ) , "::" , stringify ! ( si_status ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_4 ) ) . si_utime as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_4 ) , "::" , stringify ! ( si_utime ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_4 ) ) . si_stime as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_4 ) , "::" , stringify ! ( si_stime ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5 { pub si_addr : * mut :: std :: os :: raw :: c_void , pub si_addr_lsb : :: std :: os :: raw :: c_short , } # [ test ] fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_5 > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_5 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_5 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_5 ) ) . si_addr as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_5 ) , "::" , stringify ! ( si_addr ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_5 ) ) . si_addr_lsb as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_5 ) , "::" , stringify ! ( si_addr_lsb ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct siginfo_t__bindgen_ty_1__bindgen_ty_6 { pub si_band : :: std :: os :: raw :: c_long , pub si_fd : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_6 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_6 > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_6 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_6 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_6 ) ) . si_band as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_6 ) , "::" , stringify ! ( si_band ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_6 ) ) . si_fd as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_6 ) , "::" , stringify ! ( si_fd ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct siginfo_t__bindgen_ty_1__bindgen_ty_7 { pub _call_addr : * mut :: std :: os :: raw :: c_void , pub _syscall : :: std :: os :: raw :: c_int , pub _arch : :: std :: os :: raw :: c_uint , } # [ test ] fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_7 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_7 > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_7 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_7 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_7 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_7 ) ) . _call_addr as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_7 ) , "::" , stringify ! ( _call_addr ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_7 ) ) . _syscall as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_7 ) , "::" , stringify ! ( _syscall ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_7 ) ) . _arch as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_7 ) , "::" , stringify ! ( _arch ) ) ) ; } # [ test ] fn bindgen_test_layout_siginfo_t__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < siginfo_t__bindgen_ty_1 > ( ) , 112usize , concat ! ( "Size of: " , stringify ! ( siginfo_t__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < siginfo_t__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( siginfo_t__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _pad as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1 ) , "::" , stringify ! ( _pad ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _kill as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1 ) , "::" , stringify ! ( _kill ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _timer as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1 ) , "::" , stringify ! ( _timer ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _rt as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1 ) , "::" , stringify ! ( _rt ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _sigchld as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1 ) , "::" , stringify ! ( _sigchld ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _sigfault as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1 ) , "::" , stringify ! ( _sigfault ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _sigpoll as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1 ) , "::" , stringify ! ( _sigpoll ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _sigsys as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1 ) , "::" , stringify ! ( _sigsys ) ) ) ; } # [ test ] fn bindgen_test_layout_siginfo_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < siginfo_t > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( siginfo_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < siginfo_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( siginfo_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t ) ) . si_signo as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t ) , "::" , stringify ! ( si_signo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t ) ) . si_errno as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t ) , "::" , stringify ! ( si_errno ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t ) ) . si_code as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t ) , "::" , stringify ! ( si_code ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const siginfo_t ) ) . _sifields as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( siginfo_t ) , "::" , stringify ! ( _sifields ) ) ) ; } pub const SI_ASYNCNL : _bindgen_ty_4 = -60 ; pub const SI_TKILL : _bindgen_ty_4 = -6 ; pub const SI_SIGIO : _bindgen_ty_4 = -5 ; pub const SI_ASYNCIO : _bindgen_ty_4 = -4 ; pub const SI_MESGQ : _bindgen_ty_4 = -3 ; pub const SI_TIMER : _bindgen_ty_4 = -2 ; pub const SI_QUEUE : _bindgen_ty_4 = -1 ; pub const SI_USER : _bindgen_ty_4 = 0 ; pub const SI_KERNEL : _bindgen_ty_4 = 128 ; pub type _bindgen_ty_4 = :: std :: os :: raw :: c_int ; pub const ILL_ILLOPC : _bindgen_ty_5 = 1 ; pub const ILL_ILLOPN : _bindgen_ty_5 = 2 ; pub const ILL_ILLADR : _bindgen_ty_5 = 3 ; pub const ILL_ILLTRP : _bindgen_ty_5 = 4 ; pub const ILL_PRVOPC : _bindgen_ty_5 = 5 ; pub const ILL_PRVREG : _bindgen_ty_5 = 6 ; pub const ILL_COPROC : _bindgen_ty_5 = 7 ; pub const ILL_BADSTK : _bindgen_ty_5 = 8 ; pub type _bindgen_ty_5 = :: std :: os :: raw :: c_uint ; pub const FPE_INTDIV : _bindgen_ty_6 = 1 ; pub const FPE_INTOVF : _bindgen_ty_6 = 2 ; pub const FPE_FLTDIV : _bindgen_ty_6 = 3 ; pub const FPE_FLTOVF : _bindgen_ty_6 = 4 ; pub const FPE_FLTUND : _bindgen_ty_6 = 5 ; pub const FPE_FLTRES : _bindgen_ty_6 = 6 ; pub const FPE_FLTINV : _bindgen_ty_6 = 7 ; pub const FPE_FLTSUB : _bindgen_ty_6 = 8 ; pub type _bindgen_ty_6 = :: std :: os :: raw :: c_uint ; pub const SEGV_MAPERR : _bindgen_ty_7 = 1 ; pub const SEGV_ACCERR : _bindgen_ty_7 = 2 ; pub type _bindgen_ty_7 = :: std :: os :: raw :: c_uint ; pub const BUS_ADRALN : _bindgen_ty_8 = 1 ; pub const BUS_ADRERR : _bindgen_ty_8 = 2 ; pub const BUS_OBJERR : _bindgen_ty_8 = 3 ; pub const BUS_MCEERR_AR : _bindgen_ty_8 = 4 ; pub const BUS_MCEERR_AO : _bindgen_ty_8 = 5 ; pub type _bindgen_ty_8 = :: std :: os :: raw :: c_uint ; pub const TRAP_BRKPT : _bindgen_ty_9 = 1 ; pub const TRAP_TRACE : _bindgen_ty_9 = 2 ; pub type _bindgen_ty_9 = :: std :: os :: raw :: c_uint ; pub const CLD_EXITED : _bindgen_ty_10 = 1 ; pub const CLD_KILLED : _bindgen_ty_10 = 2 ; pub const CLD_DUMPED : _bindgen_ty_10 = 3 ; pub const CLD_TRAPPED : _bindgen_ty_10 = 4 ; pub const CLD_STOPPED : _bindgen_ty_10 = 5 ; pub const CLD_CONTINUED : _bindgen_ty_10 = 6 ; pub type _bindgen_ty_10 = :: std :: os :: raw :: c_uint ; pub const POLL_IN : _bindgen_ty_11 = 1 ; pub const POLL_OUT : _bindgen_ty_11 = 2 ; pub const POLL_MSG : _bindgen_ty_11 = 3 ; pub const POLL_ERR : _bindgen_ty_11 = 4 ; pub const POLL_PRI : _bindgen_ty_11 = 5 ; pub const POLL_HUP : _bindgen_ty_11 = 6 ; pub type _bindgen_ty_11 = :: std :: os :: raw :: c_uint ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct sigevent { pub sigev_value : sigval_t , pub sigev_signo : :: std :: os :: raw :: c_int , pub sigev_notify : :: std :: os :: raw :: c_int , pub _sigev_un : sigevent__bindgen_ty_1 , } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union sigevent__bindgen_ty_1 { pub _pad : [ :: std :: os :: raw :: c_int ; 12usize ] , pub _tid : __pid_t , pub _sigev_thread : sigevent__bindgen_ty_1__bindgen_ty_1 , _bindgen_union_align : [ u64 ; 6usize ] , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct sigevent__bindgen_ty_1__bindgen_ty_1 { pub _function : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : sigval_t ) > , pub _attribute : * mut pthread_attr_t , } # [ test ] fn bindgen_test_layout_sigevent__bindgen_ty_1__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < sigevent__bindgen_ty_1__bindgen_ty_1 > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( sigevent__bindgen_ty_1__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < sigevent__bindgen_ty_1__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( sigevent__bindgen_ty_1__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigevent__bindgen_ty_1__bindgen_ty_1 ) ) . _function as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( sigevent__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! ( _function ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigevent__bindgen_ty_1__bindgen_ty_1 ) ) . _attribute as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( sigevent__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! ( _attribute ) ) ) ; } # [ test ] fn bindgen_test_layout_sigevent__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < sigevent__bindgen_ty_1 > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( sigevent__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < sigevent__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( sigevent__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigevent__bindgen_ty_1 ) ) . _pad as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( sigevent__bindgen_ty_1 ) , "::" , stringify ! ( _pad ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigevent__bindgen_ty_1 ) ) . _tid as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( sigevent__bindgen_ty_1 ) , "::" , stringify ! ( _tid ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigevent__bindgen_ty_1 ) ) . _sigev_thread as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( sigevent__bindgen_ty_1 ) , "::" , stringify ! ( _sigev_thread ) ) ) ; } # [ test ] fn bindgen_test_layout_sigevent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < sigevent > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( sigevent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < sigevent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( sigevent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigevent ) ) . sigev_value as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( sigevent ) , "::" , stringify ! ( sigev_value ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigevent ) ) . sigev_signo as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( sigevent ) , "::" , stringify ! ( sigev_signo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigevent ) ) . sigev_notify as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( sigevent ) , "::" , stringify ! ( sigev_notify ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigevent ) ) . _sigev_un as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( sigevent ) , "::" , stringify ! ( _sigev_un ) ) ) ; } pub type sigevent_t = sigevent ; pub const SIGEV_SIGNAL : _bindgen_ty_12 = 0 ; pub const SIGEV_NONE : _bindgen_ty_12 = 1 ; pub const SIGEV_THREAD : _bindgen_ty_12 = 2 ; pub const SIGEV_THREAD_ID : _bindgen_ty_12 = 4 ; pub type _bindgen_ty_12 = :: std :: os :: raw :: c_uint ; pub type __sighandler_t = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : :: std :: os :: raw :: c_int ) > ; extern "C" {
 pub fn __sysv_signal ( __sig : :: std :: os :: raw :: c_int , __handler : __sighandler_t , ) -> __sighandler_t ; 
} extern "C" {
 pub fn signal ( __sig : :: std :: os :: raw :: c_int , __handler : __sighandler_t , ) -> __sighandler_t ; 
} extern "C" {
 pub fn kill ( __pid : __pid_t , __sig : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn killpg ( __pgrp : __pid_t , __sig : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn raise ( __sig : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn ssignal ( __sig : :: std :: os :: raw :: c_int , __handler : __sighandler_t , ) -> __sighandler_t ; 
} extern "C" {
 pub fn gsignal ( __sig : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn psignal ( __sig : :: std :: os :: raw :: c_int , __s : * const :: std :: os :: raw :: c_char , ) ; 
} extern "C" {
 pub fn psiginfo ( __pinfo : * const siginfo_t , __s : * const :: std :: os :: raw :: c_char , ) ; 
} extern "C" {
 pub fn __sigpause ( __sig_or_mask : :: std :: os :: raw :: c_int , __is_sig : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn sigblock ( __mask : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn sigsetmask ( __mask : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn siggetmask ( ) -> :: std :: os :: raw :: c_int ; 
} pub type sig_t = __sighandler_t ; extern "C" {
 pub fn sigemptyset ( __set : * mut sigset_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn sigfillset ( __set : * mut sigset_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn sigaddset ( __set : * mut sigset_t , __signo : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn sigdelset ( __set : * mut sigset_t , __signo : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn sigismember ( __set : * const sigset_t , __signo : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct sigaction { pub __sigaction_handler : sigaction__bindgen_ty_1 , pub sa_mask : __sigset_t , pub sa_flags : :: std :: os :: raw :: c_int , pub sa_restorer : :: std :: option :: Option < unsafe extern "C" fn ( ) > , } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union sigaction__bindgen_ty_1 { pub sa_handler : __sighandler_t , pub sa_sigaction : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut siginfo_t , arg3 : * mut :: std :: os :: raw :: c_void ) > , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout_sigaction__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < sigaction__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( sigaction__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < sigaction__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( sigaction__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigaction__bindgen_ty_1 ) ) . sa_handler as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( sigaction__bindgen_ty_1 ) , "::" , stringify ! ( sa_handler ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigaction__bindgen_ty_1 ) ) . sa_sigaction as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( sigaction__bindgen_ty_1 ) , "::" , stringify ! ( sa_sigaction ) ) ) ; } # [ test ] fn bindgen_test_layout_sigaction ( ) { assert_eq ! ( :: std :: mem :: size_of :: < sigaction > ( ) , 152usize , concat ! ( "Size of: " , stringify ! ( sigaction ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < sigaction > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( sigaction ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigaction ) ) . __sigaction_handler as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( sigaction ) , "::" , stringify ! ( __sigaction_handler ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigaction ) ) . sa_mask as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( sigaction ) , "::" , stringify ! ( sa_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigaction ) ) . sa_flags as * const _ as usize } , 136usize , concat ! ( "Alignment of field: " , stringify ! ( sigaction ) , "::" , stringify ! ( sa_flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigaction ) ) . sa_restorer as * const _ as usize } , 144usize , concat ! ( "Alignment of field: " , stringify ! ( sigaction ) , "::" , stringify ! ( sa_restorer ) ) ) ; } extern "C" {
 pub fn sigprocmask ( __how : :: std :: os :: raw :: c_int , __set : * const sigset_t , __oset : * mut sigset_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn sigsuspend ( __set : * const sigset_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn sigaction ( __sig : :: std :: os :: raw :: c_int , __act : * const sigaction , __oact : * mut sigaction , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn sigpending ( __set : * mut sigset_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn sigwait ( __set : * const sigset_t , __sig : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn sigwaitinfo ( __set : * const sigset_t , __info : * mut siginfo_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn sigtimedwait ( __set : * const sigset_t , __info : * mut siginfo_t , __timeout : * const timespec , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn sigqueue ( __pid : __pid_t , __sig : :: std :: os :: raw :: c_int , __val : sigval , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 # [ link_name = "\u{1}_sys_siglist" ] 
 pub static mut  _sys_siglist  :  [ * const :: std :: os :: raw :: c_char ; 65usize ] ;
} extern "C" {
 # [ link_name = "\u{1}sys_siglist" ] 
 pub static mut  sys_siglist  :  [ * const :: std :: os :: raw :: c_char ; 65usize ] ;
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct sigvec { pub sv_handler : __sighandler_t , pub sv_mask : :: std :: os :: raw :: c_int , pub sv_flags : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_sigvec ( ) { assert_eq ! ( :: std :: mem :: size_of :: < sigvec > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( sigvec ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < sigvec > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( sigvec ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigvec ) ) . sv_handler as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( sigvec ) , "::" , stringify ! ( sv_handler ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigvec ) ) . sv_mask as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( sigvec ) , "::" , stringify ! ( sv_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigvec ) ) . sv_flags as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( sigvec ) , "::" , stringify ! ( sv_flags ) ) ) ; } extern "C" {
 pub fn sigvec ( __sig : :: std :: os :: raw :: c_int , __vec : * const sigvec , __ovec : * mut sigvec , ) -> :: std :: os :: raw :: c_int ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _fpx_sw_bytes { pub magic1 : __uint32_t , pub extended_size : __uint32_t , pub xstate_bv : __uint64_t , pub xstate_size : __uint32_t , pub padding : [ __uint32_t ; 7usize ] , } # [ test ] fn bindgen_test_layout__fpx_sw_bytes ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _fpx_sw_bytes > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( _fpx_sw_bytes ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _fpx_sw_bytes > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _fpx_sw_bytes ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _fpx_sw_bytes ) ) . magic1 as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _fpx_sw_bytes ) , "::" , stringify ! ( magic1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _fpx_sw_bytes ) ) . extended_size as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( _fpx_sw_bytes ) , "::" , stringify ! ( extended_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _fpx_sw_bytes ) ) . xstate_bv as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _fpx_sw_bytes ) , "::" , stringify ! ( xstate_bv ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _fpx_sw_bytes ) ) . xstate_size as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _fpx_sw_bytes ) , "::" , stringify ! ( xstate_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _fpx_sw_bytes ) ) . padding as * const _ as usize } , 20usize , concat ! ( "Alignment of field: " , stringify ! ( _fpx_sw_bytes ) , "::" , stringify ! ( padding ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _fpreg { pub significand : [ :: std :: os :: raw :: c_ushort ; 4usize ] , pub exponent : :: std :: os :: raw :: c_ushort , } # [ test ] fn bindgen_test_layout__fpreg ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _fpreg > ( ) , 10usize , concat ! ( "Size of: " , stringify ! ( _fpreg ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _fpreg > ( ) , 2usize , concat ! ( "Alignment of " , stringify ! ( _fpreg ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _fpreg ) ) . significand as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _fpreg ) , "::" , stringify ! ( significand ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _fpreg ) ) . exponent as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _fpreg ) , "::" , stringify ! ( exponent ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _fpxreg { pub significand : [ :: std :: os :: raw :: c_ushort ; 4usize ] , pub exponent : :: std :: os :: raw :: c_ushort , pub padding : [ :: std :: os :: raw :: c_ushort ; 3usize ] , } # [ test ] fn bindgen_test_layout__fpxreg ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _fpxreg > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _fpxreg ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _fpxreg > ( ) , 2usize , concat ! ( "Alignment of " , stringify ! ( _fpxreg ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _fpxreg ) ) . significand as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _fpxreg ) , "::" , stringify ! ( significand ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _fpxreg ) ) . exponent as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _fpxreg ) , "::" , stringify ! ( exponent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _fpxreg ) ) . padding as * const _ as usize } , 10usize , concat ! ( "Alignment of field: " , stringify ! ( _fpxreg ) , "::" , stringify ! ( padding ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _xmmreg { pub element : [ __uint32_t ; 4usize ] , } # [ test ] fn bindgen_test_layout__xmmreg ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _xmmreg > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _xmmreg ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _xmmreg > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _xmmreg ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _xmmreg ) ) . element as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _xmmreg ) , "::" , stringify ! ( element ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _fpstate { pub cwd : __uint16_t , pub swd : __uint16_t , pub ftw : __uint16_t , pub fop : __uint16_t , pub rip : __uint64_t , pub rdp : __uint64_t , pub mxcsr : __uint32_t , pub mxcr_mask : __uint32_t , pub _st : [ _fpxreg ; 8usize ] , pub _xmm : [ _xmmreg ; 16usize ] , pub padding : [ __uint32_t ; 24usize ] , } # [ test ] fn bindgen_test_layout__fpstate ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _fpstate > ( ) , 512usize , concat ! ( "Size of: " , stringify ! ( _fpstate ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _fpstate > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _fpstate ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _fpstate ) ) . cwd as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _fpstate ) , "::" , stringify ! ( cwd ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _fpstate ) ) . swd as * const _ as usize } , 2usize , concat ! ( "Alignment of field: " , stringify ! ( _fpstate ) , "::" , stringify ! ( swd ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _fpstate ) ) . ftw as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( _fpstate ) , "::" , stringify ! ( ftw ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _fpstate ) ) . fop as * const _ as usize } , 6usize , concat ! ( "Alignment of field: " , stringify ! ( _fpstate ) , "::" , stringify ! ( fop ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _fpstate ) ) . rip as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _fpstate ) , "::" , stringify ! ( rip ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _fpstate ) ) . rdp as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _fpstate ) , "::" , stringify ! ( rdp ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _fpstate ) ) . mxcsr as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _fpstate ) , "::" , stringify ! ( mxcsr ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _fpstate ) ) . mxcr_mask as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( _fpstate ) , "::" , stringify ! ( mxcr_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _fpstate ) ) . _st as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _fpstate ) , "::" , stringify ! ( _st ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _fpstate ) ) . _xmm as * const _ as usize } , 160usize , concat ! ( "Alignment of field: " , stringify ! ( _fpstate ) , "::" , stringify ! ( _xmm ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _fpstate ) ) . padding as * const _ as usize } , 416usize , concat ! ( "Alignment of field: " , stringify ! ( _fpstate ) , "::" , stringify ! ( padding ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct sigcontext { pub r8 : __uint64_t , pub r9 : __uint64_t , pub r10 : __uint64_t , pub r11 : __uint64_t , pub r12 : __uint64_t , pub r13 : __uint64_t , pub r14 : __uint64_t , pub r15 : __uint64_t , pub rdi : __uint64_t , pub rsi : __uint64_t , pub rbp : __uint64_t , pub rbx : __uint64_t , pub rdx : __uint64_t , pub rax : __uint64_t , pub rcx : __uint64_t , pub rsp : __uint64_t , pub rip : __uint64_t , pub eflags : __uint64_t , pub cs : :: std :: os :: raw :: c_ushort , pub gs : :: std :: os :: raw :: c_ushort , pub fs : :: std :: os :: raw :: c_ushort , pub __pad0 : :: std :: os :: raw :: c_ushort , pub err : __uint64_t , pub trapno : __uint64_t , pub oldmask : __uint64_t , pub cr2 : __uint64_t , pub __bindgen_anon_1 : sigcontext__bindgen_ty_1 , pub __reserved1 : [ __uint64_t ; 8usize ] , } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union sigcontext__bindgen_ty_1 { pub fpstate : * mut _fpstate , pub __fpstate_word : __uint64_t , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout_sigcontext__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < sigcontext__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( sigcontext__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < sigcontext__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( sigcontext__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext__bindgen_ty_1 ) ) . fpstate as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext__bindgen_ty_1 ) , "::" , stringify ! ( fpstate ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext__bindgen_ty_1 ) ) . __fpstate_word as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext__bindgen_ty_1 ) , "::" , stringify ! ( __fpstate_word ) ) ) ; } # [ test ] fn bindgen_test_layout_sigcontext ( ) { assert_eq ! ( :: std :: mem :: size_of :: < sigcontext > ( ) , 256usize , concat ! ( "Size of: " , stringify ! ( sigcontext ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < sigcontext > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( sigcontext ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . r8 as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( r8 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . r9 as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( r9 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . r10 as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( r10 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . r11 as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( r11 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . r12 as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( r12 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . r13 as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( r13 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . r14 as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( r14 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . r15 as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( r15 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . rdi as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( rdi ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . rsi as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( rsi ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . rbp as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( rbp ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . rbx as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( rbx ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . rdx as * const _ as usize } , 96usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( rdx ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . rax as * const _ as usize } , 104usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( rax ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . rcx as * const _ as usize } , 112usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( rcx ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . rsp as * const _ as usize } , 120usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( rsp ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . rip as * const _ as usize } , 128usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( rip ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . eflags as * const _ as usize } , 136usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( eflags ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . cs as * const _ as usize } , 144usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( cs ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . gs as * const _ as usize } , 146usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( gs ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . fs as * const _ as usize } , 148usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( fs ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . __pad0 as * const _ as usize } , 150usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( __pad0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . err as * const _ as usize } , 152usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( err ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . trapno as * const _ as usize } , 160usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( trapno ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . oldmask as * const _ as usize } , 168usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( oldmask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . cr2 as * const _ as usize } , 176usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( cr2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigcontext ) ) . __reserved1 as * const _ as usize } , 192usize , concat ! ( "Alignment of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( __reserved1 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _xsave_hdr { pub xstate_bv : __uint64_t , pub reserved1 : [ __uint64_t ; 2usize ] , pub reserved2 : [ __uint64_t ; 5usize ] , } # [ test ] fn bindgen_test_layout__xsave_hdr ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _xsave_hdr > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( _xsave_hdr ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _xsave_hdr > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _xsave_hdr ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _xsave_hdr ) ) . xstate_bv as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _xsave_hdr ) , "::" , stringify ! ( xstate_bv ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _xsave_hdr ) ) . reserved1 as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _xsave_hdr ) , "::" , stringify ! ( reserved1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _xsave_hdr ) ) . reserved2 as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _xsave_hdr ) , "::" , stringify ! ( reserved2 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _ymmh_state { pub ymmh_space : [ __uint32_t ; 64usize ] , } # [ test ] fn bindgen_test_layout__ymmh_state ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _ymmh_state > ( ) , 256usize , concat ! ( "Size of: " , stringify ! ( _ymmh_state ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _ymmh_state > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _ymmh_state ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ymmh_state ) ) . ymmh_space as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _ymmh_state ) , "::" , stringify ! ( ymmh_space ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _xstate { pub fpstate : _fpstate , pub xstate_hdr : _xsave_hdr , pub ymmh : _ymmh_state , } # [ test ] fn bindgen_test_layout__xstate ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _xstate > ( ) , 832usize , concat ! ( "Size of: " , stringify ! ( _xstate ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _xstate > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _xstate ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _xstate ) ) . fpstate as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _xstate ) , "::" , stringify ! ( fpstate ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _xstate ) ) . xstate_hdr as * const _ as usize } , 512usize , concat ! ( "Alignment of field: " , stringify ! ( _xstate ) , "::" , stringify ! ( xstate_hdr ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _xstate ) ) . ymmh as * const _ as usize } , 576usize , concat ! ( "Alignment of field: " , stringify ! ( _xstate ) , "::" , stringify ! ( ymmh ) ) ) ; } extern "C" {
 pub fn sigreturn ( __scp : * mut sigcontext , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn siginterrupt ( __sig : :: std :: os :: raw :: c_int , __interrupt : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct sigstack { pub ss_sp : * mut :: std :: os :: raw :: c_void , pub ss_onstack : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_sigstack ( ) { assert_eq ! ( :: std :: mem :: size_of :: < sigstack > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( sigstack ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < sigstack > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( sigstack ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigstack ) ) . ss_sp as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( sigstack ) , "::" , stringify ! ( ss_sp ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigstack ) ) . ss_onstack as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( sigstack ) , "::" , stringify ! ( ss_onstack ) ) ) ; } pub const SS_ONSTACK : _bindgen_ty_13 = 1 ; pub const SS_DISABLE : _bindgen_ty_13 = 2 ; pub type _bindgen_ty_13 = :: std :: os :: raw :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct sigaltstack { pub ss_sp : * mut :: std :: os :: raw :: c_void , pub ss_flags : :: std :: os :: raw :: c_int , pub ss_size : usize , } # [ test ] fn bindgen_test_layout_sigaltstack ( ) { assert_eq ! ( :: std :: mem :: size_of :: < sigaltstack > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( sigaltstack ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < sigaltstack > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( sigaltstack ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigaltstack ) ) . ss_sp as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( sigaltstack ) , "::" , stringify ! ( ss_sp ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigaltstack ) ) . ss_flags as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( sigaltstack ) , "::" , stringify ! ( ss_flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const sigaltstack ) ) . ss_size as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( sigaltstack ) , "::" , stringify ! ( ss_size ) ) ) ; } pub type stack_t = sigaltstack ; pub type greg_t = :: std :: os :: raw :: c_longlong ; pub type gregset_t = [ greg_t ; 23usize ] ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _libc_fpxreg { pub significand : [ :: std :: os :: raw :: c_ushort ; 4usize ] , pub exponent : :: std :: os :: raw :: c_ushort , pub padding : [ :: std :: os :: raw :: c_ushort ; 3usize ] , } # [ test ] fn bindgen_test_layout__libc_fpxreg ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _libc_fpxreg > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _libc_fpxreg ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _libc_fpxreg > ( ) , 2usize , concat ! ( "Alignment of " , stringify ! ( _libc_fpxreg ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _libc_fpxreg ) ) . significand as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _libc_fpxreg ) , "::" , stringify ! ( significand ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _libc_fpxreg ) ) . exponent as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _libc_fpxreg ) , "::" , stringify ! ( exponent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _libc_fpxreg ) ) . padding as * const _ as usize } , 10usize , concat ! ( "Alignment of field: " , stringify ! ( _libc_fpxreg ) , "::" , stringify ! ( padding ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _libc_xmmreg { pub element : [ __uint32_t ; 4usize ] , } # [ test ] fn bindgen_test_layout__libc_xmmreg ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _libc_xmmreg > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _libc_xmmreg ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _libc_xmmreg > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _libc_xmmreg ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _libc_xmmreg ) ) . element as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _libc_xmmreg ) , "::" , stringify ! ( element ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _libc_fpstate { pub cwd : __uint16_t , pub swd : __uint16_t , pub ftw : __uint16_t , pub fop : __uint16_t , pub rip : __uint64_t , pub rdp : __uint64_t , pub mxcsr : __uint32_t , pub mxcr_mask : __uint32_t , pub _st : [ _libc_fpxreg ; 8usize ] , pub _xmm : [ _libc_xmmreg ; 16usize ] , pub padding : [ __uint32_t ; 24usize ] , } # [ test ] fn bindgen_test_layout__libc_fpstate ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _libc_fpstate > ( ) , 512usize , concat ! ( "Size of: " , stringify ! ( _libc_fpstate ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _libc_fpstate > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _libc_fpstate ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _libc_fpstate ) ) . cwd as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::" , stringify ! ( cwd ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _libc_fpstate ) ) . swd as * const _ as usize } , 2usize , concat ! ( "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::" , stringify ! ( swd ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _libc_fpstate ) ) . ftw as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::" , stringify ! ( ftw ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _libc_fpstate ) ) . fop as * const _ as usize } , 6usize , concat ! ( "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::" , stringify ! ( fop ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _libc_fpstate ) ) . rip as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::" , stringify ! ( rip ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _libc_fpstate ) ) . rdp as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::" , stringify ! ( rdp ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _libc_fpstate ) ) . mxcsr as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::" , stringify ! ( mxcsr ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _libc_fpstate ) ) . mxcr_mask as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::" , stringify ! ( mxcr_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _libc_fpstate ) ) . _st as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::" , stringify ! ( _st ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _libc_fpstate ) ) . _xmm as * const _ as usize } , 160usize , concat ! ( "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::" , stringify ! ( _xmm ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _libc_fpstate ) ) . padding as * const _ as usize } , 416usize , concat ! ( "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::" , stringify ! ( padding ) ) ) ; } pub type fpregset_t = * mut _libc_fpstate ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct mcontext_t { pub gregs : gregset_t , pub fpregs : fpregset_t , pub __reserved1 : [ :: std :: os :: raw :: c_ulonglong ; 8usize ] , } # [ test ] fn bindgen_test_layout_mcontext_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < mcontext_t > ( ) , 256usize , concat ! ( "Size of: " , stringify ! ( mcontext_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < mcontext_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( mcontext_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const mcontext_t ) ) . gregs as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( mcontext_t ) , "::" , stringify ! ( gregs ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const mcontext_t ) ) . fpregs as * const _ as usize } , 184usize , concat ! ( "Alignment of field: " , stringify ! ( mcontext_t ) , "::" , stringify ! ( fpregs ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const mcontext_t ) ) . __reserved1 as * const _ as usize } , 192usize , concat ! ( "Alignment of field: " , stringify ! ( mcontext_t ) , "::" , stringify ! ( __reserved1 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ucontext { pub uc_flags : :: std :: os :: raw :: c_ulong , pub uc_link : * mut ucontext , pub uc_stack : stack_t , pub uc_mcontext : mcontext_t , pub uc_sigmask : __sigset_t , pub __fpregs_mem : _libc_fpstate , } # [ test ] fn bindgen_test_layout_ucontext ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ucontext > ( ) , 936usize , concat ! ( "Size of: " , stringify ! ( ucontext ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ucontext > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ucontext ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const ucontext ) ) . uc_flags as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( ucontext ) , "::" , stringify ! ( uc_flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const ucontext ) ) . uc_link as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( ucontext ) , "::" , stringify ! ( uc_link ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const ucontext ) ) . uc_stack as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( ucontext ) , "::" , stringify ! ( uc_stack ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const ucontext ) ) . uc_mcontext as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( ucontext ) , "::" , stringify ! ( uc_mcontext ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const ucontext ) ) . uc_sigmask as * const _ as usize } , 296usize , concat ! ( "Alignment of field: " , stringify ! ( ucontext ) , "::" , stringify ! ( uc_sigmask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const ucontext ) ) . __fpregs_mem as * const _ as usize } , 424usize , concat ! ( "Alignment of field: " , stringify ! ( ucontext ) , "::" , stringify ! ( __fpregs_mem ) ) ) ; } pub type ucontext_t = ucontext ; extern "C" {
 pub fn sigstack ( __ss : * mut sigstack , __oss : * mut sigstack , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn sigaltstack ( __ss : * const sigaltstack , __oss : * mut sigaltstack , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn pthread_sigmask ( __how : :: std :: os :: raw :: c_int , __newmask : * const __sigset_t , __oldmask : * mut __sigset_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn pthread_kill ( __threadid : pthread_t , __signo : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __libc_current_sigrtmin ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __libc_current_sigrtmax ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn wait ( __stat_loc : __WAIT_STATUS , ) -> __pid_t ; 
} extern "C" {
 pub fn waitpid ( __pid : __pid_t , __stat_loc : * mut :: std :: os :: raw :: c_int , __options : :: std :: os :: raw :: c_int , ) -> __pid_t ; 
} extern "C" {
 pub fn waitid ( __idtype : idtype_t , __id : __id_t , __infop : * mut siginfo_t , __options : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct rusage { _unused : [ u8 ; 0 ] } extern "C" {
 pub fn wait3 ( __stat_loc : __WAIT_STATUS , __options : :: std :: os :: raw :: c_int , __usage : * mut rusage , ) -> __pid_t ; 
} extern "C" {
 pub fn wait4 ( __pid : __pid_t , __stat_loc : __WAIT_STATUS , __options : :: std :: os :: raw :: c_int , __usage : * mut rusage , ) -> __pid_t ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct flock { pub l_type : :: std :: os :: raw :: c_short , pub l_whence : :: std :: os :: raw :: c_short , pub l_start : __off_t , pub l_len : __off_t , pub l_pid : __pid_t , } # [ test ] fn bindgen_test_layout_flock ( ) { assert_eq ! ( :: std :: mem :: size_of :: < flock > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( flock ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < flock > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( flock ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const flock ) ) . l_type as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( flock ) , "::" , stringify ! ( l_type ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const flock ) ) . l_whence as * const _ as usize } , 2usize , concat ! ( "Alignment of field: " , stringify ! ( flock ) , "::" , stringify ! ( l_whence ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const flock ) ) . l_start as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( flock ) , "::" , stringify ! ( l_start ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const flock ) ) . l_len as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( flock ) , "::" , stringify ! ( l_len ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const flock ) ) . l_pid as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( flock ) , "::" , stringify ! ( l_pid ) ) ) ; } extern "C" {
 pub fn fcntl ( __fd : :: std :: os :: raw :: c_int , __cmd : :: std :: os :: raw :: c_int , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn open ( __file : * const :: std :: os :: raw :: c_char , __oflag : :: std :: os :: raw :: c_int , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn openat ( __fd : :: std :: os :: raw :: c_int , __file : * const :: std :: os :: raw :: c_char , __oflag : :: std :: os :: raw :: c_int , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn creat ( __file : * const :: std :: os :: raw :: c_char , __mode : mode_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn posix_fadvise ( __fd : :: std :: os :: raw :: c_int , __offset : off_t , __len : off_t , __advise : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn posix_fallocate ( __fd : :: std :: os :: raw :: c_int , __offset : off_t , __len : off_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __errno_location ( ) -> * mut :: std :: os :: raw :: c_int ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct timezone { pub tz_minuteswest : :: std :: os :: raw :: c_int , pub tz_dsttime : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_timezone ( ) { assert_eq ! ( :: std :: mem :: size_of :: < timezone > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( timezone ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < timezone > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( timezone ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timezone ) ) . tz_minuteswest as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( timezone ) , "::" , stringify ! ( tz_minuteswest ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timezone ) ) . tz_dsttime as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( timezone ) , "::" , stringify ! ( tz_dsttime ) ) ) ; } pub type __timezone_ptr_t = * mut timezone ; extern "C" {
 pub fn gettimeofday ( __tv : * mut timeval , __tz : __timezone_ptr_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn settimeofday ( __tv : * const timeval , __tz : * const timezone , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn adjtime ( __delta : * const timeval , __olddelta : * mut timeval , ) -> :: std :: os :: raw :: c_int ; 
} pub const __itimer_which_ITIMER_REAL : __itimer_which = 0 ; pub const __itimer_which_ITIMER_VIRTUAL : __itimer_which = 1 ; pub const __itimer_which_ITIMER_PROF : __itimer_which = 2 ; pub type __itimer_which = :: std :: os :: raw :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct itimerval { pub it_interval : timeval , pub it_value : timeval , } # [ test ] fn bindgen_test_layout_itimerval ( ) { assert_eq ! ( :: std :: mem :: size_of :: < itimerval > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( itimerval ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < itimerval > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( itimerval ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const itimerval ) ) . it_interval as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( itimerval ) , "::" , stringify ! ( it_interval ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const itimerval ) ) . it_value as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( itimerval ) , "::" , stringify ! ( it_value ) ) ) ; } pub type __itimer_which_t = :: std :: os :: raw :: c_int ; extern "C" {
 pub fn getitimer ( __which : __itimer_which_t , __value : * mut itimerval , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn setitimer ( __which : __itimer_which_t , __new : * const itimerval , __old : * mut itimerval , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn utimes ( __file : * const :: std :: os :: raw :: c_char , __tvp : * const timeval , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn lutimes ( __file : * const :: std :: os :: raw :: c_char , __tvp : * const timeval , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn futimes ( __fd : :: std :: os :: raw :: c_int , __tvp : * const timeval , ) -> :: std :: os :: raw :: c_int ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct tm { pub tm_sec : :: std :: os :: raw :: c_int , pub tm_min : :: std :: os :: raw :: c_int , pub tm_hour : :: std :: os :: raw :: c_int , pub tm_mday : :: std :: os :: raw :: c_int , pub tm_mon : :: std :: os :: raw :: c_int , pub tm_year : :: std :: os :: raw :: c_int , pub tm_wday : :: std :: os :: raw :: c_int , pub tm_yday : :: std :: os :: raw :: c_int , pub tm_isdst : :: std :: os :: raw :: c_int , pub tm_gmtoff : :: std :: os :: raw :: c_long , pub tm_zone : * const :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout_tm ( ) { assert_eq ! ( :: std :: mem :: size_of :: < tm > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( tm ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < tm > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( tm ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const tm ) ) . tm_sec as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_sec ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const tm ) ) . tm_min as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_min ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const tm ) ) . tm_hour as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_hour ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const tm ) ) . tm_mday as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_mday ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const tm ) ) . tm_mon as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_mon ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const tm ) ) . tm_year as * const _ as usize } , 20usize , concat ! ( "Alignment of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_year ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const tm ) ) . tm_wday as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_wday ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const tm ) ) . tm_yday as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_yday ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const tm ) ) . tm_isdst as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_isdst ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const tm ) ) . tm_gmtoff as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_gmtoff ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const tm ) ) . tm_zone as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_zone ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct itimerspec { pub it_interval : timespec , pub it_value : timespec , } # [ test ] fn bindgen_test_layout_itimerspec ( ) { assert_eq ! ( :: std :: mem :: size_of :: < itimerspec > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( itimerspec ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < itimerspec > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( itimerspec ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const itimerspec ) ) . it_interval as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( itimerspec ) , "::" , stringify ! ( it_interval ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const itimerspec ) ) . it_value as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( itimerspec ) , "::" , stringify ! ( it_value ) ) ) ; } extern "C" {
 pub fn clock ( ) -> clock_t ; 
} extern "C" {
 pub fn time ( __timer : * mut time_t , ) -> time_t ; 
} extern "C" {
 pub fn difftime ( __time1 : time_t , __time0 : time_t , ) -> f64 ; 
} extern "C" {
 pub fn mktime ( __tp : * mut tm , ) -> time_t ; 
} extern "C" {
 pub fn strftime ( __s : * mut :: std :: os :: raw :: c_char , __maxsize : usize , __format : * const :: std :: os :: raw :: c_char , __tp : * const tm , ) -> usize ; 
} extern "C" {
 pub fn strftime_l ( __s : * mut :: std :: os :: raw :: c_char , __maxsize : usize , __format : * const :: std :: os :: raw :: c_char , __tp : * const tm , __loc : __locale_t , ) -> usize ; 
} extern "C" {
 pub fn gmtime ( __timer : * const time_t , ) -> * mut tm ; 
} extern "C" {
 pub fn localtime ( __timer : * const time_t , ) -> * mut tm ; 
} extern "C" {
 pub fn gmtime_r ( __timer : * const time_t , __tp : * mut tm , ) -> * mut tm ; 
} extern "C" {
 pub fn localtime_r ( __timer : * const time_t , __tp : * mut tm , ) -> * mut tm ; 
} extern "C" {
 pub fn asctime ( __tp : * const tm , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn ctime ( __timer : * const time_t , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn asctime_r ( __tp : * const tm , __buf : * mut :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn ctime_r ( __timer : * const time_t , __buf : * mut :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 # [ link_name = "\u{1}__tzname" ] 
 pub static mut  __tzname  :  [ * mut :: std :: os :: raw :: c_char ; 2usize ] ;
} extern "C" {
 # [ link_name = "\u{1}__daylight" ] 
 pub static mut  __daylight  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}__timezone" ] 
 pub static mut  __timezone  :  :: std :: os :: raw :: c_long ;
} extern "C" {
 # [ link_name = "\u{1}tzname" ] 
 pub static mut  tzname  :  [ * mut :: std :: os :: raw :: c_char ; 2usize ] ;
} extern "C" {
 pub fn tzset ( ) ; 
} extern "C" {
 # [ link_name = "\u{1}daylight" ] 
 pub static mut  daylight  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}timezone" ] 
 pub static mut  timezone  :  :: std :: os :: raw :: c_long ;
} extern "C" {
 pub fn stime ( __when : * const time_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn timegm ( __tp : * mut tm , ) -> time_t ; 
} extern "C" {
 pub fn timelocal ( __tp : * mut tm , ) -> time_t ; 
} extern "C" {
 pub fn dysize ( __year : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn nanosleep ( __requested_time : * const timespec , __remaining : * mut timespec , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn clock_getres ( __clock_id : clockid_t , __res : * mut timespec , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn clock_gettime ( __clock_id : clockid_t , __tp : * mut timespec , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn clock_settime ( __clock_id : clockid_t , __tp : * const timespec , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn clock_nanosleep ( __clock_id : clockid_t , __flags : :: std :: os :: raw :: c_int , __req : * const timespec , __rem : * mut timespec , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn clock_getcpuclockid ( __pid : pid_t , __clock_id : * mut clockid_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn timer_create ( __clock_id : clockid_t , __evp : * mut sigevent , __timerid : * mut timer_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn timer_delete ( __timerid : timer_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn timer_settime ( __timerid : timer_t , __flags : :: std :: os :: raw :: c_int , __value : * const itimerspec , __ovalue : * mut itimerspec , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn timer_gettime ( __timerid : timer_t , __value : * mut itimerspec , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn timer_getoverrun ( __timerid : timer_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn timespec_get ( __ts : * mut timespec , __base : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __assert_fail ( __assertion : * const :: std :: os :: raw :: c_char , __file : * const :: std :: os :: raw :: c_char , __line : :: std :: os :: raw :: c_uint , __function : * const :: std :: os :: raw :: c_char , ) ; 
} extern "C" {
 pub fn __assert_perror_fail ( __errnum : :: std :: os :: raw :: c_int , __file : * const :: std :: os :: raw :: c_char , __line : :: std :: os :: raw :: c_uint , __function : * const :: std :: os :: raw :: c_char , ) ; 
} extern "C" {
 pub fn __assert ( __assertion : * const :: std :: os :: raw :: c_char , __file : * const :: std :: os :: raw :: c_char , __line : :: std :: os :: raw :: c_int , ) ; 
} pub type float_t = f32 ; pub type double_t = f64 ; extern "C" {
 pub fn acos ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __acos ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn asin ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __asin ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn atan ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __atan ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn atan2 ( __y : f64 , __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __atan2 ( __y : f64 , __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn cos ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __cos ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn sin ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __sin ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn tan ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __tan ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn cosh ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __cosh ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn sinh ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __sinh ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn tanh ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __tanh ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn acosh ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __acosh ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn asinh ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __asinh ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn atanh ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __atanh ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn exp ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __exp ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn frexp ( __x : f64 , __exponent : * mut :: std :: os :: raw :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn __frexp ( __x : f64 , __exponent : * mut :: std :: os :: raw :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn ldexp ( __x : f64 , __exponent : :: std :: os :: raw :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn __ldexp ( __x : f64 , __exponent : :: std :: os :: raw :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn log ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __log ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn log10 ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __log10 ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn modf ( __x : f64 , __iptr : * mut f64 , ) -> f64 ; 
} extern "C" {
 pub fn __modf ( __x : f64 , __iptr : * mut f64 , ) -> f64 ; 
} extern "C" {
 pub fn expm1 ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __expm1 ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn log1p ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __log1p ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn logb ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __logb ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn exp2 ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __exp2 ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn log2 ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __log2 ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn pow ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __pow ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn sqrt ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __sqrt ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn hypot ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __hypot ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn cbrt ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __cbrt ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn ceil ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __ceil ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn fabs ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fabs ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn floor ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __floor ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn fmod ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fmod ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __isinf ( __value : f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __finite ( __value : f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn isinf ( __value : f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn finite ( __value : f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn drem ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __drem ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn significand ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __significand ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn copysign ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __copysign ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn nan ( __tagb : * const :: std :: os :: raw :: c_char , ) -> f64 ; 
} extern "C" {
 pub fn __nan ( __tagb : * const :: std :: os :: raw :: c_char , ) -> f64 ; 
} extern "C" {
 pub fn __isnan ( __value : f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn isnan ( __value : f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn j0 ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __j0 ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn j1 ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __j1 ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn jn ( arg1 : :: std :: os :: raw :: c_int , arg2 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __jn ( arg1 : :: std :: os :: raw :: c_int , arg2 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn y0 ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __y0 ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn y1 ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __y1 ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn yn ( arg1 : :: std :: os :: raw :: c_int , arg2 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __yn ( arg1 : :: std :: os :: raw :: c_int , arg2 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn erf ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __erf ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn erfc ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __erfc ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn lgamma ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __lgamma ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn tgamma ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __tgamma ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn gamma ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __gamma ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn lgamma_r ( arg1 : f64 , __signgamp : * mut :: std :: os :: raw :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn __lgamma_r ( arg1 : f64 , __signgamp : * mut :: std :: os :: raw :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn rint ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __rint ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn nextafter ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __nextafter ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn nexttoward ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __nexttoward ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn remainder ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __remainder ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn scalbn ( __x : f64 , __n : :: std :: os :: raw :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn __scalbn ( __x : f64 , __n : :: std :: os :: raw :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn ilogb ( __x : f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __ilogb ( __x : f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn scalbln ( __x : f64 , __n : :: std :: os :: raw :: c_long , ) -> f64 ; 
} extern "C" {
 pub fn __scalbln ( __x : f64 , __n : :: std :: os :: raw :: c_long , ) -> f64 ; 
} extern "C" {
 pub fn nearbyint ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __nearbyint ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn round ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __round ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn trunc ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __trunc ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn remquo ( __x : f64 , __y : f64 , __quo : * mut :: std :: os :: raw :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn __remquo ( __x : f64 , __y : f64 , __quo : * mut :: std :: os :: raw :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn lrint ( __x : f64 , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn __lrint ( __x : f64 , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn llrint ( __x : f64 , ) -> :: std :: os :: raw :: c_longlong ; 
} extern "C" {
 pub fn __llrint ( __x : f64 , ) -> :: std :: os :: raw :: c_longlong ; 
} extern "C" {
 pub fn lround ( __x : f64 , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn __lround ( __x : f64 , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn llround ( __x : f64 , ) -> :: std :: os :: raw :: c_longlong ; 
} extern "C" {
 pub fn __llround ( __x : f64 , ) -> :: std :: os :: raw :: c_longlong ; 
} extern "C" {
 pub fn fdim ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fdim ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn fmax ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fmax ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn fmin ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fmin ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fpclassify ( __value : f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __signbit ( __value : f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fma ( __x : f64 , __y : f64 , __z : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fma ( __x : f64 , __y : f64 , __z : f64 , ) -> f64 ; 
} extern "C" {
 pub fn scalb ( __x : f64 , __n : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __scalb ( __x : f64 , __n : f64 , ) -> f64 ; 
} extern "C" {
 pub fn acosf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __acosf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn asinf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __asinf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn atanf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __atanf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn atan2f ( __y : f32 , __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __atan2f ( __y : f32 , __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn cosf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __cosf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn sinf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __sinf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn tanf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __tanf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn coshf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __coshf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn sinhf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __sinhf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn tanhf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __tanhf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn acoshf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __acoshf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn asinhf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __asinhf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn atanhf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __atanhf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn expf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __expf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn frexpf ( __x : f32 , __exponent : * mut :: std :: os :: raw :: c_int , ) -> f32 ; 
} extern "C" {
 pub fn __frexpf ( __x : f32 , __exponent : * mut :: std :: os :: raw :: c_int , ) -> f32 ; 
} extern "C" {
 pub fn ldexpf ( __x : f32 , __exponent : :: std :: os :: raw :: c_int , ) -> f32 ; 
} extern "C" {
 pub fn __ldexpf ( __x : f32 , __exponent : :: std :: os :: raw :: c_int , ) -> f32 ; 
} extern "C" {
 pub fn logf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __logf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn log10f ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __log10f ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn modff ( __x : f32 , __iptr : * mut f32 , ) -> f32 ; 
} extern "C" {
 pub fn __modff ( __x : f32 , __iptr : * mut f32 , ) -> f32 ; 
} extern "C" {
 pub fn expm1f ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __expm1f ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn log1pf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __log1pf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn logbf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __logbf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn exp2f ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __exp2f ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn log2f ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __log2f ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn powf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __powf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn sqrtf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __sqrtf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn hypotf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __hypotf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn cbrtf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __cbrtf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn ceilf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __ceilf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn fabsf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __fabsf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn floorf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __floorf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn fmodf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __fmodf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __isinff ( __value : f32 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __finitef ( __value : f32 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn isinff ( __value : f32 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn finitef ( __value : f32 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn dremf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __dremf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn significandf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __significandf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn copysignf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __copysignf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn nanf ( __tagb : * const :: std :: os :: raw :: c_char , ) -> f32 ; 
} extern "C" {
 pub fn __nanf ( __tagb : * const :: std :: os :: raw :: c_char , ) -> f32 ; 
} extern "C" {
 pub fn __isnanf ( __value : f32 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn isnanf ( __value : f32 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn j0f ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __j0f ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn j1f ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __j1f ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn jnf ( arg1 : :: std :: os :: raw :: c_int , arg2 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __jnf ( arg1 : :: std :: os :: raw :: c_int , arg2 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn y0f ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __y0f ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn y1f ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __y1f ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn ynf ( arg1 : :: std :: os :: raw :: c_int , arg2 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __ynf ( arg1 : :: std :: os :: raw :: c_int , arg2 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn erff ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __erff ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn erfcf ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __erfcf ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn lgammaf ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __lgammaf ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn tgammaf ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __tgammaf ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn gammaf ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __gammaf ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn lgammaf_r ( arg1 : f32 , __signgamp : * mut :: std :: os :: raw :: c_int , ) -> f32 ; 
} extern "C" {
 pub fn __lgammaf_r ( arg1 : f32 , __signgamp : * mut :: std :: os :: raw :: c_int , ) -> f32 ; 
} extern "C" {
 pub fn rintf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __rintf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn nextafterf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __nextafterf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn nexttowardf ( __x : f32 , __y : f64 , ) -> f32 ; 
} extern "C" {
 pub fn __nexttowardf ( __x : f32 , __y : f64 , ) -> f32 ; 
} extern "C" {
 pub fn remainderf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __remainderf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn scalbnf ( __x : f32 , __n : :: std :: os :: raw :: c_int , ) -> f32 ; 
} extern "C" {
 pub fn __scalbnf ( __x : f32 , __n : :: std :: os :: raw :: c_int , ) -> f32 ; 
} extern "C" {
 pub fn ilogbf ( __x : f32 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __ilogbf ( __x : f32 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn scalblnf ( __x : f32 , __n : :: std :: os :: raw :: c_long , ) -> f32 ; 
} extern "C" {
 pub fn __scalblnf ( __x : f32 , __n : :: std :: os :: raw :: c_long , ) -> f32 ; 
} extern "C" {
 pub fn nearbyintf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __nearbyintf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn roundf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __roundf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn truncf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __truncf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn remquof ( __x : f32 , __y : f32 , __quo : * mut :: std :: os :: raw :: c_int , ) -> f32 ; 
} extern "C" {
 pub fn __remquof ( __x : f32 , __y : f32 , __quo : * mut :: std :: os :: raw :: c_int , ) -> f32 ; 
} extern "C" {
 pub fn lrintf ( __x : f32 , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn __lrintf ( __x : f32 , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn llrintf ( __x : f32 , ) -> :: std :: os :: raw :: c_longlong ; 
} extern "C" {
 pub fn __llrintf ( __x : f32 , ) -> :: std :: os :: raw :: c_longlong ; 
} extern "C" {
 pub fn lroundf ( __x : f32 , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn __lroundf ( __x : f32 , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn llroundf ( __x : f32 , ) -> :: std :: os :: raw :: c_longlong ; 
} extern "C" {
 pub fn __llroundf ( __x : f32 , ) -> :: std :: os :: raw :: c_longlong ; 
} extern "C" {
 pub fn fdimf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __fdimf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn fmaxf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __fmaxf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn fminf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __fminf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __fpclassifyf ( __value : f32 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __signbitf ( __value : f32 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fmaf ( __x : f32 , __y : f32 , __z : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __fmaf ( __x : f32 , __y : f32 , __z : f32 , ) -> f32 ; 
} extern "C" {
 pub fn scalbf ( __x : f32 , __n : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __scalbf ( __x : f32 , __n : f32 , ) -> f32 ; 
} extern "C" {
 pub fn acosl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __acosl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn asinl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __asinl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn atanl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __atanl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn atan2l ( __y : f64 , __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __atan2l ( __y : f64 , __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn cosl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __cosl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn sinl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __sinl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn tanl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __tanl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn coshl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __coshl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn sinhl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __sinhl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn tanhl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __tanhl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn acoshl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __acoshl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn asinhl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __asinhl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn atanhl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __atanhl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn expl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __expl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn frexpl ( __x : f64 , __exponent : * mut :: std :: os :: raw :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn __frexpl ( __x : f64 , __exponent : * mut :: std :: os :: raw :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn ldexpl ( __x : f64 , __exponent : :: std :: os :: raw :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn __ldexpl ( __x : f64 , __exponent : :: std :: os :: raw :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn logl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __logl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn log10l ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __log10l ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn modfl ( __x : f64 , __iptr : * mut f64 , ) -> f64 ; 
} extern "C" {
 pub fn __modfl ( __x : f64 , __iptr : * mut f64 , ) -> f64 ; 
} extern "C" {
 pub fn expm1l ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __expm1l ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn log1pl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __log1pl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn logbl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __logbl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn exp2l ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __exp2l ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn log2l ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __log2l ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn powl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __powl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn sqrtl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __sqrtl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn hypotl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __hypotl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn cbrtl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __cbrtl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn ceill ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __ceill ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn fabsl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fabsl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn floorl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __floorl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn fmodl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fmodl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __isinfl ( __value : f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __finitel ( __value : f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn isinfl ( __value : f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn finitel ( __value : f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn dreml ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __dreml ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn significandl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __significandl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn copysignl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __copysignl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn nanl ( __tagb : * const :: std :: os :: raw :: c_char , ) -> f64 ; 
} extern "C" {
 pub fn __nanl ( __tagb : * const :: std :: os :: raw :: c_char , ) -> f64 ; 
} extern "C" {
 pub fn __isnanl ( __value : f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn isnanl ( __value : f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn j0l ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __j0l ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn j1l ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __j1l ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn jnl ( arg1 : :: std :: os :: raw :: c_int , arg2 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __jnl ( arg1 : :: std :: os :: raw :: c_int , arg2 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn y0l ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __y0l ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn y1l ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __y1l ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn ynl ( arg1 : :: std :: os :: raw :: c_int , arg2 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __ynl ( arg1 : :: std :: os :: raw :: c_int , arg2 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn erfl ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __erfl ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn erfcl ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __erfcl ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn lgammal ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __lgammal ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn tgammal ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __tgammal ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn gammal ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __gammal ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn lgammal_r ( arg1 : f64 , __signgamp : * mut :: std :: os :: raw :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn __lgammal_r ( arg1 : f64 , __signgamp : * mut :: std :: os :: raw :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn rintl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __rintl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn nextafterl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __nextafterl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn nexttowardl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __nexttowardl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn remainderl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __remainderl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn scalbnl ( __x : f64 , __n : :: std :: os :: raw :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn __scalbnl ( __x : f64 , __n : :: std :: os :: raw :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn ilogbl ( __x : f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __ilogbl ( __x : f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn scalblnl ( __x : f64 , __n : :: std :: os :: raw :: c_long , ) -> f64 ; 
} extern "C" {
 pub fn __scalblnl ( __x : f64 , __n : :: std :: os :: raw :: c_long , ) -> f64 ; 
} extern "C" {
 pub fn nearbyintl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __nearbyintl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn roundl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __roundl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn truncl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __truncl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn remquol ( __x : f64 , __y : f64 , __quo : * mut :: std :: os :: raw :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn __remquol ( __x : f64 , __y : f64 , __quo : * mut :: std :: os :: raw :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn lrintl ( __x : f64 , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn __lrintl ( __x : f64 , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn llrintl ( __x : f64 , ) -> :: std :: os :: raw :: c_longlong ; 
} extern "C" {
 pub fn __llrintl ( __x : f64 , ) -> :: std :: os :: raw :: c_longlong ; 
} extern "C" {
 pub fn lroundl ( __x : f64 , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn __lroundl ( __x : f64 , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn llroundl ( __x : f64 , ) -> :: std :: os :: raw :: c_longlong ; 
} extern "C" {
 pub fn __llroundl ( __x : f64 , ) -> :: std :: os :: raw :: c_longlong ; 
} extern "C" {
 pub fn fdiml ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fdiml ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn fmaxl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fmaxl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn fminl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fminl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fpclassifyl ( __value : f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __signbitl ( __value : f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fmal ( __x : f64 , __y : f64 , __z : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fmal ( __x : f64 , __y : f64 , __z : f64 , ) -> f64 ; 
} extern "C" {
 pub fn scalbl ( __x : f64 , __n : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __scalbl ( __x : f64 , __n : f64 , ) -> f64 ; 
} extern "C" {
 # [ link_name = "\u{1}signgam" ] 
 pub static mut  signgam  :  :: std :: os :: raw :: c_int ;
} pub const FP_NAN : _bindgen_ty_14 = 0 ; pub const FP_INFINITE : _bindgen_ty_14 = 1 ; pub const FP_ZERO : _bindgen_ty_14 = 2 ; pub const FP_SUBNORMAL : _bindgen_ty_14 = 3 ; pub const FP_NORMAL : _bindgen_ty_14 = 4 ; pub type _bindgen_ty_14 = :: std :: os :: raw :: c_uint ; pub const _LIB_VERSION_TYPE__IEEE_ : _LIB_VERSION_TYPE = -1 ; pub const _LIB_VERSION_TYPE__SVID_ : _LIB_VERSION_TYPE = 0 ; pub const _LIB_VERSION_TYPE__XOPEN_ : _LIB_VERSION_TYPE = 1 ; pub const _LIB_VERSION_TYPE__POSIX_ : _LIB_VERSION_TYPE = 2 ; pub const _LIB_VERSION_TYPE__ISOC_ : _LIB_VERSION_TYPE = 3 ; pub type _LIB_VERSION_TYPE = :: std :: os :: raw :: c_int ; extern "C" {
 # [ link_name = "\u{1}_LIB_VERSION" ] 
 pub static mut  _LIB_VERSION  :  _LIB_VERSION_TYPE ;
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct exception { pub type_ : :: std :: os :: raw :: c_int , pub name : * mut :: std :: os :: raw :: c_char , pub arg1 : f64 , pub arg2 : f64 , pub retval : f64 , } # [ test ] fn bindgen_test_layout_exception ( ) { assert_eq ! ( :: std :: mem :: size_of :: < exception > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( exception ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < exception > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( exception ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const exception ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( exception ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const exception ) ) . name as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( exception ) , "::" , stringify ! ( name ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const exception ) ) . arg1 as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( exception ) , "::" , stringify ! ( arg1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const exception ) ) . arg2 as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( exception ) , "::" , stringify ! ( arg2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const exception ) ) . retval as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( exception ) , "::" , stringify ! ( retval ) ) ) ; } extern "C" {
 pub fn matherr ( __exc : * mut exception , ) -> :: std :: os :: raw :: c_int ; 
} # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct dirent { pub d_ino : __ino_t , pub d_off : __off_t , pub d_reclen : :: std :: os :: raw :: c_ushort , pub d_type : :: std :: os :: raw :: c_uchar , pub d_name : [ :: std :: os :: raw :: c_char ; 256usize ] , } # [ test ] fn bindgen_test_layout_dirent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < dirent > ( ) , 280usize , concat ! ( "Size of: " , stringify ! ( dirent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < dirent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( dirent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const dirent ) ) . d_ino as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( dirent ) , "::" , stringify ! ( d_ino ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const dirent ) ) . d_off as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( dirent ) , "::" , stringify ! ( d_off ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const dirent ) ) . d_reclen as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( dirent ) , "::" , stringify ! ( d_reclen ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const dirent ) ) . d_type as * const _ as usize } , 18usize , concat ! ( "Alignment of field: " , stringify ! ( dirent ) , "::" , stringify ! ( d_type ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const dirent ) ) . d_name as * const _ as usize } , 19usize , concat ! ( "Alignment of field: " , stringify ! ( dirent ) , "::" , stringify ! ( d_name ) ) ) ; } pub const DT_UNKNOWN : _bindgen_ty_15 = 0 ; pub const DT_FIFO : _bindgen_ty_15 = 1 ; pub const DT_CHR : _bindgen_ty_15 = 2 ; pub const DT_DIR : _bindgen_ty_15 = 4 ; pub const DT_BLK : _bindgen_ty_15 = 6 ; pub const DT_REG : _bindgen_ty_15 = 8 ; pub const DT_LNK : _bindgen_ty_15 = 10 ; pub const DT_SOCK : _bindgen_ty_15 = 12 ; pub const DT_WHT : _bindgen_ty_15 = 14 ; pub type _bindgen_ty_15 = :: std :: os :: raw :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __dirstream { _unused : [ u8 ; 0 ] } pub type DIR = __dirstream ; extern "C" {
 pub fn opendir ( __name : * const :: std :: os :: raw :: c_char , ) -> * mut DIR ; 
} extern "C" {
 pub fn fdopendir ( __fd : :: std :: os :: raw :: c_int , ) -> * mut DIR ; 
} extern "C" {
 pub fn closedir ( __dirp : * mut DIR , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn readdir ( __dirp : * mut DIR , ) -> * mut dirent ; 
} extern "C" {
 pub fn readdir_r ( __dirp : * mut DIR , __entry : * mut dirent , __result : * mut * mut dirent , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn rewinddir ( __dirp : * mut DIR , ) ; 
} extern "C" {
 pub fn seekdir ( __dirp : * mut DIR , __pos : :: std :: os :: raw :: c_long , ) ; 
} extern "C" {
 pub fn telldir ( __dirp : * mut DIR , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn dirfd ( __dirp : * mut DIR , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn scandir ( __dir : * const :: std :: os :: raw :: c_char , __namelist : * mut * mut * mut dirent , __selector : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const dirent ) -> :: std :: os :: raw :: c_int > , __cmp : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut * const dirent , arg2 : * mut * const dirent ) -> :: std :: os :: raw :: c_int > , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn alphasort ( __e1 : * mut * const dirent , __e2 : * mut * const dirent , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn getdirentries ( __fd : :: std :: os :: raw :: c_int , __buf : * mut :: std :: os :: raw :: c_char , __nbytes : usize , __basep : * mut __off_t , ) -> __ssize_t ; 
} pub const _ISupper : _bindgen_ty_16 = 256 ; pub const _ISlower : _bindgen_ty_16 = 512 ; pub const _ISalpha : _bindgen_ty_16 = 1024 ; pub const _ISdigit : _bindgen_ty_16 = 2048 ; pub const _ISxdigit : _bindgen_ty_16 = 4096 ; pub const _ISspace : _bindgen_ty_16 = 8192 ; pub const _ISprint : _bindgen_ty_16 = 16384 ; pub const _ISgraph : _bindgen_ty_16 = 32768 ; pub const _ISblank : _bindgen_ty_16 = 1 ; pub const _IScntrl : _bindgen_ty_16 = 2 ; pub const _ISpunct : _bindgen_ty_16 = 4 ; pub const _ISalnum : _bindgen_ty_16 = 8 ; pub type _bindgen_ty_16 = :: std :: os :: raw :: c_uint ; extern "C" {
 pub fn __ctype_b_loc ( ) -> * mut * const :: std :: os :: raw :: c_ushort ; 
} extern "C" {
 pub fn __ctype_tolower_loc ( ) -> * mut * const __int32_t ; 
} extern "C" {
 pub fn __ctype_toupper_loc ( ) -> * mut * const __int32_t ; 
} extern "C" {
 pub fn isalnum ( arg1 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn isalpha ( arg1 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn iscntrl ( arg1 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn isdigit ( arg1 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn islower ( arg1 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn isgraph ( arg1 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn isprint ( arg1 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn ispunct ( arg1 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn isspace ( arg1 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn isupper ( arg1 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn isxdigit ( arg1 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn tolower ( __c : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn toupper ( __c : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn isblank ( arg1 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn isascii ( __c : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn toascii ( __c : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn _toupper ( arg1 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn _tolower ( arg1 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn isalnum_l ( arg1 : :: std :: os :: raw :: c_int , arg2 : __locale_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn isalpha_l ( arg1 : :: std :: os :: raw :: c_int , arg2 : __locale_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn iscntrl_l ( arg1 : :: std :: os :: raw :: c_int , arg2 : __locale_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn isdigit_l ( arg1 : :: std :: os :: raw :: c_int , arg2 : __locale_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn islower_l ( arg1 : :: std :: os :: raw :: c_int , arg2 : __locale_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn isgraph_l ( arg1 : :: std :: os :: raw :: c_int , arg2 : __locale_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn isprint_l ( arg1 : :: std :: os :: raw :: c_int , arg2 : __locale_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn ispunct_l ( arg1 : :: std :: os :: raw :: c_int , arg2 : __locale_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn isspace_l ( arg1 : :: std :: os :: raw :: c_int , arg2 : __locale_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn isupper_l ( arg1 : :: std :: os :: raw :: c_int , arg2 : __locale_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn isxdigit_l ( arg1 : :: std :: os :: raw :: c_int , arg2 : __locale_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn isblank_l ( arg1 : :: std :: os :: raw :: c_int , arg2 : __locale_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __tolower_l ( __c : :: std :: os :: raw :: c_int , __l : __locale_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn tolower_l ( __c : :: std :: os :: raw :: c_int , __l : __locale_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __toupper_l ( __c : :: std :: os :: raw :: c_int , __l : __locale_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn toupper_l ( __c : :: std :: os :: raw :: c_int , __l : __locale_t , ) -> :: std :: os :: raw :: c_int ; 
} pub type cdtime_t = u64 ; extern "C" {
 # [ link_name = "\u{1}interval_g" ] 
 pub static mut  interval_g  :  cdtime_t ;
} extern "C" {
 # [ link_name = "\u{1}timeout_g" ] 
 pub static mut  timeout_g  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 pub fn cdtime ( ) -> cdtime_t ; 
} extern "C" {
 pub fn cdtime_to_iso8601 ( s : * mut :: std :: os :: raw :: c_char , max : usize , t : cdtime_t , ) -> usize ; 
} # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct oconfig_value_s { pub value : oconfig_value_s__bindgen_ty_1 , pub type_ : :: std :: os :: raw :: c_int , } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union oconfig_value_s__bindgen_ty_1 { pub string : * mut :: std :: os :: raw :: c_char , pub number : f64 , pub boolean : :: std :: os :: raw :: c_int , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout_oconfig_value_s__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < oconfig_value_s__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( oconfig_value_s__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < oconfig_value_s__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( oconfig_value_s__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const oconfig_value_s__bindgen_ty_1 ) ) . string as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( oconfig_value_s__bindgen_ty_1 ) , "::" , stringify ! ( string ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const oconfig_value_s__bindgen_ty_1 ) ) . number as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( oconfig_value_s__bindgen_ty_1 ) , "::" , stringify ! ( number ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const oconfig_value_s__bindgen_ty_1 ) ) . boolean as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( oconfig_value_s__bindgen_ty_1 ) , "::" , stringify ! ( boolean ) ) ) ; } # [ test ] fn bindgen_test_layout_oconfig_value_s ( ) { assert_eq ! ( :: std :: mem :: size_of :: < oconfig_value_s > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( oconfig_value_s ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < oconfig_value_s > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( oconfig_value_s ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const oconfig_value_s ) ) . value as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( oconfig_value_s ) , "::" , stringify ! ( value ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const oconfig_value_s ) ) . type_ as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( oconfig_value_s ) , "::" , stringify ! ( type_ ) ) ) ; } pub type oconfig_value_t = oconfig_value_s ; pub type oconfig_item_t = oconfig_item_s ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct oconfig_item_s { pub key : * mut :: std :: os :: raw :: c_char , pub values : * mut oconfig_value_t , pub values_num : :: std :: os :: raw :: c_int , pub parent : * mut oconfig_item_t , pub children : * mut oconfig_item_t , pub children_num : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_oconfig_item_s ( ) { assert_eq ! ( :: std :: mem :: size_of :: < oconfig_item_s > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( oconfig_item_s ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < oconfig_item_s > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( oconfig_item_s ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const oconfig_item_s ) ) . key as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( oconfig_item_s ) , "::" , stringify ! ( key ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const oconfig_item_s ) ) . values as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( oconfig_item_s ) , "::" , stringify ! ( values ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const oconfig_item_s ) ) . values_num as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( oconfig_item_s ) , "::" , stringify ! ( values_num ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const oconfig_item_s ) ) . parent as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( oconfig_item_s ) , "::" , stringify ! ( parent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const oconfig_item_s ) ) . children as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( oconfig_item_s ) , "::" , stringify ! ( children ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const oconfig_item_s ) ) . children_num as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( oconfig_item_s ) , "::" , stringify ! ( children_num ) ) ) ; } extern "C" {
 pub fn oconfig_parse_fh ( fh : * mut FILE , ) -> * mut oconfig_item_t ; 
} extern "C" {
 pub fn oconfig_parse_file ( file : * const :: std :: os :: raw :: c_char , ) -> * mut oconfig_item_t ; 
} extern "C" {
 pub fn oconfig_clone ( ci : * const oconfig_item_t , ) -> * mut oconfig_item_t ; 
} extern "C" {
 pub fn oconfig_free ( ci : * mut oconfig_item_t , ) ; 
} extern "C" {
 pub fn cf_unregister ( type_ : * const :: std :: os :: raw :: c_char , ) ; 
} extern "C" {
 pub fn cf_unregister_complex ( type_ : * const :: std :: os :: raw :: c_char , ) ; 
} extern "C" {
 pub fn cf_register ( type_ : * const :: std :: os :: raw :: c_char , callback : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int > , keys : * mut * const :: std :: os :: raw :: c_char , keys_num : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn cf_register_complex ( type_ : * const :: std :: os :: raw :: c_char , callback : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut oconfig_item_t ) -> :: std :: os :: raw :: c_int > , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn cf_read ( filename : * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn global_option_set ( option : * const :: std :: os :: raw :: c_char , value : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn global_option_get ( option : * const :: std :: os :: raw :: c_char , ) -> * const :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn global_option_get_long ( option : * const :: std :: os :: raw :: c_char , default_value : :: std :: os :: raw :: c_long , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn global_option_get_long_in_range ( option : * const :: std :: os :: raw :: c_char , default_value : :: std :: os :: raw :: c_long , min : :: std :: os :: raw :: c_long , max : :: std :: os :: raw :: c_long , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn cf_get_default_interval ( ) -> cdtime_t ; 
} extern "C" {
 pub fn cf_util_get_string ( ci : * const oconfig_item_t , ret_string : * mut * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn cf_util_get_string_buffer ( ci : * const oconfig_item_t , buffer : * mut :: std :: os :: raw :: c_char , buffer_size : usize , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn cf_util_get_int ( ci : * const oconfig_item_t , ret_value : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn cf_util_get_double ( ci : * const oconfig_item_t , ret_value : * mut f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn cf_util_get_boolean ( ci : * const oconfig_item_t , ret_bool : * mut bool , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn cf_util_get_flag ( ci : * const oconfig_item_t , ret_value : * mut :: std :: os :: raw :: c_uint , flag : :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn cf_util_get_port_number ( ci : * const oconfig_item_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn cf_util_get_service ( ci : * const oconfig_item_t , ret_string : * mut * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn cf_util_get_cdtime ( ci : * const oconfig_item_t , ret_value : * mut cdtime_t , ) -> :: std :: os :: raw :: c_int ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct meta_data_s { _unused : [ u8 ; 0 ] } pub type meta_data_t = meta_data_s ; extern "C" {
 pub fn meta_data_create ( ) -> * mut meta_data_t ; 
} extern "C" {
 pub fn meta_data_clone ( orig : * mut meta_data_t , ) -> * mut meta_data_t ; 
} extern "C" {
 pub fn meta_data_destroy ( md : * mut meta_data_t , ) ; 
} extern "C" {
 pub fn meta_data_exists ( md : * mut meta_data_t , key : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn meta_data_type ( md : * mut meta_data_t , key : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn meta_data_toc ( md : * mut meta_data_t , toc : * mut * mut * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn meta_data_delete ( md : * mut meta_data_t , key : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn meta_data_add_string ( md : * mut meta_data_t , key : * const :: std :: os :: raw :: c_char , value : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn meta_data_add_signed_int ( md : * mut meta_data_t , key : * const :: std :: os :: raw :: c_char , value : i64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn meta_data_add_unsigned_int ( md : * mut meta_data_t , key : * const :: std :: os :: raw :: c_char , value : u64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn meta_data_add_double ( md : * mut meta_data_t , key : * const :: std :: os :: raw :: c_char , value : f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn meta_data_add_boolean ( md : * mut meta_data_t , key : * const :: std :: os :: raw :: c_char , value : bool , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn meta_data_get_string ( md : * mut meta_data_t , key : * const :: std :: os :: raw :: c_char , value : * mut * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn meta_data_get_signed_int ( md : * mut meta_data_t , key : * const :: std :: os :: raw :: c_char , value : * mut i64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn meta_data_get_unsigned_int ( md : * mut meta_data_t , key : * const :: std :: os :: raw :: c_char , value : * mut u64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn meta_data_get_double ( md : * mut meta_data_t , key : * const :: std :: os :: raw :: c_char , value : * mut f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn meta_data_get_boolean ( md : * mut meta_data_t , key : * const :: std :: os :: raw :: c_char , value : * mut bool , ) -> :: std :: os :: raw :: c_int ; 
} pub type counter_t = :: std :: os :: raw :: c_ulonglong ; pub type gauge_t = f64 ; pub type derive_t = i64 ; pub type absolute_t = u64 ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union value_u { pub counter : counter_t , pub gauge : gauge_t , pub derive : derive_t , pub absolute : absolute_t , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout_value_u ( ) { assert_eq ! ( :: std :: mem :: size_of :: < value_u > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( value_u ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < value_u > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( value_u ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const value_u ) ) . counter as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( value_u ) , "::" , stringify ! ( counter ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const value_u ) ) . gauge as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( value_u ) , "::" , stringify ! ( gauge ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const value_u ) ) . derive as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( value_u ) , "::" , stringify ! ( derive ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const value_u ) ) . absolute as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( value_u ) , "::" , stringify ! ( absolute ) ) ) ; } pub type value_t = value_u ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct value_list_s { pub values : * mut value_t , pub values_len : :: std :: os :: raw :: c_int , pub time : cdtime_t , pub interval : cdtime_t , pub host : [ :: std :: os :: raw :: c_char ; 64usize ] , pub plugin : [ :: std :: os :: raw :: c_char ; 64usize ] , pub plugin_instance : [ :: std :: os :: raw :: c_char ; 64usize ] , pub type_ : [ :: std :: os :: raw :: c_char ; 64usize ] , pub type_instance : [ :: std :: os :: raw :: c_char ; 64usize ] , pub meta : * mut meta_data_t , } # [ test ] fn bindgen_test_layout_value_list_s ( ) { assert_eq ! ( :: std :: mem :: size_of :: < value_list_s > ( ) , 360usize , concat ! ( "Size of: " , stringify ! ( value_list_s ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < value_list_s > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( value_list_s ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const value_list_s ) ) . values as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( value_list_s ) , "::" , stringify ! ( values ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const value_list_s ) ) . values_len as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( value_list_s ) , "::" , stringify ! ( values_len ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const value_list_s ) ) . time as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( value_list_s ) , "::" , stringify ! ( time ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const value_list_s ) ) . interval as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( value_list_s ) , "::" , stringify ! ( interval ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const value_list_s ) ) . host as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( value_list_s ) , "::" , stringify ! ( host ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const value_list_s ) ) . plugin as * const _ as usize } , 96usize , concat ! ( "Alignment of field: " , stringify ! ( value_list_s ) , "::" , stringify ! ( plugin ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const value_list_s ) ) . plugin_instance as * const _ as usize } , 160usize , concat ! ( "Alignment of field: " , stringify ! ( value_list_s ) , "::" , stringify ! ( plugin_instance ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const value_list_s ) ) . type_ as * const _ as usize } , 224usize , concat ! ( "Alignment of field: " , stringify ! ( value_list_s ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const value_list_s ) ) . type_instance as * const _ as usize } , 288usize , concat ! ( "Alignment of field: " , stringify ! ( value_list_s ) , "::" , stringify ! ( type_instance ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const value_list_s ) ) . meta as * const _ as usize } , 352usize , concat ! ( "Alignment of field: " , stringify ! ( value_list_s ) , "::" , stringify ! ( meta ) ) ) ; } pub type value_list_t = value_list_s ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct data_source_s { pub name : [ :: std :: os :: raw :: c_char ; 64usize ] , pub type_ : :: std :: os :: raw :: c_int , pub min : f64 , pub max : f64 , } # [ test ] fn bindgen_test_layout_data_source_s ( ) { assert_eq ! ( :: std :: mem :: size_of :: < data_source_s > ( ) , 88usize , concat ! ( "Size of: " , stringify ! ( data_source_s ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < data_source_s > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( data_source_s ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const data_source_s ) ) . name as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( data_source_s ) , "::" , stringify ! ( name ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const data_source_s ) ) . type_ as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( data_source_s ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const data_source_s ) ) . min as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( data_source_s ) , "::" , stringify ! ( min ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const data_source_s ) ) . max as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( data_source_s ) , "::" , stringify ! ( max ) ) ) ; } pub type data_source_t = data_source_s ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct data_set_s { pub type_ : [ :: std :: os :: raw :: c_char ; 64usize ] , pub ds_num : :: std :: os :: raw :: c_int , pub ds : * mut data_source_t , } # [ test ] fn bindgen_test_layout_data_set_s ( ) { assert_eq ! ( :: std :: mem :: size_of :: < data_set_s > ( ) , 80usize , concat ! ( "Size of: " , stringify ! ( data_set_s ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < data_set_s > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( data_set_s ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const data_set_s ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( data_set_s ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const data_set_s ) ) . ds_num as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( data_set_s ) , "::" , stringify ! ( ds_num ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const data_set_s ) ) . ds as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( data_set_s ) , "::" , stringify ! ( ds ) ) ) ; } pub type data_set_t = data_set_s ; pub const notification_meta_type_e_NM_TYPE_STRING : notification_meta_type_e = 0 ; pub const notification_meta_type_e_NM_TYPE_SIGNED_INT : notification_meta_type_e = 1 ; pub const notification_meta_type_e_NM_TYPE_UNSIGNED_INT : notification_meta_type_e = 2 ; pub const notification_meta_type_e_NM_TYPE_DOUBLE : notification_meta_type_e = 3 ; pub const notification_meta_type_e_NM_TYPE_BOOLEAN : notification_meta_type_e = 4 ; pub type notification_meta_type_e = :: std :: os :: raw :: c_uint ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct notification_meta_s { pub name : [ :: std :: os :: raw :: c_char ; 64usize ] , pub type_ : notification_meta_type_e , pub nm_value : notification_meta_s__bindgen_ty_1 , pub next : * mut notification_meta_s , } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union notification_meta_s__bindgen_ty_1 { pub nm_string : * const :: std :: os :: raw :: c_char , pub nm_signed_int : i64 , pub nm_unsigned_int : u64 , pub nm_double : f64 , pub nm_boolean : bool , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout_notification_meta_s__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < notification_meta_s__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( notification_meta_s__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < notification_meta_s__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( notification_meta_s__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const notification_meta_s__bindgen_ty_1 ) ) . nm_string as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( notification_meta_s__bindgen_ty_1 ) , "::" , stringify ! ( nm_string ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const notification_meta_s__bindgen_ty_1 ) ) . nm_signed_int as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( notification_meta_s__bindgen_ty_1 ) , "::" , stringify ! ( nm_signed_int ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const notification_meta_s__bindgen_ty_1 ) ) . nm_unsigned_int as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( notification_meta_s__bindgen_ty_1 ) , "::" , stringify ! ( nm_unsigned_int ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const notification_meta_s__bindgen_ty_1 ) ) . nm_double as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( notification_meta_s__bindgen_ty_1 ) , "::" , stringify ! ( nm_double ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const notification_meta_s__bindgen_ty_1 ) ) . nm_boolean as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( notification_meta_s__bindgen_ty_1 ) , "::" , stringify ! ( nm_boolean ) ) ) ; } # [ test ] fn bindgen_test_layout_notification_meta_s ( ) { assert_eq ! ( :: std :: mem :: size_of :: < notification_meta_s > ( ) , 88usize , concat ! ( "Size of: " , stringify ! ( notification_meta_s ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < notification_meta_s > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( notification_meta_s ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const notification_meta_s ) ) . name as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( notification_meta_s ) , "::" , stringify ! ( name ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const notification_meta_s ) ) . type_ as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( notification_meta_s ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const notification_meta_s ) ) . nm_value as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( notification_meta_s ) , "::" , stringify ! ( nm_value ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const notification_meta_s ) ) . next as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( notification_meta_s ) , "::" , stringify ! ( next ) ) ) ; } pub type notification_meta_t = notification_meta_s ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct notification_s { pub severity : :: std :: os :: raw :: c_int , pub time : cdtime_t , pub message : [ :: std :: os :: raw :: c_char ; 256usize ] , pub host : [ :: std :: os :: raw :: c_char ; 64usize ] , pub plugin : [ :: std :: os :: raw :: c_char ; 64usize ] , pub plugin_instance : [ :: std :: os :: raw :: c_char ; 64usize ] , pub type_ : [ :: std :: os :: raw :: c_char ; 64usize ] , pub type_instance : [ :: std :: os :: raw :: c_char ; 64usize ] , pub meta : * mut notification_meta_t , } # [ test ] fn bindgen_test_layout_notification_s ( ) { assert_eq ! ( :: std :: mem :: size_of :: < notification_s > ( ) , 600usize , concat ! ( "Size of: " , stringify ! ( notification_s ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < notification_s > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( notification_s ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const notification_s ) ) . severity as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( notification_s ) , "::" , stringify ! ( severity ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const notification_s ) ) . time as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( notification_s ) , "::" , stringify ! ( time ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const notification_s ) ) . message as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( notification_s ) , "::" , stringify ! ( message ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const notification_s ) ) . host as * const _ as usize } , 272usize , concat ! ( "Alignment of field: " , stringify ! ( notification_s ) , "::" , stringify ! ( host ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const notification_s ) ) . plugin as * const _ as usize } , 336usize , concat ! ( "Alignment of field: " , stringify ! ( notification_s ) , "::" , stringify ! ( plugin ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const notification_s ) ) . plugin_instance as * const _ as usize } , 400usize , concat ! ( "Alignment of field: " , stringify ! ( notification_s ) , "::" , stringify ! ( plugin_instance ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const notification_s ) ) . type_ as * const _ as usize } , 464usize , concat ! ( "Alignment of field: " , stringify ! ( notification_s ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const notification_s ) ) . type_instance as * const _ as usize } , 528usize , concat ! ( "Alignment of field: " , stringify ! ( notification_s ) , "::" , stringify ! ( type_instance ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const notification_s ) ) . meta as * const _ as usize } , 592usize , concat ! ( "Alignment of field: " , stringify ! ( notification_s ) , "::" , stringify ! ( meta ) ) ) ; } pub type notification_t = notification_s ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct user_data_s { pub data : * mut :: std :: os :: raw :: c_void , pub free_func : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void ) > , } # [ test ] fn bindgen_test_layout_user_data_s ( ) { assert_eq ! ( :: std :: mem :: size_of :: < user_data_s > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( user_data_s ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < user_data_s > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( user_data_s ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const user_data_s ) ) . data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( user_data_s ) , "::" , stringify ! ( data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const user_data_s ) ) . free_func as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( user_data_s ) , "::" , stringify ! ( free_func ) ) ) ; } pub type user_data_t = user_data_s ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct plugin_ctx_s { pub interval : cdtime_t , } # [ test ] fn bindgen_test_layout_plugin_ctx_s ( ) { assert_eq ! ( :: std :: mem :: size_of :: < plugin_ctx_s > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( plugin_ctx_s ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < plugin_ctx_s > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( plugin_ctx_s ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const plugin_ctx_s ) ) . interval as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( plugin_ctx_s ) , "::" , stringify ! ( interval ) ) ) ; } pub type plugin_ctx_t = plugin_ctx_s ; pub type plugin_init_cb = :: std :: option :: Option < unsafe extern "C" fn ( ) -> :: std :: os :: raw :: c_int > ; pub type plugin_read_cb = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut user_data_t ) -> :: std :: os :: raw :: c_int > ; pub type plugin_write_cb = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const data_set_t , arg2 : * const value_list_t , arg3 : * mut user_data_t ) -> :: std :: os :: raw :: c_int > ; pub type plugin_flush_cb = :: std :: option :: Option < unsafe extern "C" fn ( timeout : cdtime_t , identifier : * const :: std :: os :: raw :: c_char , arg1 : * mut user_data_t ) -> :: std :: os :: raw :: c_int > ; pub type plugin_missing_cb = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const value_list_t , arg2 : * mut user_data_t ) -> :: std :: os :: raw :: c_int > ; pub type plugin_log_cb = :: std :: option :: Option < unsafe extern "C" fn ( severity : :: std :: os :: raw :: c_int , message : * const :: std :: os :: raw :: c_char , arg1 : * mut user_data_t ) > ; pub type plugin_shutdown_cb = :: std :: option :: Option < unsafe extern "C" fn ( ) -> :: std :: os :: raw :: c_int > ; pub type plugin_notification_cb = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const notification_t , arg2 : * mut user_data_t ) -> :: std :: os :: raw :: c_int > ; extern "C" {
 pub fn plugin_set_dir ( dir : * const :: std :: os :: raw :: c_char , ) ; 
} extern "C" {
 pub fn plugin_load ( name : * const :: std :: os :: raw :: c_char , flags : u32 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_init_all ( ) ; 
} extern "C" {
 pub fn plugin_read_all ( ) ; 
} extern "C" {
 pub fn plugin_read_all_once ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_shutdown_all ( ) ; 
} extern "C" {
 pub fn plugin_write ( plugin : * const :: std :: os :: raw :: c_char , ds : * const data_set_t , vl : * const value_list_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_flush ( plugin : * const :: std :: os :: raw :: c_char , timeout : cdtime_t , identifier : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_register_config ( name : * const :: std :: os :: raw :: c_char , callback : :: std :: option :: Option < unsafe extern "C" fn ( key : * const :: std :: os :: raw :: c_char , val : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int > , keys : * mut * const :: std :: os :: raw :: c_char , keys_num : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_register_complex_config ( type_ : * const :: std :: os :: raw :: c_char , callback : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut oconfig_item_t ) -> :: std :: os :: raw :: c_int > , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_register_init ( name : * const :: std :: os :: raw :: c_char , callback : plugin_init_cb , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_register_read ( name : * const :: std :: os :: raw :: c_char , callback : :: std :: option :: Option < unsafe extern "C" fn ( ) -> :: std :: os :: raw :: c_int > , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_register_complex_read ( group : * const :: std :: os :: raw :: c_char , name : * const :: std :: os :: raw :: c_char , callback : plugin_read_cb , interval : * const timespec , user_data : * mut user_data_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_register_write ( name : * const :: std :: os :: raw :: c_char , callback : plugin_write_cb , user_data : * mut user_data_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_register_flush ( name : * const :: std :: os :: raw :: c_char , callback : plugin_flush_cb , user_data : * mut user_data_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_register_missing ( name : * const :: std :: os :: raw :: c_char , callback : plugin_missing_cb , user_data : * mut user_data_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_register_shutdown ( name : * const :: std :: os :: raw :: c_char , callback : plugin_shutdown_cb , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_register_data_set ( ds : * const data_set_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_register_log ( name : * const :: std :: os :: raw :: c_char , callback : plugin_log_cb , user_data : * mut user_data_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_register_notification ( name : * const :: std :: os :: raw :: c_char , callback : plugin_notification_cb , user_data : * mut user_data_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_unregister_config ( name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_unregister_complex_config ( name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_unregister_init ( name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_unregister_read ( name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_unregister_read_group ( group : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_unregister_write ( name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_unregister_flush ( name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_unregister_missing ( name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_unregister_shutdown ( name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_unregister_data_set ( name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_unregister_log ( name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_unregister_notification ( name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_dispatch_values ( vl : * const value_list_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_dispatch_missing ( vl : * const value_list_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_dispatch_notification ( notif : * const notification_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_log ( level : :: std :: os :: raw :: c_int , format : * const :: std :: os :: raw :: c_char , ... ) ; 
} extern "C" {
 pub fn parse_log_severity ( severity : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn parse_notif_severity ( severity : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_get_ds ( name : * const :: std :: os :: raw :: c_char , ) -> * const data_set_t ; 
} extern "C" {
 pub fn plugin_notification_meta_add_string ( n : * mut notification_t , name : * const :: std :: os :: raw :: c_char , value : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_notification_meta_add_signed_int ( n : * mut notification_t , name : * const :: std :: os :: raw :: c_char , value : i64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_notification_meta_add_unsigned_int ( n : * mut notification_t , name : * const :: std :: os :: raw :: c_char , value : u64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_notification_meta_add_double ( n : * mut notification_t , name : * const :: std :: os :: raw :: c_char , value : f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_notification_meta_add_boolean ( n : * mut notification_t , name : * const :: std :: os :: raw :: c_char , value : bool , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_notification_meta_copy ( dst : * mut notification_t , src : * const notification_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_notification_meta_free ( n : * mut notification_meta_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn plugin_init_ctx ( ) ; 
} extern "C" {
 pub fn plugin_get_ctx ( ) -> plugin_ctx_t ; 
} extern "C" {
 pub fn plugin_set_ctx ( ctx : plugin_ctx_t , ) -> plugin_ctx_t ; 
} extern "C" {
 pub fn plugin_get_interval ( ) -> cdtime_t ; 
} extern "C" {
 pub fn plugin_thread_create ( thread : * mut pthread_t , attr : * const pthread_attr_t , start_routine : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void ) -> * mut :: std :: os :: raw :: c_void > , arg : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} pub type __builtin_va_list = [ __va_list_tag ; 1usize ] ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __va_list_tag { pub gp_offset : :: std :: os :: raw :: c_uint , pub fp_offset : :: std :: os :: raw :: c_uint , pub overflow_arg_area : * mut :: std :: os :: raw :: c_void , pub reg_save_area : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout___va_list_tag ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __va_list_tag > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( __va_list_tag ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __va_list_tag > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __va_list_tag ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __va_list_tag ) ) . gp_offset as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( gp_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __va_list_tag ) ) . fp_offset as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( fp_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __va_list_tag ) ) . overflow_arg_area as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( overflow_arg_area ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __va_list_tag ) ) . reg_save_area as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( reg_save_area ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __locale_data { pub _address : u8 , }